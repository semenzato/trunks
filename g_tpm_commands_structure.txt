_COMMENT TPM_Init is a physical method of initializing a TPM. There is no TPM_Init ordinal as this is a platform message sent on the platform internals to the TPM. On a PC this command arrives at the TPM via the LPC bus and informs the TPM that the platform is performing a boot process. TPM_Init puts the TPM into a state where it waits for the command TPM_Startup (which specifies the type of initialization that is required.

_TPM_COMMAND TPM_Startup
_COMMENT TPM_Startup is always preceded by TPM_Init, which is the physical indication (a system319wide reset) that TPM initialization is necessary. There are many events on a platform that can cause a reset and the response to these events can require different operations to occur on the TPM. The mere reset indication does not contain sufficient information to inform the TPM as to what type of reset is occurring. Additional information known by the platform initialization code needs transmitting to the TPM. The TPM_Startup command provides the mechanism to transmit the information. The TPM can startup in three different modes: A “clear” start where all variables go back to their default or non-volatile set state A “save” start where the TPM recovers appropriate information and restores various values based on a prior TPM_SaveState. This recovery requires an invocation of TPM_Init to be successful. A failing "save" start must shut down the TPM. The CRTM cannot leave the TPM in a state where an untrusted upper software layer could issue a "clear" and then extend PCR's and thus mimic the CRTM. A “deactivated” start where the TPM turns itself off and requires another TPM_Init before the TPM will execute in a fully operational state.
_IN_PARAM TPM_TAG tag TPM_TAG_RQU_COMMAND
_IN_PARAM UINT32 paramSize Total number of input bytes including paramSize and tag
_IN_PARAM TPM_COMMAND_CODE ordinal Command ordinal TPM_ORD_Startup
_IN_PARAM TPM_STARTUP_TYPE startupType Type of startup that is occurring
_OUT_PARAM TPM_TAG tag TPM_TAG_RSP_COMMAND
_OUT_PARAM UINT32 paramSize Total number of output bytes including paramSize and tag
_OUT_PARAM TPM_RESULT returnCode The return code of the operation.

_TPM_COMMAND TPM_SaveState
_COMMENT This warns a TPM to save some state information. If the relevant shielded storage is non-volatile, this command need have no effect. If the relevant shielded storage is volatile and the TPM alone is unable to detect the loss of external power in time to move data to non-volatile memory, this command should be presented before the TPM enters a low or no power state. Resettable PCRs are tied to platform state that does not survive a sleep state. If the PCRs did not reset, they would falsely indicate that the platform state was already present when it came out of sleep. Since some setup is required first, there would be a gap where PCRs indicated the wrong state. Therefore, the PCRs must be recreated. Any loaded keys may be preserved. Keys with parentPCRStatus TRUE are not given priority because of security concerns. Rather, since the key might be part of a storage tree that requires PCR value transitions, it might not be directly loadable after TPM_Startup(ST_STATE). For a TPM implementation that does not save all loaded keys, the platform should issue a TPM_SaveContext / TPM_LoadContext sequence for those loaded keys. contextNonceKey will be restored, guaranteeing that the saved key context can be restored.
_IN_PARAM TPM_TAG tag TPM_TAG_RQU_COMMAND
_IN_PARAM UINT32 paramSize Total number of input bytes including paramSize and tag
_IN_PARAM TPM_COMMAND_CODE ordinal Command ordinal: TPM_ORD_SaveState.
_OUT_PARAM TPM_TAG tag TPM_TAG_RSP_COMMAND
_OUT_PARAM UINT32 paramSize Total number of output bytes including paramSize and tag
_OUT_PARAM TPM_RESULT returnCode The return code of the operation.

_TPM_COMMAND TPM_SelfTestFull
_COMMENT TPM_SelfTestFull tests all of the TPM capabilities. Unlike TPM_ContinueSelfTest, which may optionally return immediately and then perform the tests, TPM_SelfTestFull always performs the tests and then returns success or failure.
_IN_PARAM TPM_TAG tag TPM_TAG_RQU_COMMAND
_IN_PARAM UINT32 paramSize Total number of input bytes including paramSize and tag
_IN_PARAM TPM_COMMAND_CODE ordinal Command ordinal: TPM_ORD_SelfTestFull
_OUT_PARAM TPM_TAG tag TPM_TAG_RSP_COMMAND
_OUT_PARAM UINT32 paramSize Total number of output bytes including paramSize and tag
_OUT_PARAM TPM_RESULT returnCode The return code of the operation.

_TPM_COMMAND TPM_ContinueSelfTest
_COMMENT TPM_ContinueSelfTest informs the TPM that it should complete the self-test of all TPM functions. The TPM may return success immediately and then perform the self-test, or it may perform the self-test and then return success or failure.
_IN_PARAM TPM_TAG tag TPM_TAG_RQU_COMMAND
_IN_PARAM UINT32 paramSize Total number of input bytes including paramSize and tag
_IN_PARAM TPM_COMMAND_CODE ordinal Command ordinal: TPM_ORD_ContinueSelfTest
_OUT_PARAM TPM_TAG tag TPM_TAG_RSP_COMMAND
_OUT_PARAM UINT32 paramSize Total number of output bytes including paramSize and tag
_OUT_PARAM TPM_RESULT returnCode The return code of the operation.

_TPM_COMMAND TPM_GetTestResult
_COMMENT TPM_GetTestResult provides manufacturer specific information regarding the results of the self-test. This command will work when the TPM is in self-test failure mode. The reason for allowing this command to operate in the failure mode is to allow TPM manufacturers to obtain diagnostic information.
_IN_PARAM TPM_TAG tag TPM_TAG_RQU_COMMAND
_IN_PARAM UINT32 paramSize Total number of input bytes including paramSize and tag
_IN_PARAM TPM_COMMAND_CODE ordinal Command ordinal: TPM_ORD_GetTestResult
_OUT_PARAM TPM_TAG tag TPM_TAG_RSP_COMMAND
_OUT_PARAM UINT32 paramSize Total number of output bytes including paramSize and tag
_OUT_PARAM TPM_RESULT returnCode The return code of the operation.
_OUT_PARAM UINT32 outDataSize The size of the outData area
_OUT_PARAM BYTE[] outData The outData this is manufacturer specific

_TPM_COMMAND TPM_SetOwnerInstall
_COMMENT When enabled but without an owner this command sets the PERMANENT flag that allows or disallows the ability to insert an owner.
_IN_PARAM TPM_TAG tag TPM_TAG_RQU_COMMAND
_IN_PARAM UINT32 paramSize Total number of input bytes including paramSize and tag
_IN_PARAM TPM_COMMAND_CODE ordinal Command ordinal: TPM_ORD_SetOwnerInstall
_IN_PARAM BOOL state State to which ownership flag is to be set.
_OUT_PARAM TPM_TAG tag TPM_TAG_RSP_COMMAND
_OUT_PARAM UINT32 paramSize Total number of output bytes including paramSize and tag
_OUT_PARAM TPM_RESULT returnCode The return code of the operation.

_TPM_COMMAND TPM_OwnerSetDisable
_COMMENT The TPM owner sets the PERMANENT disable flag to TRUE or FALSE.
_IN_PARAM TPM_TAG tag TPM_TAG_RQU_AUTH1_COMMAND
_IN_PARAM UINT32 paramSize Total number of input bytes including paramSize and tag
_IN_PARAM TPM_COMMAND_CODE ordinal Command ordinal: TPM_ORD_OwnerSetDisable
_IN_PARAM BOOL disableState Value for disable state
_IN_PARAM TPM_AUTHHANDLE authHandle The authorization session handle used for owner authentication.
_IN_PARAM TPM_NONCE authLastNonceEven Even nonce previously generated by TPM to cover inputs
_IN_PARAM TPM_NONCE nonceOdd Nonce generated by system associated with authHandle
_IN_PARAM BOOL continueAuthSession The continue use flag for the authorization session handle
_IN_PARAM TPM_AUTHDATA ownerAuth The authorization session digest for inputs and owner authentication. HMAC key: ownerAuth.
_OUT_PARAM TPM_TAG tag TPM_TAG_RSP_AUTH1_COMMAND
_OUT_PARAM UINT32 paramSize Total number of output bytes including paramSize and tag
_OUT_PARAM TPM_RESULT returnCode The return code of the operation.
_OUT_PARAM TPM_NONCE nonceEven Even nonce newly generated by TPM to cover outputs
_OUT_PARAM BOOL continueAuthSession Continue use flag, TRUE if handle is still active
_OUT_PARAM TPM_AUTHDATA resAuth The authorization session digest for the returned parameters. HMAC key: ownerAuth.

_TPM_COMMAND TPM_PhysicalEnable
_COMMENT Sets the PERMANENT disable flag to FALSE using physical presence as authorization.
_IN_PARAM TPM_TAG tag TPM_TAG_RQU_COMMAND
_IN_PARAM UINT32 paramSize Total number of input bytes including paramSize and tag
_IN_PARAM TPM_COMMAND_CODE ordinal Command ordinal: TPM_ORD_PhysicalEnable
_OUT_PARAM TPM_TAG tag TPM_TAG_RSP_COMMAND
_OUT_PARAM UINT32 paramSize Total number of output bytes including paramSize and tag
_OUT_PARAM TPM_RESULT returnCode The return code of the operation.

_TPM_COMMAND TPM_PhysicalDisable
_COMMENT Sets the PERMANENT disable flag to TRUE using physical presence as authorization
_IN_PARAM TPM_TAG tag TPM_TAG_RQU_COMMAND
_IN_PARAM UINT32 paramSize Total number of input bytes including paramSize and tag
_IN_PARAM TPM_COMMAND_CODE ordinal Command ordinal: TPM_ORD_PhysicalDisable
_OUT_PARAM TPM_TAG tag TPM_TAG_RSP_COMMAND
_OUT_PARAM UINT32 paramSize Total number of output bytes including paramSize and tag
_OUT_PARAM TPM_RESULT returnCode The return code of the operation.

_TPM_COMMAND TPM_PhysicalSetDeactivated
_COMMENT Changes the TPM persistant deactivated flag using physical presence as authorization. This command is not available when the TPM is disabled.
_IN_PARAM TPM_TAG tag TPM_TAG_RQU_COMMAND
_IN_PARAM UINT32 paramSize Total number of input bytes including paramSize and tag
_IN_PARAM TPM_COMMAND_CODE ordinal Command ordinal: TPM_ORD_PhysicalSetDeactivated
_IN_PARAM BOOL state State to which deactivated flag is to be set.
_OUT_PARAM TPM_TAG tag TPM_TAG_RSP_COMMAND
_OUT_PARAM UINT32 paramSize Total number of output bytes including paramSize and tag
_OUT_PARAM TPM_RESULT returnCode The return code of the operation.

_TPM_COMMAND TPM_SetTempDeactivated
_COMMENT This command allows the operator of the platform to deactivate the TPM until the next boot of the platform. This command requires operator authentication. The operator can provide the authentication by either the assertion of physical presence or presenting the operator AuthData value.
_IN_PARAM TPM_TAG tag TPM_TAG_RQU_AUTH1_COMMAND
_IN_PARAM UINT32 paramSize Total number of input bytes including paramSize and tag
_IN_PARAM TPM_COMMAND_CODE ordinal Command ordinal: TPM_ORD_SetTempDeactivated
_IN_PARAM TPM_AUTHHANDLE authHandle Auth handle for operation validation. Session type MUST be OIAP
_IN_PARAM TPM_NONCE authLastNonceEven Even nonce previously generated by TPM to cover inputs
_IN_PARAM TPM_NONCE nonceOdd Nonce generated by system associated with authHandle
_IN_PARAM BOOL continueAuthSession The continue use flag for the authorization session handle
_IN_PARAM TPM_AUTHDATA operatorAuth HMAC key: operatorAuth
_OUT_PARAM TPM_TAG tag TPM_TAG_RSP_AUTH1_COMMAND
_OUT_PARAM UINT32 paramSize Total number of output bytes including paramSize and tag
_OUT_PARAM TPM_RESULT returnCode The return code of the operation.
_OUT_PARAM TPM_NONCE nonceEven Even nonce newly generated by TPM to cover outputs
_OUT_PARAM BOOL continueAuthSession Continue use flag, TRUE if handle is still active
_OUT_PARAM TPM_AUTHDATA resAuth The authorization session digest for the returned parameters. HMAC key: operatorAuth.

_TPM_COMMAND TPM_SetOperatorAuth
_COMMENT This command allows the setting of the operator AuthData value. There is no confidentiality applied to the operator authentication as the value is sent under the assumption of being local to the platform. If there is a concern regarding the path between the TPM and the keyboard then unless the keyboard is using encryption and a secure channel an attacker can read the values.
_IN_PARAM TPM_TAG tag TPM_TAG_RQU_COMMAND
_IN_PARAM UINT32 paramSize Total number of input bytes including paramSize and tag
_IN_PARAM TPM_COMMAND_CODE ordinal Command ordinal: TPM_ORD_SetOperatorAuth
_IN_PARAM TPM_SECRET operatorAuth The operator AuthData
_IN_PARAM TPM_TAG tag TPM_TAG_RSP_COMMAND
_OUT_PARAM UINT32 paramSize Total number of output bytes including paramSize and tag
_OUT_PARAM TPM_RESULT returnCode The return code of the operation.

_TPM_COMMAND TPM_TakeOwnership
_COMMENT This command inserts the TPM Ownership value into the TPM.
_IN_PARAM TPM_TAG tag TPM_TAG_RQU_AUTH1_COMMAND
_IN_PARAM UINT32 paramSize Total number of input bytes including paramSize and tag
_IN_PARAM TPM_COMMAND_CODE ordinal Command ordinal: TPM_ORD_TakeOwnership
_IN_PARAM TPM_PROTOCOL_ID protocolID The ownership protocol in use.
_IN_PARAM UINT32 encOwnerAuthSize The size of the encOwnerAuth field
_IN_PARAM BYTE[] encOwnerAuth The owner AuthData encrypted with PUBEK
_IN_PARAM UINT32 encSrkAuthSize The size of the encSrkAuth field
_IN_PARAM BYTE[] encSrkAuth The SRK AuthData encrypted with PUBEK
_IN_PARAM TPM_KEY12 srkParams Structure containing all parameters of new SRK. pubKey.keyLength & encSize are both 0. This structure MAY be TPM_KEY12.
_IN_PARAM TPM_AUTHHANDLE authHandle The authorization session handle used for this command
_IN_PARAM TPM_NONCE authLastNonceEven Even nonce previously generated by TPM to cover inputs
_IN_PARAM TPM_NONCE nonceOdd Nonce generated by system associated with authHandle
_IN_PARAM BOOL continueAuthSession The continue use flag for the authorization session handle
_IN_PARAM TPM_AUTHDATA ownerAuth Authorization session digest for input params. HMAC key: the new ownerAuth value. See actions for validation operations
_OUT_PARAM TPM_TAG tag TPM_TAG_RSP_AUTH1_COMMAND
_OUT_PARAM UINT32 paramSize Total number of output bytes including paramSize and tag
_OUT_PARAM TPM_RESULT returnCode The return code of the operation.
_OUT_PARAM TPM_KEY srkPub Structure containing all parameters of new SRK. srkPub.encData is set to . This structure MAY be TPM_KEY12.
_OUT_PARAM TPM_NONCE nonceEven Even nonce newly generated by TPM to cover outputs
_OUT_PARAM BOOL continueAuthSession Continue use flag, TRUE if handle is still active
_OUT_PARAM TPM_AUTHDATA resAuth The authorization session digest for the returned parameters. HMAC key: the new ownerAuth value

_TPM_COMMAND TPM_OwnerClear
_COMMENT The TPM_OwnerClear command performs the clear operation under Owner authentication. This command is available until the Owner executes the TPM_DisableOwnerClear, at which time any further invocation of this command returns TPM_CLEAR_DISABLED.
_IN_PARAM TPM_TAG tag TPM_TAG_RQU_AUTH1_COMMAND
_IN_PARAM UINT32 paramSize Total number of input bytes including paramSize and tag
_IN_PARAM TPM_COMMAND_CODE ordinal Command ordinal: TPM_ORD_OwnerClear
_IN_PARAM TPM_AUTHHANDLE authHandle The authorization session handle used for owner authentication.
_IN_PARAM TPM_NONCE authLastNonceEven Even nonce previously generated by TPM to cover inputs
_IN_PARAM TPM_NONCE nonceOdd Nonce generated by system associated with authHandle
_IN_PARAM BOOL continueAuthSession Ignored
_IN_PARAM TPM_AUTHDATA ownerAuth The authorization session digest for inputs and owner authentication. HMAC key: ownerAuth.
_OUT_PARAM TPM_TAG tag TPM_TAG_RSP_AUTH1_COMMAND
_OUT_PARAM UINT32 paramSize Total number of output bytes including paramSize and tag
_OUT_PARAM TPM_RESULT returnCode The return code of the operation.
_OUT_PARAM TPM_NONCE nonceEven Even nonce newly generated by TPM to cover outputs
_OUT_PARAM BOOL continueAuthSession Fixed value FALSE
_OUT_PARAM TPM_AUTHDATA resAuth The authorization session digest for the returned parameters. HMAC key: old ownerAuth.

_TPM_COMMAND TPM_ForceClear
_COMMENT The TPM_ForceClear command performs the Clear operation under physical access. This command is available until the execution of the TPM_DisableForceClear, at which time any further invocation of this command returns TPM_CLEAR_DISABLED. TPM_ForceClear can succeed even if no owner is installed. In that case, it does whatever TPM_OwnerClear actions that it can.
_IN_PARAM TPM_TAG tag TPM_TAG_RQU_COMMAND
_IN_PARAM UINT32 paramSize Total number of input bytes including paramSize and tag
_IN_PARAM TPM_COMMAND_CODE ordinal Command ordinal: TPM_ORD_ForceClear
_OUT_PARAM TPM_TAG tag TPM_TAG_RSP_COMMAND
_OUT_PARAM UINT32 paramSize Total number of output bytes including paramSize and tag
_OUT_PARAM TPM_RESULT returnCode The return code of the operation.

_TPM_COMMAND TPM_DisableOwnerClear
_COMMENT The TPM_DisableOwnerClear command disables the ability to execute the TPM_OwnerClear command permanently. Once invoked the only method of clearing the TPM will require physical access to the TPM. After the execution of TPM_ForceClear, ownerClear is re-enabled and must be explicitly disabled again by the new TPM Owner.
_IN_PARAM TPM_TAG tag TPM_TAG_RQU_AUTH1_COMMAND
_IN_PARAM UINT32 paramSize Total number of input bytes including paramSize and tag
_IN_PARAM TPM_COMMAND_CODE ordinal Command ordinal: TPM_ORD_DisableOwnerClear
_IN_PARAM TPM_AUTHHANDLE authHandle The authorization session handle used for owner authentication.
_IN_PARAM TPM_NONCE authLastNonceEven Even nonce previously generated by TPM to cover inputs
_IN_PARAM TPM_NONCE nonceOdd Nonce generated by system associated with authHandle
_IN_PARAM BOOL continueAuthSession The continue use flag for the authorization session handle
_IN_PARAM TPM_AUTHDATA ownerAuth The authorization session digest for inputs and owner authentication. HMAC key: ownerAuth.
_OUT_PARAM TPM_TAG tag TPM_TAG_RSP_AUTH1_COMMAND
_OUT_PARAM UINT32 paramSize Total number of output bytes including paramSize and tag
_OUT_PARAM TPM_RESULT returnCode The return code of the operation.
_OUT_PARAM TPM_NONCE nonceEven Even nonce newly generated by TPM to cover outputs
_OUT_PARAM BOOL continueAuthSession Continue use flag, TRUE if handle is still active
_OUT_PARAM TPM_AUTHDATA resAuth The authorization session digest for the returned parameters. HMAC key: ownerAuth.

_TPM_COMMAND TPM_DisableForceClear
_COMMENT The TPM_DisableForceClear command disables the execution of the TPM_ForceClear command until the next startup cycle. Once this command is executed, the TPM_ForceClear is disabled until another startup cycle is run.
_IN_PARAM TPM_TAG tag TPM_TAG_RQU_COMMAND
_IN_PARAM UINT32 paramSize Total number of input bytes including paramSize and tag
_IN_PARAM TPM_COMMAND_CODE ordinal Command ordinal: TPM_ORD_DisableForceClear
_OUT_PARAM TPM_TAG tag TPM_TAG_RSP_COMMAND
_OUT_PARAM UINT32 paramSize Total number of output bytes including paramSize and tag
_OUT_PARAM TPM_RESULT returnCode The return code of the operation.

_TPM_COMMAND TSC_PhysicalPresence
_COMMENT Some TPM operations require the indication of a human’s physical presence at the platform. The presence of the human either provides another indication of platform ownership or a mechanism to ensure that the execution of the command is not the result of a remote software process. This command allows a process on the platform to indicate the assertion of physical presence. As this command is executable by software there must be protections against the improper invocation of this command. The physicalPresenceHWEnable and physicalPresenceCMDEnable indicate the ability for either SW or HW to indicate physical presence. These flags can be reset until the physicalPresenceLifetimeLock is set. The platform manufacturer should set these flags to indicate the capabilities of the platform the TPM is bound to. The command provides two sets of functionality. The first is to enable, permanently, either the HW or the SW ability to assert physical presence. The second is to allow SW, if enabled, to assert physical presence.
_IN_PARAM TPM_TAG tag TPM_TAG_RQU_COMMAND
_IN_PARAM UINT32 paramSize Total number of input bytes including paramSize and tag
_IN_PARAM TPM_COMMAND_CODE ordinal Command ordinal: TSC_ORD_PhysicalPresence.
_IN_PARAM TPM_PHYSICAL_PRESENCE physicalPresence The state to set the TPM’s Physical Presence flags.
_OUT_PARAM TPM_TAG tag TPM_TAG_RSP_COMMAND
_OUT_PARAM UINT32 paramSize Total number of output bytes including paramSize and tag
_OUT_PARAM TPM_RESULT returnCode The return code of the operation.

_TPM_COMMAND TSC_ResetEstablishmentBit
_COMMENT The PC TPM Interface Specification (TIS) specifies setting tpmEstablished to TRUE upon execution of the HASH_START sequence. The setting implies the creation of a Trusted Operating System on the platform. Platforms will use the value of tpmEstablished to determine if operations necessary to maintain the security perimeter are necessary. The tpmEstablished bit provides a non-volatile, secure reporting that a HASH_START was previously run on the platform. When a platform makes use of the tpmEstablished bit, the platform can reset tpmEstablished as the operation is no longer necessary. For example, a platform could use tpmEstablished to ensure that, if HASH_START had ever been, executed the platform could use the value to invoke special processing. Once the processing is complete the platform will wish to reset tpmEstablished to avoid invoking the special process again. The TPM_PERMANENT_FLAGS -> tpmEstablished bit described in the TPM specifications uses positive logic. The TPM_ACCESS register uses negative logic, so that TRUE is reflected as a 0.
_IN_PARAM TPM_TAG tag TPM_TAG_RQU_COMMAND
_IN_PARAM UINT32 paramSize Total number of input bytes including paramSize and tag
_IN_PARAM TPM_COMMAND_CODE ordinal Command ordinal: TSC_ORD_ResetEstablishmentBit
_OUT_PARAM TPM_TAG tag TPM_TAG_RSP_COMMAND
_OUT_PARAM UINT32 paramSize Total number of output bytes including paramSize and tag
_OUT_PARAM TPM_RESULT returnCode The return code of the operation.
_COMMENT The TPM has numerous capabilities that a remote entity may wish to know about. These items include support of algorithms, key sizes, protocols and vendor-specific additions. The TPM_GetCapability command allows the TPM to report back to the requestor what type of TPM it is dealing with. The request for information requires the requestor to specify which piece of information that is required. The request does not allow the “merging” of multiple requests and returns only a single piece of information. In failure mode, the TPM returns a limited set of information that includes the TPM manufacturer and version. In version 1.2 with the deletion of TPM_GetCapabilitySigned the way to obtain a signed listing of the capabilities is to create a transport session, perform TPM_GetCapability commands to list the information and then close the transport session using TPM_ReleaseTransportSigned.

_TPM_COMMAND TPM_GetCapability
_COMMENT This command returns current information regarding the TPM. The limitation on what can be returned in failure mode restricts the information a manufacturer may return when capArea indicates TPM_CAP_MFR.
_IN_PARAM TPM_TAG tag TPM_TAG_RQU_COMMAND
_IN_PARAM UINT32 paramSize Total number of input bytes including paramSize and tag
_IN_PARAM TPM_COMMAND_CODE ordinal Command ordinal: TPM_ORD_GetCapability
_IN_PARAM TPM_CAPABILITY_AREA capArea Partition of capabilities to be interrogated
_IN_PARAM UINT32 subCapSize Size of subCap parameter
_IN_PARAM BYTE[] subCap Further definition of information
_OUT_PARAM TPM_TAG tag TPM_TAG_RSP_COMMAND
_OUT_PARAM UINT32 paramSize Total number of output bytes including paramSize and tag
_OUT_PARAM TPM_RESULT returnCode The return code of the operation.
_OUT_PARAM UINT32 respSize The length of the returned capability response
_OUT_PARAM BYTE[] resp The capability response

_TPM_COMMAND TPM_SetCapability
_COMMENT This command sets values in the TPM. A setValue that is inconsistent with the capArea and subCap is considered a bad parameter.
_IN_PARAM TPM_TAG tag TPM_TAG_RQU_AUTH1_COMMAND
_IN_PARAM UINT32 paramSize Total number of input bytes including paramSize and tag
_IN_PARAM TPM_COMMAND_CODE ordinal ordinal: TPM_ORD_SetCapability
_IN_PARAM TPM_CAPABILITY_AREA capArea Partition of capabilities to be set
_IN_PARAM UINT32 subCapSize Size of subCap parameter
_IN_PARAM BYTE[] subCap Further definition of information
_IN_PARAM UINT32 setValueSize The size of the value to set
_IN_PARAM BYTE[] setValue The value to set
_IN_PARAM TPM_AUTHHANDLE authHandle The authorization session handle used for owner authentication.
_IN_PARAM TPM_NONCE authLastNonceEven Even nonce previously generated by TPM to cover inputs
_IN_PARAM TPM_NONCE nonceOdd Nonce generated by system associated with authHandle
_IN_PARAM BOOL continueAuthSession The continue use flag for the authorization session handle
_IN_PARAM TPM_AUTHDATA ownerAuth Authorization. HMAC key: owner.usageAuth.
_OUT_PARAM TPM_TAG tag TPM_TAG_RSP_AUTH1_COMMAND
_OUT_PARAM UINT32 paramSize Total number of output bytes including paramSize and tag
_OUT_PARAM TPM_RESULT returnCode The return code of the operation.
_OUT_PARAM TPM_NONCE nonceEven Even nonce newly generated by TPM to cover outputs
_OUT_PARAM BOOL continueAuthSession Continue use flag, TRUE if handle is still active
_OUT_PARAM TPM_AUTHDATA resAuth Authorization HMAC key:owner.usageAuth.

_TPM_COMMAND TPM_GetCapabilityOwner
_COMMENT TPM_GetCapabilityOwner enables the TPM Owner to retrieve all the non-volatile flags and the volatile flags in a single operation. The flags summarize many operational aspects of the TPM. The information represented by some flags is private to the TPM Owner. So, for simplicity, proof of ownership of the TPM must be presented to retrieve the set of flags. When necessary, the flags that are not private to the Owner can be deduced by Users via other (more specific) means. The normal TPM authentication mechanisms are sufficient to prove the integrity of the response. No additional integrity check is required.
_IN_PARAM TPM_TAG tag TPM_TAG_RQU_AUTH1_COMMAND
_IN_PARAM UINT32 paramSize Total number of input bytes including paramSize and tag
_IN_PARAM TPM_COMMAND_CODE ordinal Command ordinal: TPM_ORD_GetCapabilityOwner
_IN_PARAM TPM_AUTHHANDLE authHandle The authorization handle used for Owner authorization.
_IN_PARAM TPM_NONCE authLastNonceEven Even nonce previously generated by TPM to cover inputs
_IN_PARAM TPM_NONCE nonceOdd Nonce generated by system associated with authHandle
_IN_PARAM BOOL continueAuthSession The continue use flag for the authorization handle
_IN_PARAM TPM_AUTHDATA ownerAuth The authorization digest for inputs and owner authorization. HMAC key: OwnerAuth.
_OUT_PARAM TPM_TAG tag TPM_TAG_RSP_AUTH1_COMMAND
_OUT_PARAM UINT32 paramSize Total number of output bytes including paramSize and tag
_OUT_PARAM TPM_RESULT returnCode The return code of the operation. See section 4.3.
_OUT_PARAM TPM_VERSION version A properly filled out version structure.
_OUT_PARAM UINT32 non_volatile_flags The current state of the non-volatile flags.
_OUT_PARAM UINT32 volatile_flags The current state of the volatile flags.
_OUT_PARAM TPM_NONCE nonceEven Even nonce newly generated by TPM to cover outputs
_OUT_PARAM BOOL continueAuthSession Continue use flag, TRUE if handle is still active
_OUT_PARAM TPM_AUTHDATA resAuth The authorization digest for the returned parameters. HMAC key: OwnerAuth.
_COMMENT The TPM generates an audit event in response to the TPM successfully executing a command that has the audit flag set to TRUE for that command ordinal. The TPM maintains an extended value for all audited operations.
_COMMENT The TPM audit process could have an internal error when attempting to audit a command. To indicate the audit failure, the TPM will return TPM_AUDITFAIL_SUCCESSFUL. This new functionality changes the 1.1 TPM functionality when this condition occurs. Since no audit occurs if the command fails, The TPM_AUDITFAIL_UNSUCCESSFUL return code is no longer used.

_TPM_COMMAND TPM_GetAuditDigest
_COMMENT This returns the current audit digest. The external audit log has the responsibility to track the parameters that constitute the audit digest. This value may be unique to an individual TPM. The value however will be changing at a rate set by the TPM Owner. Those attempting to use this value may find it changing without their knowledge. This value represents a very poor source of tracking uniqueness.
_IN_PARAM TPM_TAG tag TPM_TAG_RQU_COMMAND
_IN_PARAM UINT32 paramSize Total number of input bytes including paramSize and tag
_IN_PARAM TPM_COMMAND_CODE ordinal Command ordinal: TPM_ORD_GetAuditDigest
_IN_PARAM UINT32 startOrdinal The starting ordinal for the list of audited ordinals
_OUT_PARAM TPM_TAG Tag TPM_TAG_RSP_COMMAND
_OUT_PARAM UINT32 paramSize Total number of output bytes including paramSize and tag
_OUT_PARAM TPM_RESULT returnCode The return code of the operation.
_OUT_PARAM TPM_COUNTER_VALUE counterValue The current value of the audit monotonic counter
_OUT_PARAM TPM_DIGEST auditDigest Log of all audited events
_OUT_PARAM BOOL more TRUE if the output does not contain a full list of audited ordinals
_OUT_PARAM UINT32 ordSize Size of the ordinal list in bytes
_OUT_PARAM BYTE[] ordList List of ordinals that are audited.

_TPM_COMMAND TPM_GetAuditDigestSigned
_COMMENT The signing of the audit log returns the entire digest value and the list of currently audited commands. The inclusion of the list of audited commands as an atomic operation is to tie the current digest value with the list of commands that are being audited. Note to future architects When auditing functionality is active in a TPM, it may seem logical to remove this ordinal from the active set of ordinals as the signing functionality of this command could be handled in a signed transport session. While true, this command has a secondary affect also, resetting the audit log digest. As the reset requires TPM Owner authentication, there must be some way in this command to reflect the TPM Owner wishes. By requiring that a TPM Identity key be the only key that can sign and reset, the TPM Owner’s authentication is implicit in the execution of the command (TPM Identity Keys are created and controlled by the TPM Owner only). Hence, while one might want to remove an ordinal this is not one that can be removed if auditing is functional.
_IN_PARAM TPM_TAG tag TPM_TAG_RQU_AUTH1_COMMAND
_IN_PARAM UINT32 paramSize Total number of input bytes including paramSize and tag
_IN_PARAM TPM_COMMAND_CODE ordinal Command ordinal: TPM_ORD_GetAuditDigestSigned
_IN_PARAM TPM_KEY_HANDLE keyHandle The handle of a loaded key that can perform digital signatures.
_IN_PARAM BOOL closeAudit Indication if audit session should be closed
_IN_PARAM TPM_NONCE antiReplay A nonce to prevent replay attacks
_IN_PARAM TPM_AUTHHANDLE authHandle The authorization session handle used for key authentication.
_IN_PARAM TPM_NONCE authLastNonceEven Even nonce previously generated by TPM to cover inputs
_IN_PARAM TPM_NONCE nonceOdd Nonce generated by system associated with authHandle
_IN_PARAM BOOL continueAuthSession The continue use flag for the authorization session handle
_IN_PARAM TPM_AUTHDATA keyAuth Authorization. HMAC key: key.usageAuth.
_OUT_PARAM TPM_TAG tag TPM_TAG_RSP_AUTH1_COMMAND
_OUT_PARAM UINT32 paramSize Total number of output bytes including paramSize and tag
_OUT_PARAM TPM_RESULT returnCode The return code of the operation.
_OUT_PARAM TPM_COUNTER_VALUE counterValue The value of the audit monotonic counter
_OUT_PARAM TPM_DIGEST auditDigest Log of all audited events
_OUT_PARAM TPM_DIGEST ordinalDigest Digest of all audited ordinals
_OUT_PARAM UINT32 sigSize The size of the sig parameter
_OUT_PARAM BYTE[] sig The signature of the area
_OUT_PARAM TPM_NONCE nonceEven Even nonce newly generated by TPM to cover outputs
_OUT_PARAM BOOL continueAuthSession Continue use flag, TRUE if handle is still active
_OUT_PARAM TPM_AUTHDATA resAuth Authorization HMAC key: key.usageAuth.

_TPM_COMMAND TPM_SetOrdinalAuditStatus
_COMMENT Set the audit flag for a given ordinal. Requires the authentication of the TPM Owner.
_IN_PARAM TPM_TAG tag TPM_TAG_RQU_AUTH1_COMMAND
_IN_PARAM UINT32 paramSize Total number of input bytes including paramSize and tag
_IN_PARAM TPM_COMMAND_CODE ordinal Command ordinal: TPM_ORD_SetOrdinalAuditStatus
_IN_PARAM TPM_COMMAND_CODE ordinalToAudit The ordinal whose audit flag is to be set
_IN_PARAM BOOL auditState Value for audit flag
_IN_PARAM TPM_AUTHHANDLE authHandle The authorization session handle used for owner authentication.
_IN_PARAM TPM_NONCE authLastNonceEven Even nonce previously generated by TPM to cover inputs
_IN_PARAM TPM_NONCE nonceOdd Nonce generated by system associated with authHandle
_IN_PARAM BOOL continueAuthSession The continue use flag for the authorization session handle
_IN_PARAM TPM_AUTHDATA ownerAuth HMAC key: ownerAuth.
_OUT_PARAM TPM_TAG tag TPM_TAG_RSP_AUTH1_COMMAND
_OUT_PARAM UINT32 paramSize Total number of output bytes including paramSize and tag
_OUT_PARAM TPM_RESULT returnCode The return code of the operation.
_OUT_PARAM TPM_NONCE nonceEven Even nonce newly generated by TPM to cover outputs
_OUT_PARAM BOOL continueAuthSession Continue use flag, TRUE if handle is still active
_OUT_PARAM TPM_AUTHDATA resAuth The authorization session digest for the returned parameters. HMAC key: ownerAuth.

_TPM_COMMAND TPM_FieldUpgrade
_COMMENT The TPM needs a mechanism to allow for updating the protected capabilities once a TPM is in the field. Given the varied nature of TPM implementations there will be numerous methods of performing an upgrade of the protected capabilities. This command, when implemented, provides a manufacturer specific method of performing the upgrade. The manufacturer can determine, within the listed requirements, how to implement this command. The command may be more than one command and actually a series of commands. The IDL definition is to create an ordinal for the command. However, the remaining parameters are manufacturer specific. The policy to determine when it is necessary to perform the actions of TPM_RevokeTrust is outside the TPM spec and determined by other TCG workgroups. TPM_FieldUpgrade is gated by either owner authorization or deferred assertion of Physical Presence (via the TPM_STCLEAR_DATA -> deferredPhysicalPresence -> unownedFieldUpgrade flag). This gating is acknowledgement that the entity that sets the security policy for a platform must approve field upgrade for that platform. This gating can block a global attack on TPMs when the TPME’s privilege information (private key) has been compromised. For blocking to be effective in an unowned TPM, the TPM’s ownership flag must be FALSE. (This prevents software from taking ownership and executing TPM_FieldUpgrade with owner authorization.) If an owner is present, field upgrade MUST be owner authorized, as the actions indicate. This prevents an attacker from using physical presence to upgrade a TPM without detection by the owner. The advantages of deferred assertion of Physical Presence are that it: • permits a TPM to be upgraded if taking ownership is undesirable or impractical. • permits a TPM to be upgraded in the OS environment (where Physical Presence typically cannot be asserted), when the TPM has no owner. If it is acceptable to take ownership of a TPM temporarily, an alternative to deferred assertion of Physical Presence is the process: (1) take ownership; (2) perform an owner authorized field upgrade; (3) clear the owner from the TPM. There is no requirement for patch confidentiality. Confidentiality may be implemented using a manufacturer specific mechanism, and may use a global secret such as a symmetric encryption key. The TPM may set the volatile deactivated flag to TRUE if a reboot is required after the field upgrade. There is no requirement to do so. The TPM must check owner authorization before changing the TPM state or beginning the upgrade. This prevents a non-owner from mounting a denial-of-service attack. It is understood that a TPM may not be able to stage the entire upgrade patch inside the TPM before checking owner authorization. That TPM may be forced to move the patch outside the owner authorization HMAC. Ideally, if the upgrade fails (e.g., due to an authentication failure) the TPM firmware should remain unchanged. It is understood that a TPM may not be able to stage the entire upgrade patch inside the TPM for authentication before beginning the upgrade. On a failure, that TPM may be forced to roll the firmware back to a ROMed version. It may go into an upgrade failure state, where it requires a successful field upgrade before continuing. If a field upgrade adds or deletes features, the security implications must be analyzed. The associated state must be set to prevent attacks. See, for example, allowMaintenance in Part . In addition, if a field upgrade adds maintenance commands, it must atomically install the manufacturer’s maintenance public key.

_TPM_COMMAND TPM_SetRedirection
_COMMENT The redirection command attaches a key to a redirection receiver. When making the connection to a GPIO channel the authorization restrictions are set at connection time and not for each invocation that uses the channel.
_IN_PARAM TPM_TAG tag TPM_TAG_RQU_AUTH1_COMMAND
_IN_PARAM UINT32 paramSize Total number of input bytes including paramSize and tag
_IN_PARAM TPM_COMMAND_CODE ordinal Command ordinal: TPM_ORD_SetRedirection
_IN_PARAM TPM_KEY_HANDLE keyHandle The keyHandle identifier of a loaded key that can implement redirection.
_IN_PARAM TPM_COMMAND_CODE redirCmd The command to execute
_IN_PARAM UINT32 inputDataSize The size of the input data
_IN_PARAM BYTE inputData Manufacturer parameter
_IN_PARAM TPM_AUTHHANDLE authHandle The authorization session handle used for keyHandle authorization
_IN_PARAM TPM_NONCE authLastNonceEven Even nonce previously generated by TPM to cover inputs
_IN_PARAM TPM_NONCE nonceOdd Nonce generated by system associated with authHandle
_IN_PARAM BOOL continueAuthSession The continue use flag for the authorization session handle
_IN_PARAM TPM_AUTHDATA ownerAuth HMAC key ownerAuth
_OUT_PARAM TPM_TAG tag TPM_TAG_RSP_AUTH1_COMMAND
_OUT_PARAM UINT32 paramSize Total number of output bytes including paramSize and tag
_OUT_PARAM TPM_RESULT returnCode The return code of the operation.
_OUT_PARAM TPM_NONCE nonceEven Even nonce newly generated by TPM to cover outputs
_OUT_PARAM BOOL continueAuthSession Continue use flag, TRUE if handle is still active
_OUT_PARAM TPM_AUTHDATA resAuth The authorization session digest for the returned parameters. HMAC key: key.usageAuth

_TPM_COMMAND TPM_ResetLockValue
_COMMENT Command that resets the TPM dictionary attack mitigation values This allows the TPM owner to cancel the effect of a number of successive authorization failures. Dictionary attack mitigation is vendor specific, and the actions here are one possible implementation. The TPM may treat an authorization failure outside the mitigation time as a normal failure and not disable the command. If this command itself has an authorization failure, it is blocked for the remainder of the lock out period. This prevents a dictionary attack on the owner authorization using this command. It is understood that this command allows the TPM owner to perform a dictionary attack on other authorization values by alternating a trial and this command. Similarly, delegating this command allows the owner’s delegate to perform a dictionary attack.
_IN_PARAM TPM_TAG tag TPM_TAG_RQU_AUTH1_COMMAND
_IN_PARAM UINT32 paramSize Total number of input bytes including paramSize and tag
_IN_PARAM TPM_COMMAND_CODE ordinal Command ordinal: TPM_ORD_ResetLockValue
_IN_PARAM TPM_AUTHHANDLE authHandle The authorization session handle used for TPM Owner authorization
_IN_PARAM TPM_NONCE authLastNonceEven Even nonce previously generated by TPM to cover inputs
_IN_PARAM TPM_NONCE nonceOdd Nonce generated by system associated with authHandle
_IN_PARAM BOOL continueAuthSession The continue use flag for the authorization session handle
_IN_PARAM TPM_AUTHDATA ownerAuth HMAC key TPM Owner auth
_OUT_PARAM TPM_TAG tag TPM_TAG_RSP_AUTH1_COMMAND
_OUT_PARAM UINT32 paramSize Total number of output bytes including paramSize and tag
_OUT_PARAM TPM_RESULT returnCode The return code of the operation.
_OUT_PARAM TPM_NONCE nonceEven Even nonce newly generated by TPM to cover outputs
_OUT_PARAM BOOL continueAuthSession Continue use flag, TRUE if handle is still active
_OUT_PARAM TPM_AUTHDATA resAuth HMAC key: TPM Owner auth

_TPM_COMMAND TPM_Seal
_COMMENT The SEAL operation allows software to explicitly state the future “trusted” configuration that the platform must be in for the secret to be revealed. The SEAL operation also implicitly includes the relevant platform configuration (PCR-values) when the SEAL operation was performed. The SEAL operation uses the tpmProof value to BIND the blob to an individual TPM. If the UNSEAL operation succeeds, proof of the platform configuration that was in effect when the SEAL operation was performed is returned to the caller, as well as the secret data. This proof may, or may not, be of interest. If the SEALed secret is used to authenticate the platform to a third party, a caller is normally unconcerned about the state of the platform when the secret was SEALed, and the proof may be of no interest. On the other hand, if the SEALed secret is used to authenticate a third party to the platform, a caller is normally concerned about the state of the platform when the secret was SEALed. Then the proof is of interest. For example, if SEAL is used to store a secret key for a future configuration (probably to prove that the platform is a particular platform that is in a particular configuration), the only requirement is that that key can be used only when the platform is in that future configuration. Then there is no interest in the platform configuration when the secret key was SEALed. An example of this case is when SEAL is used to store a network authentication key. On the other hand, suppose an OS contains an encrypted database of users allowed to log on to the platform. The OS uses a SEALED blob to store the encryption key for the user1316database. However, the nature of SEAL is that any SW stack can SEAL a blob for any other software stack. Hence, the OS can be attacked by a second OS replacing both the SEALED1318blob encryption key, and the user database itself, allowing untrusted parties access to the services of the OS. To thwart such attacks, SEALED blobs include the past SW configuration. Hence, if the OS is concerned about such attacks, it may check to see whether the past configuration is one that is known to be trusted. TPM_Seal requires the encryption of one parameter (“Secret”). For the sake of uniformity with other commands that require the encryption of more than one parameter, the string used for XOR encryption is generated by concatenating a nonce (created during the OSAP session) with the session shared secret and then hashing the result. The sealed data blob does not have a protected identifier. On a platform that does not prevent unauthorized access to data, a data blob can be exchanged by a lower layer without detection. The upper layer software must take additional measures to protect the relation between its identifier of the data blob and the blob itself.
_IN_PARAM TPM_TAG tag TPM_TAG_RQU_AUTH1_COMMAND
_IN_PARAM UINT32 paramSize Total number of input bytes including paramSize and tag
_IN_PARAM TPM_COMMAND_CODE ordinal Command ordinal: TPM_ORD_Seal.
_IN_PARAM TPM_KEY_HANDLE keyHandle Handle of a loaded key that can perform seal operations.
_IN_PARAM TPM_ENCAUTH encAuth The encrypted AuthData for the sealed data.
_IN_PARAM UINT32 pcrInfoSize The size of the pcrInfo parameter. If 0 there are no PCR registers in use
_IN_PARAM TPM_PCR_INFO pcrInfo The PCR selection information. The caller MAY use TPM_PCR_INFO_LONG.
_IN_PARAM UINT32 inDataSize The size of the inData parameter
_IN_PARAM BYTE[] inData The data to be sealed to the platform and any specified PCRs
_IN_PARAM TPM_AUTHHANDLE authHandle The authorization session handle used for keyHandle authorization. Must be an OSAP session for this command.
_IN_PARAM TPM_NONCE authLastNonceEven Even nonce previously generated by TPM to cover inputs
_IN_PARAM TPM_NONCE nonceOdd Nonce generated by system associated with authHandle
_IN_PARAM BOOL continueAuthSession Ignored
_IN_PARAM TPM_AUTHDATA pubAuth The authorization session digest for inputs and keyHandle. HMAC key: key.usageAuth.
_OUT_PARAM TPM_TAG tag TPM_TAG_RSP_AUTH1_COMMAND
_OUT_PARAM UINT32 paramSize Total number of output bytes including paramSize and tag
_OUT_PARAM TPM_RESULT returnCode The return code of the operation.
_OUT_PARAM TPM_STORED_DATA sealedData Encrypted, integrity-protected data object that is the result of the TPM_Seal operation.
_OUT_PARAM TPM_NONCE nonceEven Even nonce newly generated by TPM to cover outputs
_OUT_PARAM BOOL continueAuthSession Continue use flag, fixed value of FALSE
_OUT_PARAM TPM_AUTHDATA resAuth The authorization session digest for the returned parameters. HMAC key: key.usageAuth.

_TPM_COMMAND TPM_Unseal
_COMMENT The TPM_Unseal operation will reveal TPM_Seal’ed data only if it was encrypted on this platform and the current configuration (as defined by the named PCR contents) is the one named as qualified to decrypt it. Internally, TPM_Unseal accepts a data blob generated by a TPM_Seal operation. TPM_Unseal decrypts the structure internally, checks the integrity of the resulting data, and checks that the PCR named has the value named during TPM_Seal. Additionally, the caller must supply appropriate AuthData for blob and for the key that was used to seal that data. If the integrity, platform configuration and authorization checks succeed, the sealed data is returned to the caller; otherwise, an error is generated.
_IN_PARAM TPM_TAG tag TPM_TAG_RQU_AUTH2_COMMAND
_IN_PARAM UINT32 paramSize Total number of input bytes including paramSize and tag
_IN_PARAM TPM_COMMAND_CODE ordinal Command ordinal: TPM_ORD_Unseal.
_IN_PARAM TPM_KEY_HANDLE parentHandle Handle of a loaded key that can unseal the data.
_IN_PARAM TPM_STORED_DATA inData The encrypted data generated by TPM_Seal.
_IN_PARAM TPM_AUTHHANDLE authHandle The authorization session handle used for parentHandle.
_IN_PARAM TPM_NONCE authLastNonceEven Even nonce previously generated by TPM to cover inputs
_IN_PARAM TPM_NONCE nonceOdd Nonce generated by system associated with authHandle
_IN_PARAM BOOL continueAuthSession The continue use flag for the authorization session handle
_IN_PARAM TPM_AUTHDATA parentAuth The authorization session digest for inputs and parentHandle. HMAC key: parentKey.usageAuth.
_IN_PARAM TPM_AUTHHANDLE dataAuthHandle The authorization session handle used to authorize inData.
_IN_PARAM TPM_NONCE dataLastNonceEven Even nonce previously generated by TPM
_IN_PARAM TPM_NONCE datanonceOdd Nonce generated by system associated with entityAuthHandle
_IN_PARAM BOOL continueDataSession Continue usage flag for dataAuthHandle.
_IN_PARAM TPM_AUTHDATA dataAuth The authorization session digest for the encrypted entity. HMAC key: entity.usageAuth.
_OUT_PARAM TPM_TAG tag TPM_TAG_RSP_AUTH2_COMMAND
_OUT_PARAM UINT32 paramSize Total number of output bytes including paramSize and tag
_OUT_PARAM TPM_RESULT returnCode The return code of the operation.
_OUT_PARAM UINT32 secretSize The used size of the output area for secret
_OUT_PARAM BYTE[] secret Decrypted data that had been sealed
_OUT_PARAM TPM_NONCE nonceEven Even nonce newly generated by TPM to cover outputs
_OUT_PARAM BOOL continueAuthSession Continue use flag, TRUE if handle is still active
_OUT_PARAM TPM_AUTHDATA resAuth The authorization session digest for the returned parameters. HMAC key: parentKey.usageAuth.
_OUT_PARAM TPM_NONCE dataNonceEven Even nonce newly generated by TPM.
_OUT_PARAM BOOL continueDataSession Continue use flag, TRUE if handle is still active
_OUT_PARAM TPM_AUTHDATA dataAuth The authorization session digest used for the dataAuth session. HMAC key: entity.usageAuth.

_TPM_COMMAND TPM_UnBind
_COMMENT TPM_UnBind takes the data blob that is the result of a Tspi_Data_Bind command and decrypts it for export to the User. The caller must authorize the use of the key that will decrypt the incoming blob. TPM_UnBind operates on a block-by-block basis, and has no notion of any relation between one block and another.
_IN_PARAM TPM_TAG tag TPM_TAG_RQU_AUTH1_COMMAND
_IN_PARAM UINT32 paramSize Total number of input bytes including paramSize and tag
_IN_PARAM TPM_COMMAND_CODE ordinal Command ordinal: TPM_ORD_UnBind.
_IN_PARAM TPM_KEY_HANDLE keyHandle The keyHandle identifier of a loaded key that can perform UnBind operations.
_IN_PARAM UINT32 inDataSize The size of the input blob
_IN_PARAM BYTE[] inData Encrypted blob to be decrypted
_IN_PARAM TPM_AUTHHANDLE authHandle The handle used for keyHandle authorization
_IN_PARAM TPM_NONCE authLastNonceEven Even nonce previously generated by TPM to cover inputs
_IN_PARAM TPM_NONCE nonceOdd Nonce generated by system associated with authHandle
_IN_PARAM BOOL continueAuthSession The continue use flag for the authorization session handle
_IN_PARAM TPM_AUTHDATA privAuth The authorization session digest that authorizes the inputs and use of keyHandle. HMAC key: key.usageAuth.
_OUT_PARAM TPM_TAG tag TPM_TAG_RSP_AUTH1_COMMAND
_OUT_PARAM UINT32 paramSize Total number of output bytes including paramSize and tag
_OUT_PARAM TPM_RESULT returnCode The return code of the operation.
_OUT_PARAM UINT32 outDataSize The length of the returned decrypted data
_OUT_PARAM BYTE[] outData The resulting decrypted data.
_OUT_PARAM TPM_NONCE nonceEven Even nonce newly generated by TPM to cover outputs
_OUT_PARAM BOOL continueAuthSession Continue use flag, TRUE if handle is still active
_OUT_PARAM TPM_AUTHDATA resAuth The authorization session digest for the returned parameters. HMAC key: key.usageAuth.

_TPM_COMMAND TPM_CreateWrapKey
_COMMENT The TPM_CreateWrapKey command both generates and creates a secure storage bundle for asymmetric keys. The newly created key can be locked to a specific PCR value by specifying a set of PCR registers. The key blob does not have a protected identifier. On a platform that does not prevent unauthorized access to data, a key blob can be exchanged by a lower layer without detection. The upper layer software must take additional measures to protect the relation between its identifier of the key blob and the blob itself.
_IN_PARAM TPM_TAG tag TPM_TAG_RQU_AUTH1_COMMAND
_IN_PARAM UINT32 paramSize Total number of input bytes including paramSize and tag
_IN_PARAM TPM_COMMAND_CODE ordinal Command ordinal: TPM_ORD_CreateWrapKey
_IN_PARAM TPM_KEY_HANDLE parentHandle Handle of a loaded key that can perform key wrapping.
_IN_PARAM TPM_ENCAUTH dataUsageAuth Encrypted usage AuthData for the key.
_IN_PARAM TPM_ENCAUTH dataMigrationAuth Encrypted migration AuthData for the key.
_IN_PARAM TPM_KEY keyInfo Information about key to be created, pubkey.keyLength and keyInfo.encData elements are 0. MAY be TPM_KEY12
_IN_PARAM TPM_AUTHHANDLE authHandle parent key authorization. Must be an OSAP session.
_IN_PARAM TPM_NONCE authLastNonceEven Even nonce previously generated by TPM to cover inputs
_IN_PARAM TPM_NONCE nonceOdd Nonce generated by system associated with authHandle
_IN_PARAM BOOL continueAuthSession Ignored
_IN_PARAM TPM_AUTHDATA pubAuth Authorization HMAC key: parentKey.usageAuth.
_OUT_PARAM TPM_TAG tag TPM_TAG_RSP_AUTH1_COMMAND
_OUT_PARAM UINT32 paramSize Total number of output bytes including paramSize and tag
_OUT_PARAM TPM_RESULT returnCode The return code of the operation.
_OUT_PARAM TPM_KEY wrappedKey The TPM_KEY structure which includes the public and encrypted private key. MAY be TPM_KEY12
_OUT_PARAM TPM_NONCE nonceEven Even nonce newly generated by TPM to cover outputs
_OUT_PARAM BOOL continueAuthSession Continue use flag, fixed at FALSE
_OUT_PARAM TPM_AUTHDATA resAuth Authorization HMAC key: parentKey.usageAuth.

_TPM_COMMAND TPM_LoadKey2
_COMMENT Before the TPM can use a key to either wrap, unwrap, unbind, seal, unseal, sign or perform any other action, it needs to be present in the TPM. The TPM_LoadKey2 function loads the key into the TPM for further use. The TPM assigns the key handle. The TPM always locates a loaded key by use of the handle. The assumption is that the handle may change due to key management operations. It is the responsibility of upper level software to maintain the mapping between handle and any label used by external software. To permit this mapping between handle and upper software labels (called key handle virtualization), the key handle returned by TPM_LoadKey2 must not be included in the response HMAC. This may cause problems if several keys are authorized using the same authorization data. Care should be taken to assign different authorization data to each key. This command has the responsibility of enforcing restrictions on the use of keys. For example, when attempting to load a STORAGE key it will be checked for the restrictions on a storage key (2048 size etc.). The load command must maintain a record of whether any previous key in the key hierarchy was bound to a PCR using parentPCRStatus. The flag parentPCRStatus enables the possibility of checking that a platform passed through some particular state or states before finishing in the current state. A grandparent key could be linked to state-1, a parent key could linked to state-2, and a child key could be linked to state-3, for example. The use of the child key then indicates that the platform passed through states 1 and 2 and is currently in state 3, in this example. TPM_Startup with stType == TPM_ST_CLEAR indicates that the platform has been reset, so the platform has not passed through the previous states. Hence keys with parentPCRStatus==TRUE must be unloaded if TPM_Startup is issued with stType == TPM_ST_CLEAR. If a TPM_KEY structure has been decrypted AND the integrity test using "pubDataDigest" has passed AND the key is non-migratory, the key must have been created by the TPM. So there is every reason to believe that the key poses no security threat to the TPM. While there is no known attack from a rogue migratory key, there is a desire to verify that a loaded migratory key is a real key, arising from a general sense of unease about execution of arbitrary data as a key. Ideally a consistency check would consist of an encrypt/decrypt cycle, but this may be expensive. For RSA keys, it is therefore suggested that the consistency test consists of dividing the supposed RSA product by the supposed RSA prime, and checking that there is no remainder.
_IN_PARAM TPM_TAG tag TPM_TAG_RQU_AUTH1_COMMAND
_IN_PARAM UINT32 paramSize Total number of input bytes including paramSize and tag
_IN_PARAM TPM_COMMAND_CODE ordinal Command ordinal: TPM_ORD_LoadKey2.
_IN_PARAM TPM_KEY_HANDLE parentHandle TPM handle of parent key.
_IN_PARAM TPM_KEY inKey Incoming key structure, both encrypted private and clear public portions. MAY be TPM_KEY12
_IN_PARAM TPM_AUTHHANDLE authHandle The authorization session handle used for parentHandle authorization.
_IN_PARAM TPM_NONCE authLastNonceEven Even nonce previously generated by TPM to cover inputs
_IN_PARAM TPM_NONCE nonceOdd Nonce generated by system associated with authHandle
_IN_PARAM BOOL continueAuthSession The continue use flag for the authorization session handle
_IN_PARAM TPM_AUTHDATA parentAuth The authorization session digest for inputs and parentHandle. HMAC key: parentKey.usageAuth.
_OUT_PARAM TPM_TAG tag TPM_TAG_RSP_AUTH1_COMMAND
_OUT_PARAM UINT32 paramSize Total number of output bytes including paramSize and tag
_OUT_PARAM TPM_RESULT returnCode The return code of the operation.
_OUT_PARAM TPM_KEY_HANDLE inkeyHandle Internal TPM handle where decrypted key was loaded.
_OUT_PARAM TPM_NONCE nonceEven Even nonce newly generated by TPM to cover outputs
_OUT_PARAM BOOL continueAuthSession Continue use flag, TRUE if handle is still active
_OUT_PARAM TPM_AUTHDATA resAuth The authorization session digest for the returned parameters. HMAC key: parentKey.usageAuth.

_TPM_COMMAND TPM_GetPubKey
_COMMENT The owner of a key may wish to obtain the public key value from a loaded key. This information may have privacy concerns so the command must have authorization from the key owner.
_IN_PARAM TPM_TAG tag TPM_TAG_RQU_AUTH1_COMMAND
_IN_PARAM UINT32 paramSize Total number of input bytes including paramSize and tag
_IN_PARAM TPM_COMMAND_CODE ordinal Command ordinal: TPM_ORD_GetPubKey.
_IN_PARAM TPM_KEY_HANDLE keyHandle TPM handle of key.
_IN_PARAM TPM_AUTHHANDLE authHandle The authorization session handle used for keyHandle authorization.
_IN_PARAM TPM_NONCE authLastNonceEven Even nonce previously generated by TPM to cover inputs
_IN_PARAM TPM_NONCE nonceOdd Nonce generated by system associated with authHandle
_IN_PARAM BOOL continueAuthSession The continue use flag for the authorization session handle
_IN_PARAM TPM_AUTHDATA keyAuth Authorization HMAC key: key.usageAuth.
_OUT_PARAM TPM_TAG tag TPM_TAG_RSP_AUTH1_COMMAND
_OUT_PARAM UINT32 paramSize Total number of output bytes including paramSize and tag
_OUT_PARAM TPM_RESULT returnCode The return code of the operation.
_OUT_PARAM TPM_PUBKEY pubKey Public portion of key in keyHandle.
_OUT_PARAM TPM_NONCE nonceEven Even nonce newly generated by TPM to cover outputs
_OUT_PARAM BOOL continueAuthSession Continue use flag, TRUE if handle is still active
_OUT_PARAM TPM_AUTHDATA resAuth Authorization. HMAC key: key.usageAuth.

_TPM_COMMAND TPM_Sealx
_COMMENT The TPM_Sealx command works exactly like the TPM_Seal command with the additional requirement of encryption for the inData parameter. This command also places in the sealed blob the information that the TPM_Unseal also requires encryption. TPM_Sealx requires the use of 1.2 data structures. The actions are the same as TPM_Seal without the checks for 1.1 data structure usage. The method of incrementing the symmetric key counter value is different from that used by some standard crypto libraries (e.g. openSSL, Java JCE) that increment the entire counter value. TPM users should be aware of this to avoid errors when the counter wraps.
_IN_PARAM TPM_TAG tag TPM_TAG_RQU_AUTH1_COMMAND
_IN_PARAM UINT32 paramSize Total number of input bytes including paramSize and tag
_IN_PARAM TPM_COMMAND_CODE ordinal Command ordinal: TPM_ORD_Sealx
_IN_PARAM TPM_KEY_HANDLE keyHandle Handle of a loaded key that can perform seal operations.
_IN_PARAM TPM_ENCAUTH encAuth The encrypted AuthData for the sealed data.
_IN_PARAM UINT32 pcrInfoSize The size of the pcrInfo parameter. If 0 there are no PCR registers in use
_IN_PARAM TPM_PCR_INFO pcrInfo MUST use TPM_PCR_INFO_LONG.
_IN_PARAM UINT32 inDataSize The size of the inData parameter
_IN_PARAM BYTE[] inData The data to be sealed to the platform and any specified PCRs
_IN_PARAM TPM_AUTHHANDLE authHandle The authorization session handle used for keyHandle authorization. Must be an OSAP session for this command.
_IN_PARAM TPM_NONCE authLastNonceEven Even nonce previously generated by TPM to cover inputs
_IN_PARAM TPM_NONCE nonceOdd Nonce generated by system associated with authHandle
_IN_PARAM BOOL continueAuthSession Ignored
_IN_PARAM TPM_AUTHDATA pubAuth The authorization session digest for inputs and keyHandle. HMAC key: key.usageAuth.
_OUT_PARAM TPM_TAG tag TPM_TAG_RSP_AUTH1_COMMAND
_OUT_PARAM UINT32 paramSize Total number of output bytes including paramSize and tag
_OUT_PARAM TPM_RESULT returnCode The return code of the operation.
_OUT_PARAM TPM_STORED_DATA sealedData Encrypted, integrity-protected data object that is the result of the TPM_Sealx operation.
_OUT_PARAM TPM_NONCE nonceEven Even nonce newly generated by TPM to cover outputs
_OUT_PARAM BOOL continueAuthSession Continue use flag, fixed value of FALSE
_OUT_PARAM TPM_AUTHDATA resAuth The authorization session digest for the returned parameters. HMAC key: key.usageAuth.
_COMMENT The migration of a key from one TPM to another is a vital aspect to many use models of the TPM. The migration commands are the commands that allow this operation to occur. There are two types of migratable keys, the version 1.1 migratable keys and the version 1.2 certifiable migratable keys.

_TPM_COMMAND TPM_CreateMigrationBlob
_COMMENT The TPM_CreateMigrationBlob command implements the first step in the process of moving a migratable key to a new parent or platform. Execution of this command requires knowledge of the migrationAuth field of the key to be migrated. Migrate mode is generally used to migrate keys from one TPM to another for backup, upgrade or to clone a key on another platform. To do this, the TPM needs to create a data blob that another TPM can deal with. This is done by loading in a backup public key that will be used by the TPM to create a new data blob for a migratable key. The TPM Owner does the selection and authorization of migration public keys at any time prior to the execution of TPM_CreateMigrationBlob by performing the TPM_AuthorizeMigrationKey command. IReWrap mode is used directly to move the key to a new parent (on either this platform or another). The TPM simply re-encrypts the key using a new parent, and outputs a normal encrypted element that can be subsequently used by a TPM_LoadKey command. TPM_CreateMigrationBlob implicitly cannot be used to migrate a non-migratory key. No explicit check is required. Only the TPM knows tpmProof. Therefore, it is impossible for the caller to submit an AuthData value equal to tpmProof and migrate a non-migratory key.
_IN_PARAM TPM_TAG tag TPM_TAG_RQU_AUTH2_COMMAND
_IN_PARAM UINT32 paramSize Total number of input bytes including paramSize and tag
_IN_PARAM TPM_COMMAND_CODE ordinal Command ordinal: TPM_ORD_CreateMigrationBlob
_IN_PARAM TPM_KEY_HANDLE parentHandle Handle of the parent key that can decrypt encData.
_IN_PARAM TPM_MIGRATE_SCHEME migrationType The migration type, either MIGRATE or REWRAP
_IN_PARAM TPM_MIGRATIONKEYAUTH migrationKeyAuth Migration public key and its authorization session digest.
_IN_PARAM UINT32 encDataSize The size of the encData parameter
_IN_PARAM BYTE[] encData The encrypted entity that is to be modified.
_IN_PARAM TPM_AUTHHANDLE parentAuthHandle The authorization session handle used for the parent key.
_IN_PARAM TPM_NONCE authLastNonceEven Even nonce previously generated by TPM to cover inputs
_IN_PARAM TPM_NONCE nonceOdd Nonce generated by system associated with parentAuthHandle
_IN_PARAM BOOL continueAuthSession Continue use flag for parent session
_IN_PARAM TPM_AUTHDATA parentAuth Authorization HMAC key: parentKey.usageAuth.
_IN_PARAM TPM_AUTHHANDLE entityAuthHandle The authorization session handle used for the encrypted entity.
_IN_PARAM TPM_NONCE entitylastNonceEven Even nonce previously generated by TPM
_IN_PARAM TPM_NONCE entitynonceOdd Nonce generated by system associated with entityAuthHandle
_IN_PARAM BOOL continueEntitySession Continue use flag for entity session
_IN_PARAM TPM_AUTHDATA entityAuth Authorization HMAC key: entity.migrationAuth.
_OUT_PARAM TPM_TAG tag TPM_TAG_RSP_AUTH2_COMMAND
_OUT_PARAM UINT32 paramSize Total number of output bytes including paramSize and tag
_OUT_PARAM TPM_RESULT returnCode The return code of the operation.
_OUT_PARAM UINT32 randomSize The used size of the output area for random
_OUT_PARAM BYTE[] random String used for xor encryption
_OUT_PARAM UINT32 outDataSize The used size of the output area for outData
_OUT_PARAM BYTE[] outData The modified, encrypted entity.
_OUT_PARAM TPM_NONCE nonceEven Even nonce newly generated by TPM to cover outputs
_OUT_PARAM BOOL continueAuthSession Continue use flag for parent key session
_OUT_PARAM TPM_AUTHDATA resAuth Authorization. HMAC key: parentKey.usageAuth.
_OUT_PARAM TPM_NONCE entityNonceEven Even nonce newly generated by TPM to cover entity
_OUT_PARAM BOOL continueEntitySession Continue use flag for entity session
_OUT_PARAM TPM_AUTHDATA entityAuth Authorization HMAC key: entity.migrationAuth.

_TPM_COMMAND TPM_ConvertMigrationBlob
_COMMENT This command takes a migration blob and creates a normal wrapped blob. The migrated blob must be loaded into the TPM using the normal TPM_LoadKey function. Note that the command migrates private keys, only. The migration of the associated public keys is not specified by TPM because they are not security sensitive. Migration of the associated public keys may be specified in a platform specific specification. A TPM_KEY structure must be recreated before the migrated key can be used by the target TPM in a TPM_LoadKey command.
_IN_PARAM TPM_TAG tag TPM_TAG_RQU_AUTH1_COMMAND
_IN_PARAM UINT32 paramSize Total number of input bytes including paramSize and tag
_IN_PARAM TPM_COMMAND_CODE ordinal Command ordinal: TPM_ORD_ConvertMigrationBlob.
_IN_PARAM TPM_KEY_HANDLE parentHandle Handle of a loaded key that can decrypt keys.
_IN_PARAM UINT32 inDataSize Size of inData
_IN_PARAM BYTE [ ] inData The XOR’d and encrypted key
_IN_PARAM UINT32 randomSize Size of random
_IN_PARAM BYTE [ ] random Random value used to hide key data.
_IN_PARAM TPM_AUTHHANDLE authHandle The authorization session handle used for keyHandle.
_IN_PARAM TPM_NONCE authLastNonceEven Even nonce previously generated by TPM to cover inputs
_IN_PARAM TPM_NONCE nonceOdd Nonce generated by system associated with authHandle
_IN_PARAM BOOL continueAuthSession The continue use flag for the authorization session handle
_IN_PARAM TPM_AUTHDATA parentAuth The authorization session digest that authorizes the inputs and the migration of the key in parentHandle. HMAC key: parentKey.usageAuth
_OUT_PARAM TPM_TAG tag TPM_TAG_RSP_AUTH1_COMMAND
_OUT_PARAM UINT32 paramSize Total number of output bytes including paramSize and tag
_OUT_PARAM TPM_RESULT returnCode The return code of the operation.
_OUT_PARAM UINT32 outDataSize The used size of the output area for outData
_OUT_PARAM BYTE[] outData The encrypted private key that can be loaded with TPM_LoadKey
_OUT_PARAM TPM_NONCE nonceEven Even nonce newly generated by TPM to cover outputs
_OUT_PARAM BOOL continueAuthSession Continue use flag, TRUE if handle is still active
_OUT_PARAM TPM_AUTHDATA resAuth The authorization session digest for the returned parameters. HMAC key: parentKey.usageAuth

_TPM_COMMAND TPM_AuthorizeMigrationKey
_COMMENT This command creates an authorization blob, to allow the TPM owner to specify which migration facility they will use and allow users to migrate information without further involvement with the TPM owner. It is the responsibility of the TPM Owner to determine whether migrationKey is appropriate for migration. The TPM checks just the cryptographic strength of migrationKey.
_IN_PARAM TPM_TAG tag TPM_TAG_RQU_AUTH1_COMMAND
_IN_PARAM UINT32 paramSize Total number of input bytes including paramSize and tag
_IN_PARAM TPM_COMMAND_CODE ordinal Command ordinal: TPM_ORD_AuthorizeMigrationKey
_IN_PARAM TPM_MIGRATE_SCHEME migrationScheme Type of migration operation that is to be permitted for this key.
_IN_PARAM TPM_PUBKEY migrationKey The public key to be authorized.
_IN_PARAM TPM_AUTHHANDLE authHandle The authorization session handle used for owner authentication.
_IN_PARAM TPM_NONCE authLastNonceEven Even nonce previously generated by TPM to cover inputs
_IN_PARAM TPM_NONCE nonceOdd Nonce generated by system associated with authHandle
_IN_PARAM BOOL continueAuthSession The continue use flag for the authorization session handle
_IN_PARAM TPM_AUTHDATA ownerAuth The authorization session digest for inputs and owner authorization. HMAC key: ownerAuth.
_OUT_PARAM TPM_TAG tag TPM_TAG_RSP_AUTH1_COMMAND
_OUT_PARAM UINT32 paramSize Total number of output bytes including paramSize and tag
_OUT_PARAM TPM_RESULT returnCode The return code of the operation.
_OUT_PARAM TPM_MIGRATIONKEYAUTH outData Returned public key and authorization session digest.
_OUT_PARAM TPM_NONCE nonceEven Even nonce newly generated by TPM to cover outputs
_OUT_PARAM BOOL continueAuthSession Continue use flag, TRUE if handle is still active
_OUT_PARAM TPM_AUTHDATA resAuth The authorization session digest for the returned parameters. HMAC key: ownerAuth.

_TPM_COMMAND TPM_MigrateKey
_COMMENT The TPM_MigrateKey command performs the function of a migration authority. The command is relatively simple; it just decrypts the input packet (coming from TPM_CreateMigrationBlob or TPM_CMK_CreateBlob) and then re-encrypts it with the input public key. The output of this command would then be sent to TPM_ConvertMigrationBlob or TPM_CMK_ConvertMigration on the target TPM. TPM_MigrateKey does not make ANY assumptions about the contents of the encrypted blob. Since it does not have the XOR string, it cannot actually determine much about the key that is being migrated. This command exists to permit the TPM to be a migration authority. If used in this way, it is expected that the physical security of the system containing the TPM and the AuthData value for the MA key would be tightly controlled. To prevent the execution of this command using any other key as a parent key, this command works only if keyUsage for maKeyHandle is TPM_KEY_MIGRATE.
_IN_PARAM TPM_TAG tag TPM_TAG_RQU_AUTH1_COMMAND
_IN_PARAM UINT32 paramSize Total number of input bytes including paramSize and tag
_IN_PARAM TPM_COMMAND_CODE ordinal Command ordinal: TPM_ORD_MigrateKey
_IN_PARAM TPM_KEY_HANDLE maKeyHandle Handle of the key to be used to migrate the key.
_IN_PARAM TPM_PUBKEY pubKey Public key to which the blob is to be migrated
_IN_PARAM UINT32 inDataSize The size of inData
_IN_PARAM BYTE[] inData The input blob
_IN_PARAM TPM_AUTHHANDLE maAuthHandle The authorization session handle used for maKeyHandle.
_IN_PARAM TPM_NONCE authLastNonceEven Even nonce previously generated by TPM to cover inputs
_IN_PARAM TPM_NONCE nonceOdd Nonce generated by system associated with certAuthHandle
_IN_PARAM BOOL continueAuthSession The continue use flag for the authorization session handle
_IN_PARAM TPM_AUTHDATA keyAuth The authorization session digest for the inputs and key to be signed. HMAC key: maKeyHandle.usageAuth.
_OUT_PARAM TPM_TAG tag TPM_TAG_RSP_AUTH1_COMMAND
_OUT_PARAM UINT32 paramSize Total number of output bytes including paramSize and tag Sz Sz
_OUT_PARAM TPM_RESULT returnCode The return code of the operation.
_OUT_PARAM UINT32 outDataSize The used size of the output area for outData
_OUT_PARAM BYTE[] outData The re-encrypted blob
_OUT_PARAM TPM_NONCE nonceEven Even nonce newly generated by TPM
_OUT_PARAM BOOL continueAuthSession Continue use flag for cert key session
_OUT_PARAM TPM_AUTHDATA keyAuth The authorization session digest for the target key. HMAC key: maKeyHandle.usageAuth

_TPM_COMMAND TPM_CMK_SetRestrictions
_COMMENT This command is used by the Owner to dictate the usage of a certified-migration key with delegated authorization (authorization other than actual owner authorization). This command is provided for privacy reasons and must not itself be delegated, because a certified-migration-key may involve a contractual relationship between the Owner and an external entity. Since restrictions are validated at DSAP session use, there is no need to invalidate DSAP sessions when the restriction value changes.
_IN_PARAM TPM_TAG tag TPM_TAG_RQU_AUTH1_COMMAND
_IN_PARAM UINT32 paramSize Total number of input bytes incl. paramSize and tag
_IN_PARAM TPM_COMMAND_CODE ordinal Ordinal: TPM_ORD_CMK_SetRestrictions
_IN_PARAM TPM_CMK_DELEGATE restriction The bit mask of how to set the restrictions on CMK keys
_IN_PARAM TPM_AUTHHANDLE authHandle The authorization session handle TPM Owner authentication
_IN_PARAM TPM_NONCE authLastNonceEven Even nonce previously generated by TPM to cover inputs
_IN_PARAM TPM_NONCE nonceOdd Nonce generated by system associated with authHandle
_IN_PARAM BOOL continueAuthSession The continue use flag for the authorization session handle
_IN_PARAM TPM_AUTHDATA ownerAuth The authorization session digest. HMAC key:ownerAuth
_OUT_PARAM TPM_TAG tag TPM_TAG_RSP_AUTH1_COMMAND
_OUT_PARAM UINT32 paramSize Total number of output bytes
_OUT_PARAM TPM_RESULT returnCode The return code of the operation
_OUT_PARAM TPM_NONCE nonceEven Even nonce newly generated by TPM to cover outputs
_OUT_PARAM BOOL continueAuthSession Continue use flag, TRUE if handle is still active
_OUT_PARAM TPM_AUTHDATA resAuth Authorization HMAC key: ownerAuth.

_TPM_COMMAND TPM_CMK_ApproveMA
_COMMENT This command creates an authorization ticket, to allow the TPM owner to specify which Migration Authorities they approve and allow users to create certified-migration-keys without further involvement with the TPM owner. It is the responsibility of the TPM Owner to determine whether a particular Migration Authority is suitable to control migration
_IN_PARAM TPM_TAG tag TPM_TAG_RQU_AUTH1_COMMAND
_IN_PARAM UINT32 paramSize Total number of input bytes including paramSize and tag
_IN_PARAM TPM_COMMAND_CODE ordinal Command ordinal: TPM_ORD_CMK_ApproveMA
_IN_PARAM TPM_DIGEST migrationAuthorityDigest A digest of a TPM_MSA_COMPOSITE structure (itself one or more digests of public keys belonging to migration authorities)
_IN_PARAM TPM_AUTHHANDLE authHandle The authorization session handle used for owner authentication.
_IN_PARAM TPM_NONCE authLastNonceEven Even nonce previously generated by TPM to cover inputs
_IN_PARAM TPM_NONCE nonceOdd Nonce generated by system associated with authHandle
_IN_PARAM BOOL continueAuthSession The continue use flag for the authorization session handle
_IN_PARAM TPM_AUTHDATA ownerAuth Authorization HMAC, key: ownerAuth.
_OUT_PARAM TPM_TAG tag TPM_TAG_RSP_AUTH1_COMMAND
_OUT_PARAM UINT32 paramSize Total number of output bytes including paramSize and tag
_OUT_PARAM TPM_RESULT returnCode The return code of the operation.
_OUT_PARAM TPM_HMAC outData HMAC of migrationAuthorityDigest
_OUT_PARAM TPM_NONCE nonceEven Even nonce newly generated by TPM to cover outputs
_OUT_PARAM BOOL continueAuthSession Continue use flag, TRUE if handle is still active
_OUT_PARAM TPM_AUTHDATA resAuth Authorization HMAC, key: ownerAuth.

_TPM_COMMAND TPM_CMK_CreateKey
_COMMENT The TPM_CMK_CreateKey command both generates and creates a secure storage bundle for asymmetric keys whose migration is controlled by a migration authority. TPM_CMK_CreateKey is very similar to TPM_CreateWrapKey, but: (1) the resultant key must be a migratable key and can be migrated only by TPM_CMK_CreateBlob; (2) the command is Owner authorized via a ticket. TPM_CMK_CreateKey creates an otherwise normal migratable key except that (1) migrationAuth is an HMAC of the migration authority and the new key’s public key, signed by tpmProof (instead of being tpmProof); (2) the migrationAuthority bit is set TRUE; (3) the payload type is TPM_PT_MIGRATE_RESTRICTED. The migration-selection/migration authority is specified by passing in a public key (actually the digests of one or more public keys, so more than one migration authority can be specified).
_IN_PARAM TPM_TAG tag TPM_TAG_RQU_AUTH1_COMMAND
_IN_PARAM UINT32 paramSize Total number of input bytes including paramSize and tag
_IN_PARAM TPM_COMMAND_CODE ordinal Command ordinal: TPM_ORD_CMK_CreateKey
_IN_PARAM TPM_KEY_HANDLE parentHandle Handle of a loaded key that can perform key wrapping.
_IN_PARAM TPM_ENCAUTH dataUsageAuth Encrypted usage AuthData for the key.
_IN_PARAM TPM_KEY12 keyInfo Information about key to be created, pubkey.keyLength and keyInfo.encData elements are 0. MUST be TPM_KEY12
_IN_PARAM TPM_HMAC migrationAuthorityApproval A ticket, created by the TPM Owner using TPM_CMK_ApproveMA, approving a TPM_MSA_COMPOSITE structure
_IN_PARAM TPM_DIGEST migrationAuthorityDigest The digest of a TPM_MSA_COMPOSITE structure
_IN_PARAM TPM_AUTHHANDLE authHandle The authorization session handle used for parent key authorization. Must be an OSAP session.
_IN_PARAM TPM_NONCE authLastNonceEven Even nonce previously generated by TPM to cover inputs
_IN_PARAM TPM_NONCE nonceOdd Nonce generated by system associated with authHandle
_IN_PARAM BOOL continueAuthSession Ignored
_IN_PARAM TPM_AUTHDATA pubAuth The authorization session digest that authorizes the use of the public key in parentHandle. HMAC key: parentKey.usageAuth.
_OUT_PARAM TPM_TAG tag TPM_TAG_RSP_AUTH1_COMMAND
_OUT_PARAM UINT32 paramSize Total number of output bytes including paramSize and tag
_OUT_PARAM TPM_RESULT returnCode The return code of the operation.
_OUT_PARAM TPM_KEY12 wrappedKey The TPM_KEY structure which includes the public and encrypted private key. MUST be TPM_KEY12
_OUT_PARAM TPM_NONCE nonceEven Even nonce newly generated by TPM to cover outputs
_OUT_PARAM BOOL continueAuthSession Continue use flag, fixed at FALSE
_OUT_PARAM TPM_AUTHDATA resAuth The authorization session digest for the returned parameters. HMAC key: parentKey.usageAuth.

_TPM_COMMAND TPM_CMK_CreateTicket
_COMMENT The TPM_CMK_CreateTicket command uses a public key to verify the signature over a digest. TPM_CMK_CreateTicket returns a ticket that can be used to prove to the same TPM that signature verification with a particular public key was successful.
_IN_PARAM TPM_TAG tag TPM_TAG_RQU_AUTH1_COMMAND
_IN_PARAM UINT32 paramSize Total number of input bytes including paramSize and tag
_IN_PARAM TPM_COMMAND_CODE ordinal Command ordinal: TPM_ORD_CMK_CreateTicket
_IN_PARAM TPM_PUBKEY verificationKey The public key to be used to check signatureValue
_IN_PARAM TPM_DIGEST signedData The data to be verified
_IN_PARAM UINT32 signatureValueSize The size of the signatureValue
_IN_PARAM BYTE[] signatureValue The signatureValue to be verified
_IN_PARAM TPM_AUTHHANDLE authHandle The authorization session handle used for owner authentication.
_IN_PARAM TPM_NONCE authLastNonceEven Even nonce previously generated by TPM to cover inputs
_IN_PARAM TPM_NONCE nonceOdd Nonce generated by system associated with authHandle
_IN_PARAM BOOL continueAuthSession Ignored
_IN_PARAM TPM_AUTHDATA pubAuth The authorization session digest for inputs and owner. HMAC key: ownerAuth.
_OUT_PARAM TPM_TAG tag TPM_TAG_RSP_AUTH1_COMMAND
_OUT_PARAM UINT32 paramSize Total number of output bytes including paramSize and tag
_OUT_PARAM TPM_RESULT returnCode The return code of the operation.
_OUT_PARAM TPM_HMAC sigTicket Ticket that proves digest created on this TPM
_OUT_PARAM TPM_NONCE nonceEven Even nonce newly generated by TPM to cover outputs
_OUT_PARAM BOOL continueAuthSession Continue use flag
_OUT_PARAM TPM_AUTHDATA resAuth Authorization. HMAC key:. ownerAuth.

_TPM_COMMAND TPM_CMK_CreateBlob
_COMMENT TPM_CMK_CreateBlob command is very similar to TPM_CreateMigrationBlob, except that it: (1) uses an extra ticket (restrictedKeyAuth) instead of a migrationAuth authorization session; (2) uses the migration options TPM_MS_RESTRICT_MIGRATE or TPM_MS_RESTRICT_APPROVE; (3) produces a wrapped key blob whose migrationAuth is independent of tpmProof. If the destination (parent) public key is the MA, migration is implicitly permitted. Further checks are required if the MA is not the destination (parent) public key, and merely selects a migration destination: (1) sigTicket must prove that restrictTicket was signed by the MA; (2) restrictTicket must vouch that the target public key is approved for migration to the destination (parent) public key. (Obviously, this more complex method may also be used by an MA to approve migration to that MA.) In both cases, the MA must be one of the MAs implicitly listed in the migrationAuth of the target key-to-be-migrated. When the migrationType is TPM_MS_RESTRICT_MIGRATE, restrictTicket and sigTicket are unused. The TPM may test that the corresponding sizes are zero, so the caller should set them to zero for interoperability.
_IN_PARAM TPM_TAG tag TPM_TAG_RQU_AUTH1_COMMAND
_IN_PARAM UINT32 paramSize Total number of input bytes including paramSize and tag
_IN_PARAM TPM_COMMAND_CODE ordinal Command ordinal: TPM_ORD_CMK_CreateBlob
_IN_PARAM TPM_KEY_HANDLE parentHandle Handle of the parent key that can decrypt encData.
_IN_PARAM TPM_MIGRATE_SCHEME migrationType The migration type, either TPM_MS_RESTRICT_MIGRATE or TPM_MS_RESTRICT_APPROVE.
_IN_PARAM TPM_MIGRATIONKEYAUTH migrationKeyAuth Migration public key and its authorization session digest.
_IN_PARAM TPM_DIGEST pubSourceKeyDigest The digest of the TPM_PUBKEY of the entity to be migrated
_IN_PARAM UINT32 msaListSize The size of the msaList parameter, which is a variable length
_IN_PARAM TPM_MSA_COMPOSITE structure
_IN_PARAM TPM_MSA_COMPOSITE msaList One or more digests of public keys belonging to migration authorities
_IN_PARAM UINT32 restrictTicketSize The size of the restrictTicket parameter
_IN_PARAM BYTE[] restrictTicket If migrationType is TPM_MS_RESTRICT_APPROVE, a TPM_CMK_AUTH structure, containing the digests of the public keys belonging to the Migration Authority, the destination parent key and the key-to-be-migrated.
_IN_PARAM UINT32 sigTicketSize The size of the sigTicket parameter S
_IN_PARAM BYTE[] sigTicket If migrationType is TPM_MS_RESTRICT_APPROVE, a TPM_HMAC structure, generated by the TPM, signaling a valid signature over restrictTicket S
_IN_PARAM UINT32 encDataSize The size of the encData parameter S
_IN_PARAM BYTE[] encData The encrypted entity that is to be modified.
_IN_PARAM TPM_AUTHHANDLE parentAuthHandle The authorization session handle used for the parent key.
_IN_PARAM TPM_NONCE authLastNonceEven Even nonce previously generated by TPM to cover inputs
_IN_PARAM TPM_NONCE nonceOdd Nonce generated by system associated with parentAuthHandle
_IN_PARAM BOOL continueAuthSession Continue use flag for parent session
_IN_PARAM TPM_AUTHDATA parentAuth HMAC key: parentKey.usageAuth.
_OUT_PARAM TPM_TAG tag TPM_TAG_RSP_AUTH1_COMMAND
_OUT_PARAM UINT32 paramSize Total number of output bytes including paramSize and tag
_OUT_PARAM TPM_RESULT returnCode The return code of the operation.
_OUT_PARAM UINT32 randomSize The used size of the output area for random
_OUT_PARAM BYTE[] random String used for xor encryption
_OUT_PARAM UINT32 outDataSize The used size of the output area for outData
_OUT_PARAM BYTE[] outData The modified, encrypted entity.
_OUT_PARAM TPM_NONCE nonceEven Even nonce newly generated by TPM to cover outputs
_OUT_PARAM BOOL continueAuthSession Continue use flag for parent key session
_OUT_PARAM TPM_AUTHDATA resAuth HMAC key: parentKey.usageAuth.

_TPM_COMMAND TPM_CMK_ConvertMigration
_COMMENT TPM_CMK_ConvertMigration completes the migration of certified migration blobs. This command takes a certified migration blob and creates a normal wrapped blob with payload type TPM_PT_MIGRATE_EXTERNAL. The migrated blob must be loaded into the TPM using the normal TPM_LoadKey function. Note that the command migrates private keys, only. The migration of the associated public keys is not specified by TPM because they are not security sensitive. Migration of the associated public keys may be specified in a platform specific specification. A TPM_KEY structure must be recreated before the migrated key can be used by the target TPM in a TPM_LoadKey command. TPM_CMK_ConvertMigration checks that one of the MAs implicitly listed in the migrationAuth of the target key has approved migration of the target key to the destination (parent) key, and that the settings (flags etc.) in the target key are those of a CMK.
_IN_PARAM TPM_TAG tag TPM_TAG_RQU_AUTH1_COMMAND
_IN_PARAM UINT32 paramSize Total number of input bytes including paramSize and tag
_IN_PARAM TPM_COMMAND_CODE ordinal Command ordinal: TPM_ORD_CMK_ConvertMigration
_IN_PARAM TPM_KEY_HANDLE parentHandle Handle of a loaded key that can decrypt keys.
_IN_PARAM TPM_CMK_AUTH restrictTicket The digests of public keys belonging to the Migration Authority, the destination parent key and the key-to-be-migrated.
_IN_PARAM TPM_HMAC sigTicket A signature ticket, generated by the TPM, signaling a valid signature over restrictTicket
_IN_PARAM TPM_KEY12 migratedKey The public key of the key-to-be-migrated. The private portion MUST be
_IN_PARAM TPM_MIGRATE_ASYMKEY properly XOR’d
_IN_PARAM UINT32 msaListSize The size of the msaList parameter, which is a variable length
_IN_PARAM TPM_MSA_COMPOSITE structure
_IN_PARAM TPM_MSA_COMPOSITE msaList One or more digests of public keys belonging to migration authorities
_IN_PARAM UINT32 randomSize Size of random
_IN_PARAM BYTE [ ] random Random value used to hide key data.
_IN_PARAM TPM_AUTHHANDLE authHandle The authorization session handle used for keyHandle.
_IN_PARAM TPM_NONCE authLastNonceEven Even nonce previously generated by TPM to cover inputs
_IN_PARAM TPM_NONCE nonceOdd Nonce generated by system associated with authHandle
_IN_PARAM BOOL continueAuthSession The continue use flag for the authorization session handle
_IN_PARAM TPM_AUTHDATA parentAuth Authorization HMAC: parentKey.usageAuth
_OUT_PARAM TPM_TAG tag TPM_TAG_RSP_AUTH1_COMMAND
_OUT_PARAM UINT32 paramSize Total number of output bytes including paramSize and tag
_OUT_PARAM TPM_RESULT returnCode The return code of the operation.
_OUT_PARAM UINT32 outDataSize The used size of the output area for outData
_OUT_PARAM BYTE[] outData The encrypted private key that can be loaded with TPM_LoadKey
_OUT_PARAM TPM_NONCE nonceEven Even nonce newly generated by TPM to cover outputs
_OUT_PARAM BOOL continueAuthSession Continue use flag, TRUE if handle is still active
_OUT_PARAM TPM_AUTHDATA resAuth Authorization HMAC key .usageAuth
_COMMENT Functions (optional) When a maintenance archive is created with generateRandom FALSE, the maintenance blob is XOR encrypted with the owner authorization before encryption with the maintenance public key. This prevents the manufacturer from obtaining plaintext data. The receiving TPM must have the same owner authorization as the sending TPM in order to XOR decrypt the archive. When generateRandom is TRUE, the maintenance blob is XOR encrypted with random data, which is also returned. This permits someone trusted by the Owner to load the maintenance archive into the replacement platform in the absence of the Owner and manufacturer, without the Owner having to reveal information about his auth value. The receiving and sending TPM's may have different owner authorizations. The random data is transferred from the sending TPM owner to the receiving TPM owner out of band, so the maintenance blob remains hidden from the manufacturer. This is a typical maintenance sequence: . Manufacturer: • generates maintenance key pair • gives public key to TPM1 owner . TPM1: TPM_LoadManuMaintPub • load maintenance public key . TPM1: TPM_CreateMaintenanceArchive • XOR encrypt with owner auth or random • encrypt the maintenance archive with maintenance public key . TPM2: • Take ownership • Create and activate an AIK • Certify the SRK with the AIK, proving that the SRK came from a legitimate TPM . Manufacturer: • decrypt maintenance archive with maintenance private key • (still XOR encrypted with owner auth or random) • validate the TPM2 SRK certification • encrypt the maintenance archive with TPM2 SRK public key . TPM2: TPM_LoadMaintenanceArchive • decrypt the maintenance archive with SRK private key • XOR decrypt with owner auth or random

_TPM_COMMAND TPM_CreateMaintenanceArchive
_COMMENT This command creates the maintenance archive. It can only be executed by the owner, and may be shut off with the TPM_KillMaintenanceFeature command.
_IN_PARAM TPM_TAG tag TPM_TAG_RQU_AUTH1_COMMAND
_IN_PARAM UINT32 paramSize Total number of input bytes including paramSize and tag
_IN_PARAM TPM_COMMAND_CODE ordinal Cmd ordinal: TPM_ORD_CreateMaintenanceArchive
_IN_PARAM BOOL generateRandom Use RNG or Owner auth to generate ‘random’.
_IN_PARAM TPM_AUTHHANDLE authHandle The authorization session handle used for owner authentication.
_IN_PARAM TPM_NONCE authLastNonceEven Even nonce previously generated by TPM to cover inputs
_IN_PARAM TPM_NONCE nonceOdd Nonce generated by system associated with authHandle
_IN_PARAM BOOL continueAuthSession The continue use flag for the authorization session handle
_IN_PARAM TPM_AUTHDATA ownerAuth HMAC key: ownerAuth.
_OUT_PARAM TPM_TAG tag TPM_TAG_RSP_AUTH1_COMMAND
_OUT_PARAM UINT32 paramSize Total number of output bytes including paramSize and tag
_OUT_PARAM TPM_RESULT returnCode The return code of the operation.
_OUT_PARAM UINT32 randomSize Size of the returned random data. Will be 0 if generateRandom is FALSE.
_OUT_PARAM BYTE [ ] random Random data to XOR with result.
_OUT_PARAM UINT32 archiveSize Size of the encrypted archive
_OUT_PARAM BYTE [ ] archive Encrypted key archive.
_OUT_PARAM TPM_NONCE nonceEven Even nonce newly generated by TPM to cover outputs
_OUT_PARAM BOOL continueAuthSession Continue use flag, TRUE if handle is still active
_OUT_PARAM TPM_AUTHDATA resAuth The authorization session digest for the returned parameters. HMAC key: ownerAuth.

_TPM_COMMAND TPM_LoadMaintenanceArchive
_COMMENT This command loads in a Maintenance archive that has been massaged by the manufacturer to load into another TPM. If the maintenance archive was created using the owner authorization for XOR encryption, the current owner authorization must be used for decryption. The owner authorization does not change. If the maintenance archive was created using random data for the XOR encryption, the vendor specific arguments must include the random data. The owner authorization may change.
_IN_PARAM TPM_TAG tag TPM_TAG_RQU_AUTH1_COMMAND
_IN_PARAM UINT32 paramSize Total number of input bytes including paramSize and tag
_IN_PARAM TPM_COMMAND_CODE ordinal Command ordinal: TPM_ORD_LoadMaintenanceArchive
_IN_PARAM UINT32 archiveSize Sice of the encrypted archive
_IN_PARAM BYTE[] archive Encrypted key archive … … Vendor specific arguments
_IN_PARAM TPM_AUTHHANDLE authHandle The authorization session handle used for owner authentication.
_IN_PARAM TPM_NONCE authLastNonceEven Even nonce previously generated by TPM to cover inputs - -
_IN_PARAM TPM_NONCE nonceOdd Nonce generated by system associated with authHandle -
_IN_PARAM BOOL continueAuthSession The continue use flag for the authorization session handle --
_IN_PARAM TPM_AUTHDATA ownerAuth The authorization session digest for inputs and owner authentication. HMAC key: ownerAuth.
_OUT_PARAM TPM_TAG tag TPM_TAG_RSP_AUTH1_COMMAND
_OUT_PARAM UINT32 paramSize Total number of output bytes including paramSize and tag
_OUT_PARAM TPM_RESULT returnCode The return code of the operation.
_OUT_PARAM TPM_NONCE nonceEven Even nonce newly generated by TPM to cover outputs
_OUT_PARAM BOOL continueAuthSession Continue use flag, TRUE if handle is still active
_OUT_PARAM TPM_AUTHDATA resAuth The authorization session digest for the returned parameters. HMAC key: ownerAuth, the original value and not the new auth value - - -

_TPM_COMMAND TPM_KillMaintenanceFeature
_COMMENT The TPM_KillMaintencanceFeature is a permanent action that prevents ANYONE from creating a maintenance archive. This action, once taken, is permanent until a new TPM Owner is set. This action is to allow those customers who do not want the maintenance feature to not allow the use of the maintenance feature. At the discretion of the Owner, it should be possible to kill the maintenance feature in such a way that the only way to recover maintainability of the platform would be to wipe out the root keys. This feature is mandatory in any TPM that implements the maintenance feature.
_IN_PARAM TPM_TAG tag TPM_TAG_RQU_AUTH1_COMMAND
_IN_PARAM UINT32 paramSize Total number of input bytes including paramSize and tag
_IN_PARAM TPM_COMMAND_CODE ordinal Command ordinal: TPM_ORD_KillMaintenanceFeature
_IN_PARAM TPM_AUTHHANDLE authHandle The authorization session handle used for owner authentication.
_IN_PARAM TPM_NONCE authLastNonceEven Even nonce previously generated by TPM to cover inputs
_IN_PARAM TPM_NONCE nonceOdd Nonce generated by system associated with authHandle
_IN_PARAM BOOL continueAuthSession The continue use flag for the authorization session handle
_IN_PARAM TPM_AUTHDATA ownerAuth HMAC key: ownerAuth.
_OUT_PARAM TPM_TAG tag TPM_TAG_RSP_AUTH1_COMMAND
_OUT_PARAM UINT32 paramSize Total number of output bytes including paramSize and tag
_OUT_PARAM TPM_RESULT returnCode The return code of the operation.
_OUT_PARAM TPM_NONCE nonceEven Even nonce newly generated by TPM to cover outputs
_OUT_PARAM BOOL continueAuthSession Continue use flag, TRUE if handle is still active
_OUT_PARAM TPM_AUTHDATA resAuth HMAC key: ownerAuth.

_TPM_COMMAND TPM_LoadManuMaintPub
_COMMENT The TPM_LoadManuMaintPub command loads the manufacturer’s public key for use in the maintenance process. The command installs manuMaintPub in PERMANENT data storage inside a TPM. Maintenance enables duplication of non-migratory data in protected storage. There is therefore a security hole if a platform is shipped before the maintenance public key has been installed in a TPM. The command is expected to be used before installation of a TPM Owner or any key in TPM protected storage. It therefore does not use authorization.
_IN_PARAM TPM_TAG tag TPM_TAG_RQU_COMMAND
_IN_PARAM UINT32 paramSize Total number of input bytes including paramSize and tag
_IN_PARAM TPM_COMMAND_CODE ordinal Command ordinal: TPM_ORD_LoadManuMaintPub
_IN_PARAM TPM_NONCE antiReplay AntiReplay and validation nonce
_IN_PARAM TPM_PUBKEY pubKey The public key of the manufacturer to be in use for maintenance
_OUT_PARAM TPM_TAG tag TPM_TAG_RSP_COMMAND
_OUT_PARAM UINT32 paramSize Total number of output bytes including paramSize and tag
_OUT_PARAM TPM_RESULT returnCode The return code of the operation.
_OUT_PARAM TPM_DIGEST checksum Digest of pubKey and antiReplay

_TPM_COMMAND TPM_ReadManuMaintPub
_IN_PARAM TPM_TAG tag TPM_TAG_RQU_COMMAND
_IN_PARAM UINT32 paramSize Total number of input bytes including paramSize and tag
_IN_PARAM TPM_COMMAND_CODE ordinal Command ordinal: TPM_ORD_ReadManuMaintPub
_IN_PARAM TPM_NONCE antiReplay AntiReplay and validation nonce
_OUT_PARAM TPM_TAG tag TPM_TAG_RSP_COMMAND
_OUT_PARAM UINT32 paramSize Total number of output bytes including paramSize and tag
_OUT_PARAM TPM_RESULT returnCode The return code of the operation.
_OUT_PARAM TPM_DIGEST checksum Digest of pubKey and antiReplay

_TPM_COMMAND TPM_SHA1Start
_COMMENT This capability starts the process of calculating a SHA-1 digest. The exposure of the SHA-1 processing is a convenience to platforms in a mode that do not have sufficient memory to perform SHA-1 themselves. As such, the use of SHA-1 is restrictive on the TPM. The TPM may not allow any other types of processing during the execution of a SHA-1 session. There is only one SHA-1 session active on a TPM. The exclusivity of a SHA-1 context is due to the relatively large volatile buffer it requires in order to hold the intermediate results between the SHA-1 context commands. This buffer can be in contradiction to other command needs. After the execution of TPM_SHA1Start, and prior to TPM_SHA1Complete or TPM_SHA1CompleteExtend, the receipt of any command other than TPM_SHA1Update will cause the invalidation of the SHA-1 session.
_IN_PARAM TPM_TAG tag TPM_TAG_RQU_COMMAND
_IN_PARAM UINT32 paramSize Total number of input bytes including paramSize and tag
_IN_PARAM TPM_COMMAND_CODE ordinal Command ordinal: TPM_ORD_SHA1Start
_OUT_PARAM TPM_TAG tag TPM_TAG_RSP_COMMAND
_OUT_PARAM UINT32 paramSize Total number of output bytes including paramSize and tag
_OUT_PARAM TPM_RESULT returnCode The return code of the operation.
_OUT_PARAM UINT32 maxNumBytes Maximum number of bytes that can be sent to TPM_SHA1Update. Must be a multiple of 64 bytes.

_TPM_COMMAND TPM_SHA1Update
_COMMENT This capability inputs complete blocks of data into a pending SHA-1 digest. At the end of the process, the digest remains pending.
_IN_PARAM TPM_TAG tag TPM_TAG_RQU_COMMAND
_IN_PARAM UINT32 paramSize Total number of input bytes including paramSize and tag
_IN_PARAM TPM_COMMAND_CODE ordinal Command ordinal: TPM_ORD_SHA1Update
_IN_PARAM UINT32 numBytes The number of bytes in hashData. Must be a multiple of 64 bytes.
_IN_PARAM BYTE [ ] hashData Bytes to be hashed
_OUT_PARAM TPM_TAG tag TPM_TAG_RSP_COMMAND
_OUT_PARAM UINT32 paramSize Total number of output bytes including paramSize and tag
_OUT_PARAM TPM_RESULT returnCode The return code of the operation.

_TPM_COMMAND TPM_SHA1Complete
_COMMENT This capability terminates a pending SHA-1 calculation.
_IN_PARAM TPM_TAG tag TPM_TAG_RQU_COMMAND
_IN_PARAM UINT32 paramSize Total number of input bytes including paramSize and tag
_IN_PARAM TPM_COMMAND_CODE ordinal Command ordinal: TPM_ORD_SHA1Complete
_IN_PARAM UINT32 hashDataSize Number of bytes in hashData, MUST be 64 or less
_IN_PARAM BYTE [ ] hashData Final bytes to be hashed
_OUT_PARAM TPM_TAG tag TPM_TAG_RSP_COMMAND
_OUT_PARAM UINT32 paramSize Total number of output bytes including paramSize and tag
_OUT_PARAM TPM_RESULT returnCode The return code of the operation.
_OUT_PARAM TPM_DIGEST hashValue The output of the SHA-1 hash.

_TPM_COMMAND TPM_SHA1CompleteExtend
_COMMENT This capability terminates a pending SHA-1 calculation and EXTENDS the result into a Platform Configuration Register using a SHA-1 hash process. This command is designed to complete a hash sequence and extend a PCR in memory-less environments.
_IN_PARAM TPM_TAG tag TPM_TAG_RQU_COMMAND
_IN_PARAM UINT32 paramSize Total number of input bytes including paramSize and tag
_IN_PARAM TPM_COMMAND_CODE ordinal Command ordinal: TPM_ORD_SHA1CompleteExtend
_IN_PARAM TPM_PCRINDEX pcrNum Index of the PCR to be modified
_IN_PARAM UINT32 hashDataSize Number of bytes in hashData, MUST be 64 or less
_IN_PARAM BYTE [ ] hashData Final bytes to be hashed
_OUT_PARAM TPM_TAG tag TPM_TAG_RSP_COMMAND
_OUT_PARAM UINT32 paramSize Total number of output bytes including paramSize and tag
_OUT_PARAM TPM_RESULT returnCode The return code of the operation.
_OUT_PARAM TPM_DIGEST hashValue The output of the SHA-1 hash.
_OUT_PARAM TPM_PCRVALUE outDigest The PCR value after execution of the command.

_TPM_COMMAND TPM_Sign
_COMMENT The Sign command signs data and returns the resulting digital signature. The TPM does not allow TPM_Sign with a TPM_KEY_IDENTITY (AIK) because TPM_Sign can sign arbitrary data and could be used to fake a quote. (This could have been relaxed to allow TPM_Sign with an AIK if the signature scheme is _INFO For an _INFO key, the metadata prevents TPM_Sign from faking a quote.)
_IN_PARAM TPM_TAG tag TPM_TAG_RQU_AUTH1_COMMAND
_IN_PARAM UINT32 paramSize Total number of input bytes including paramSize and tag
_IN_PARAM TPM_COMMAND_CODE ordinal Command ordinal: TPM_ORD_Sign.
_IN_PARAM TPM_KEY_HANDLE keyHandle The keyHandle identifier of a loaded key that can perform digital signatures. s
_IN_PARAM UINT32 areaToSignSize The size of the areaToSign parameter s
_IN_PARAM BYTE[] areaToSign The value to sign
_IN_PARAM TPM_AUTHHANDLE authHandle The authorization session handle used for keyHandle authorization
_IN_PARAM TPM_NONCE authLastNonceEven Even nonce previously generated by TPM to cover inputs
_IN_PARAM TPM_NONCE nonceOdd Nonce generated by system associated with authHandle
_IN_PARAM BOOL continueAuthSession The continue use flag for the authorization session handle
_IN_PARAM TPM_AUTHDATA privAuth The authorization session digest that authorizes the use of keyHandle. HMAC key: key.usageAuth
_OUT_PARAM TPM_TAG tag TPM_TAG_RSP_AUTH1_COMMAND
_OUT_PARAM UINT32 paramSize Total number of output bytes including paramSize and tag
_OUT_PARAM TPM_RESULT returnCode The return code of the operation.
_OUT_PARAM UINT32 sigSize The length of the returned digital signature
_OUT_PARAM BYTE[] sig The resulting digital signature.
_OUT_PARAM TPM_NONCE nonceEven Even nonce newly generated by TPM to cover outputs
_OUT_PARAM BOOL continueAuthSession Continue use flag, TRUE if handle is still active
_OUT_PARAM TPM_AUTHDATA resAuth The authorization session digest for the returned parameters. HMAC key: key.usageAuth

_TPM_COMMAND TPM_GetRandom
_COMMENT TPM_GetRandom returns the next bytesRequested bytes from the random number generator to the caller. It is recommended that a TPM implement the RNG in a manner that would allow it to return RNG bytes such that the frequency of bytesRequested being more than the number of bytes available is an infrequent occurrence.
_IN_PARAM TPM_TAG tag TPM_TAG_RQU_COMMAND
_IN_PARAM UINT32 paramSize Total number of input bytes including paramSize and tag
_IN_PARAM TPM_COMMAND_CODE ordinal Command ordinal: TPM_ORD_GetRandom.
_IN_PARAM UINT32 bytesRequested Number of bytes to return
_OUT_PARAM TPM_TAG tag TPM_TAG_RSP_COMMAND
_OUT_PARAM UINT32 paramSize Total number of output bytes including paramSize and tag
_OUT_PARAM TPM_RESULT returnCode The return code of the operation.
_OUT_PARAM UINT32 randomBytesSize The number of bytes returned
_OUT_PARAM BYTE[] randomBytes The returned bytes

_TPM_COMMAND TPM_StirRandom
_COMMENT TPM_StirRandom adds entropy to the RNG state.
_IN_PARAM TPM_TAG tag TPM_TAG_RQU_COMMAND
_IN_PARAM UINT32 paramSize Total number of input bytes including paramSize and tag
_IN_PARAM TPM_COMMAND_CODE ordinal Command ordinal: TPM_ORD_StirRandom
_IN_PARAM UINT32 dataSize Number of bytes of input
_IN_PARAM BYTE[] inData Data to add entropy to RNG state
_OUT_PARAM TPM_TAG tag TPM_TAG_RSP_COMMAND
_OUT_PARAM UINT32 paramSize Total number of output bytes including paramSize and tag
_OUT_PARAM TPM_RESULT returnCode The return code of the operation.

_TPM_COMMAND TPM_CertifyKey
_COMMENT The TPM_CertifyKey operation allows one key to certify the public portion of another key. A TPM identity key may be used to certify non-migratable keys but is not permitted to certify migratory keys or certified migration keys. As such, it allows the TPM to make the statement “this key is held in a TPM-shielded location, and it will never be revealed.” For this statement to have veracity, the Challenger must trust the policies used by the entity that issued the identity and the maintenance policy of the TPM manufacturer. Signing and legacy keys may be used to certify both migratable and non-migratable keys. Then the usefulness of a certificate depends on the trust in the certifying key by the recipient of the certificate. The key to be certified must be loaded before TPM_CertifyKey is called. The determination to use the TPM_CERTIFY_INFO or TPM_CERTIFY_INFO2 on the output is based on which PCRs and what localities the certified key is restricted to. A key to be certified that does not have locality restrictions and which uses no PCRs greater than PCR #15 will cause this command to return and sign a TPM_CERTIFY_INFO structure, which provides compatibility with V1.1 TPMs. When this command is run to certify all other keys (those that use PCR #16 or higher, as well as those limited by locality in any way), it will return and sign a TPM_CERTIFY_INFO2 structure. TPM_CertifyKey does not support the case where (a) the certifying key requires a usage authorization to be provided but (b) the key-to-be-certified does not. In such cases, TPM_CertifyKey2 must be used. TPM_CertifyKey cannot be used to certify CMKs. If a command tag (in the parameter array) specifies only one authorisation session, then the TPM convention is that the first session listed is ignored (authDataUsage must be TPM_AUTH_NEVER for this key) and the incoming session data is used for the second auth session in the list. In TPM_CertifyKey, the first session is the certifying key and the second session is the key-to-be-certified. In TPM_CertifyKey2, the first session is the key-to-be2593certified and the second session is the certifying key. The key handles of both the certifying key and the key to be certified are not included in the HMAC protecting the command. This permits key handle virtualization (swapping of keys in and out of the TPM that results in different key handles while at the same time maintaining key identifiers of upper layer software). In environments where the interface to the TPM is accessible by other parties, the key handles not being protected allows an attacker to change the handle of the key to be certified. This can be avoided by processing this command within a transport session and making sure that antiReplay indeed contains a nonce.
_IN_PARAM TPM_TAG tag TPM_TAG_RQU_AUTH2_COMMAND
_IN_PARAM UINT32 paramSize Total number of input bytes including paramSize and tag
_IN_PARAM TPM_COMMAND_CODE ordinal Command ordinal: TPM_ORD_CertifyKey
_IN_PARAM TPM_KEY_HANDLE certHandle Handle of the key to be used to certify the key.
_IN_PARAM TPM_KEY_HANDLE keyHandle Handle of the key to be certified.
_IN_PARAM TPM_NONCE antiReplay bits of externally supplied data (typically a nonce provided to prevent replay-attacks)
_IN_PARAM TPM_AUTHHANDLE certAuthHandle The authorization session handle used for certHandle.
_IN_PARAM TPM_NONCE authLastNonceEven Even nonce previously generated by TPM to cover inputs
_IN_PARAM TPM_NONCE nonceOdd Nonce generated by system associated with certAuthHandle
_IN_PARAM BOOL continueAuthSession The continue use flag for the authorization session handle
_IN_PARAM TPM_AUTHDATA certAuth The authorization session digest for inputs and certHandle. HMAC key: certKey.auth.
_IN_PARAM TPM_AUTHHANDLE keyAuthHandle The authorization session handle used for the key to be signed.
_IN_PARAM TPM_NONCE keylastNonceEven Even nonce previously generated by TPM
_IN_PARAM TPM_NONCE keynonceOdd Nonce generated by system associated with keyAuthHandle
_IN_PARAM BOOL continueKeySession The continue use flag for the authorization session handle
_IN_PARAM TPM_AUTHDATA keyAuth The authorization session digest for the inputs and key to be signed. HMAC key: key.usageAuth.
_OUT_PARAM TPM_TAG tag TPM_TAG_RSP_AUTH2_COMMAND
_OUT_PARAM UINT32 paramSize Total number of output bytes including paramSize and tag Sz Sz
_OUT_PARAM TPM_RESULT returnCode The return code of the operation.
_OUT_PARAM TPM_CERTIFY_INFO certifyInfo
_OUT_PARAM TPM_CERTIFY_INFO or TPM_CERTIFY_INFO2 structure that provides information relative to keyhandle
_OUT_PARAM UINT32 outDataSize The used size of the output area for outData
_OUT_PARAM BYTE[] outData The signature of certifyInfo
_OUT_PARAM TPM_NONCE nonceEven Even nonce newly generated by TPM
_OUT_PARAM BOOL continueAuthSession Continue use flag for cert key session
_OUT_PARAM TPM_AUTHDATA resAuth The authorization session digest for the returned parameters and parentHandle. HMAC key: certKey -> auth.
_OUT_PARAM TPM_NONCE keyNonceEven Even nonce newly generated by TPM
_OUT_PARAM BOOL continueKeySession Continue use flag for target key session
_OUT_PARAM TPM_AUTHDATA keyAuth The authorization session digest for the target key. HMAC key: key.auth.

_TPM_COMMAND TPM_CertifyKey2
_COMMENT This command is based on TPM_CertifyKey, but includes the ability to certify a Certifiable Migration Key (CMK), which requires extra input parameters. TPM_CertifyKey2 always produces a TPM_CERTIFY_INFO2 structure. TPM_CertifyKey2 does not support the case where (a) the key-to-be-certified requires a usage authorization to be provided but (b) the certifying key does not. If a command tag (in the parameter array) specifies only one authorisation session, then the TPM convention is that the first session listed is ignored (authDataUsage must be TPM_NO_READ_PUBKEY_AUTH or TPM_AUTH_NEVER for this key) and the incoming session data is used for the second auth session in the list. In TPM_CertifyKey2, the first session is the key to be certified and the second session is the certifying key. The key handles of both the certifying key and the key to be certified are not included in the HMAC protecting the command. This permits key handle virtualization (swapping of keys in and out of the TPM that results in different key handles while at the same time maintaining key identifiers of upper layer software). In environments where the interface to the TPM is accessible by other parties, the key handles not being protected allows an attacker to change the handle of the key to be certified. This can be avoided by processing this command within a transport session and making sure that antiReplay indeed contains a nonce.
_IN_PARAM TPM_TAG tag TPM_TAG_RQU_AUTH2_COMMAND
_IN_PARAM UINT32 paramSize Total number of input bytes including paramSize and tag
_IN_PARAM TPM_COMMAND_CODE ordinal Command ordinal: TPM_ORD_CertifyKey2
_IN_PARAM TPM_KEY_HANDLE keyHandle Handle of the key to be certified.
_IN_PARAM TPM_KEY_HANDLE certHandle Handle of the key to be used to certify the key.
_IN_PARAM TPM_DIGEST migrationPubDigest The digest of a TPM_MSA_COMPOSITE structure, containing at least one public key of a Migration Authority
_IN_PARAM TPM_NONCE antiReplay bits of externally supplied data (typically a nonce provided to prevent replay-attacks)
_IN_PARAM TPM_AUTHHANDLE keyAuthHandle The authorization session handle used for the key to be signed.
_IN_PARAM TPM_NONCE keylastNonceEven Even nonce previously generated by TPM
_IN_PARAM TPM_NONCE keynonceOdd Nonce generated by system associated with keyAuthHandle
_IN_PARAM BOOL continueKeySession The continue use flag for the authorization session handle
_IN_PARAM TPM_AUTHDATA keyAuth The authorization session digest for the inputs and key to be signed. HMAC key: key.usageAuth.
_IN_PARAM TPM_AUTHHANDLE certAuthHandle The authorization session handle used for certHandle.
_IN_PARAM TPM_NONCE authLastNonceEven Even nonce previously generated by TPM to cover inputs
_IN_PARAM TPM_NONCE nonceOdd Nonce generated by system associated with certAuthHandle
_IN_PARAM BOOL continueAuthSession The continue use flag for the authorization session handle
_IN_PARAM TPM_AUTHDATA certAuth Authorization HMAC key: certKey.auth.
_OUT_PARAM TPM_TAG tag TPM_TAG_RSP_AUTH2_COMMAND
_OUT_PARAM UINT32 paramSize Total number of output bytes including paramSize and tag Sz Sz
_OUT_PARAM TPM_RESULT returnCode The return code of the operation.
_OUT_PARAM TPM_CERTIFY_INFO2 certifyInfo
_OUT_PARAM TPM_CERTIFY_INFO2 relative to keyHandle
_OUT_PARAM UINT32 outDataSize The used size of the output area for outData
_OUT_PARAM BYTE[] outData The signed public key.
_OUT_PARAM TPM_NONCE keyNonceEven Even nonce newly generated by TPM
_OUT_PARAM BOOL keyContinueAuthSession Continue use flag for cert key session
_OUT_PARAM TPM_AUTHDATA keyResAuth Authorization HMAC key: keyHandle -> auth.
_OUT_PARAM TPM_NONCE certNonceEven Even nonce newly generated by TPM
_OUT_PARAM BOOL CertContinueAuthSession Continue use flag for cert key session
_OUT_PARAM TPM_AUTHDATA certResAuth Authorization HMAC key: certHandle -> auth.
_COMMENT Key Handling There are two create EK commands. The first matches the 1.1 functionality. The second provides the mechanism to enable revokeEK. The TPM and platform manufacturer decide on the inclusion or exclusion of the ability to execute revokeEK. The restriction to have the TPM generate the EK does not remove the manufacturing option to “squirt” the EK. During manufacturing, the TPM does not enforce all protections or requirements; hence, the restriction on only TPM generation of the EK is also not in force.

_TPM_COMMAND TPM_CreateEndorsementKeyPair
_COMMENT This command creates the TPM endorsement key. It returns a failure code if an endorsement key already exists.
_IN_PARAM TPM_TAG tag TPM_TAG_RQU_COMMAND
_IN_PARAM UINT32 paramSize Total number of input bytes including paramSize and tag
_IN_PARAM TPM_COMMAND_CODE ordinal Command ordinal: TPM_ORD_CreateEndorsementKeyPair
_IN_PARAM TPM_NONCE antiReplay Arbitrary data
_IN_PARAM TPM_KEY_PARMS keyInfo Information about key to be created, this includes all algorithm parameters
_OUT_PARAM TPM_TAG tag TPM_TAG_RSP_COMMAND
_OUT_PARAM UINT32 paramSize Total number of output bytes including paramSize and tag
_OUT_PARAM TPM_RESULT returnCode The return code of the operation.
_OUT_PARAM TPM_PUBKEY pubEndorsementKey The public endorsement key
_OUT_PARAM TPM_DIGEST checksum Hash of pubEndorsementKey and antiReplay

_TPM_COMMAND TPM_CreateRevocableEK
_COMMENT This command creates the TPM endorsement key. It returns a failure code if an endorsement key already exists. The TPM vendor may have a separate mechanism to create the EK and “squirt” the value into the TPM. The input parameters specify whether the EK is capable of being reset, whether the AuthData value to reset the EK will be generated by the TPM, and the new AuthData value itself if it is not to be generated by the TPM. The output parameter is the new AuthData value that must be used when resetting the EK (if it is capable of being reset). The command TPM_RevokeTrust must be used to reset an EK (if it is capable of being reset). Owner authorisation is unsuitable for authorizing resetting of an EK: someone with Physical Presence can remove a genuine Owner, install a new Owner, and revoke the EK. The genuine Owner can reinstall, but the platform will have lost its original attestation and may not be trusted by challengers. Therefore if a password is to be used to revoke an EK, it must be a separate password, given to the genuine Owner. In v1.2 an OEM has extra choices when creating EKs. a) An OEM could manufacture all of its TPMs with enableRevokeEK==TRUE. If the OEM has tracked the EKreset passwords for these TPMs, the OEM can give the passwords to customers. The customers can use the passwords as supplied, change the passwords, or clear the EKs and create new EKs with new passwords. If EKreset passwords are random values, the OEM can discard those values and not give them to customers. There is then a low probability (statistically zero) chance of a local DOS attack to reset the EK by guessing the password. The chance of a remote DOS attack is zero because Physical Presence must also be asserted to use TPM_RevokeTrust. b) An OEM could manufacture some of its TPMs with enableRevokeEK==FALSE. Then the EK can never be revoked, and the chance of even a local DOS attack on the EK is eliminated.
_IN_PARAM TPM_TAG tag TPM_TAG_RQU_COMMAND
_IN_PARAM UINT32 paramSize Total number of input bytes including paramSize and tag
_IN_PARAM TPM_COMMAND_CODE ordinal Command ordinal: TPM_ORD_CreateRevocableEK
_IN_PARAM TPM_NONCE antiReplay Arbitrary data
_IN_PARAM TPM_KEY_PARMS keyInfo Information about key to be created, this includes all algorithm parameters
_IN_PARAM BOOL generateReset If TRUE use TPM RNG to generate EKreset. If FALSE use the passed value inputEKreset
_IN_PARAM TPM_NONCE inputEKreset The authorization value to be used with TPM_RevokeTrust if generateReset==FALSE, else the parameter is present but ignored
_OUT_PARAM TPM_TAG tag TPM_TAG_RSP_COMMAND
_OUT_PARAM UINT32 paramSize Total number of output bytes including paramSize and tag
_OUT_PARAM TPM_RESULT returnCode The return code of the operation.
_OUT_PARAM TPM_PUBKEY pubEndorsementKey The public endorsement key
_OUT_PARAM TPM_DIGEST checksum Hash of pubEndorsementKey and antiReplay
_OUT_PARAM TPM_NONCE outputEKreset The AuthData value to use TPM_RevokeTrust

_TPM_COMMAND TPM_RevokeTrust
_COMMENT This command clears the EK and sets the TPM back to a pure default state. The generation of the AuthData value occurs during the generation of the EK. It is the responsibility of the EK generator to properly protect and disseminate the RevokeTrust AuthData.
_IN_PARAM TPM_TAG tag TPM_TAG_RQU_COMMAND
_IN_PARAM UINT32 paramSize Total number of input bytes including paramSize and tag
_IN_PARAM TPM_COMMAND_CODE ordinal Command ordinal: TPM_ORD_RevokeTrust
_IN_PARAM TPM_NONCE EKReset The value that will be matched to EK Reset
_OUT_PARAM TPM_TAG tag TPM_TAG_RSP_COMMAND
_OUT_PARAM UINT32 paramSize Total number of output bytes including paramSize and tag
_OUT_PARAM TPM_RESULT returnCode The return code of the operation.

_TPM_COMMAND TPM_ReadPubek
_COMMENT Return the endorsement key public portion. This value should have controls placed upon access, as it is a privacy sensitive value. The readPubek flag is set to FALSE by TPM_TakeOwnership and set to TRUE by TPM_OwnerClear, thus mirroring if a TPM Owner is present.
_IN_PARAM TPM_TAG tag TPM_TAG_RQU_COMMAND
_IN_PARAM UINT32 paramSize Total number of input bytes including paramSize and tag
_IN_PARAM TPM_COMMAND_CODE ordinal Command ordinal: TPM_ORD_ReadPubek
_IN_PARAM TPM_NONCE antiReplay Arbitrary data
_OUT_PARAM TPM_TAG tag TPM_TAG_RSP_COMMAND
_OUT_PARAM UINT32 paramSize Total number of output bytes including paramSize and tag
_OUT_PARAM TPM_RESULT returnCode The return code of the operation.
_OUT_PARAM TPM_PUBKEY pubEndorsementKey The public endorsement key
_OUT_PARAM TPM_DIGEST checksum Hash of pubEndorsementKey and antiReplay

_TPM_COMMAND TPM_OwnerReadInternalPub
_COMMENT A TPM Owner authorized command that returns the public portion of the EK or SRK. The keyHandle parameter is included in the incoming session authorization to prevent alteration of the value, causing a different key to be read. Unlike most key handles, which can be mapped by higher layer software, this key handle has only two fixed values.
_IN_PARAM TPM_TAG tag TPM_TAG_RQU_AUTH1_COMMAND
_IN_PARAM UINT32 paramSize Total number of input bytes including paramSize and tag
_IN_PARAM TPM_COMMAND_CODE ordinal Command ordinal: TPM_ORD_OwnerReadInternalPub
_IN_PARAM TPM_KEY_HANDLE keyHandle Handle for either PUBEK or SRK
_IN_PARAM TPM_AUTHHANDLE authHandle The authorization session handle used for owner authentication.
_IN_PARAM TPM_NONCE authLastNonceEven Even nonce previously generated by TPM to cover inputs
_IN_PARAM TPM_NONCE nonceOdd Nonce generated by system associated with authHandle
_IN_PARAM BOOL continueAuthSession The continue use flag for the authorization session handle
_IN_PARAM TPM_AUTHDATA ownerAuth The authorization session digest for inputs and owner authentication. HMAC key: ownerAuth.
_OUT_PARAM TPM_TAG tag TPM_TAG_RSP_AUTH1_COMMAND
_OUT_PARAM UINT32 paramSize Total number of output bytes including paramSize and tag
_OUT_PARAM TPM_RESULT returnCode The return code of the operation.
_OUT_PARAM TPM_PUBKEY publicPortion The public portion of the requested key
_OUT_PARAM TPM_NONCE nonceEven Even nonce newly generated by TPM to cover outputs
_OUT_PARAM BOOL continueAuthSession Continue use flag, TRUE if handle is still active
_OUT_PARAM TPM_AUTHDATA resAuth The authorization session digest for the returned parameters. HMAC key: ownerAuth.

_TPM_COMMAND TPM_MakeIdentity
_COMMENT Generate a new Attestation Identity Key (AIK). labelPrivCADigest identifies the privacy CA that the owner expects to be the target CA for the AIK. The selection is not enforced by the TPM. It is advisory only. It is included because the TSS cannot be trusted to send the AIK to the correct privacy CA. The privacy CA can use this parameter to validate that it is the target privacy CA and label intended by the TPM owner at the time the key was created. The label can be used to indicate an application purpose.
_IN_PARAM TPM_TAG tag TPM_TAG_RQU_AUTH2_COMMAND
_IN_PARAM UINT32 paramSize Total number of input bytes incl. paramSize and tag
_IN_PARAM TPM_COMMAND_CODE ordinal Command ordinal: TPM_ORD_MakeIdentity.
_IN_PARAM TPM_ENCAUTH identityAuth Encrypted usage AuthData for the new identity
_IN_PARAM TPM_CHOSENID_HASH labelPrivCADigest The digest of the identity label and privacy CA chosen for the AIK
_IN_PARAM TPM_KEY idKeyParams Structure containing all parameters of new identity key. pubKey.keyLength & idKeyParams.encData are both 0 MAY be TPM_KEY12
_IN_PARAM TPM_AUTHHANDLE srkAuthHandle The authorization session handle used for SRK authorization.
_IN_PARAM TPM_NONCE srkLastNonceEven Even nonce previously generated by TPM
_IN_PARAM TPM_NONCE srknonceOdd Nonce generated by system associated with srkAuthHandle
_IN_PARAM BOOL continueSrkSession Ignored
_IN_PARAM TPM_AUTHDATA srkAuth The authorization session digest for the inputs and the SRK. HMAC key: srk.usageAuth.
_IN_PARAM TPM_AUTHHANDLE authHandle The authorization session handle used for owner authentication. Session type MUST be OSAP.
_IN_PARAM TPM_NONCE authLastNonceEven Even nonce previously generated by TPM to cover inputs
_IN_PARAM TPM_NONCE nonceOdd Nonce generated by system associated with authHandle
_IN_PARAM BOOL continueAuthSession Ignored
_IN_PARAM TPM_AUTHDATA ownerAuth The authorization session digest for inputs and owner. HMAC key: ownerAuth.
_OUT_PARAM TPM_TAG tag TPM_TAG_RSP_AUTH2_COMMAND
_OUT_PARAM UINT32 paramSize Total number of output bytes including paramSize and tag
_OUT_PARAM TPM_RESULT returnCode The return code of the operation.
_OUT_PARAM TPM_KEY idKey The newly created identity key. MAY be TPM_KEY12
_OUT_PARAM UINT32 identityBindingSize The used size of the output area for identityBinding
_OUT_PARAM BYTE[] identityBinding Signature of TPM_IDENTITY_CONTENTS using idKey.private.
_OUT_PARAM TPM_NONCE srkNonceEven Even nonce newly generated by TPM.
_OUT_PARAM BOOL continueSrkSession Continue use flag. Fixed value of FALSE
_OUT_PARAM TPM_AUTHDATA srkAuth The authorization session digest used for the outputs and srkAuth session. HMAC key: srk.usageAuth.
_OUT_PARAM TPM_NONCE nonceEven Even nonce newly generated by TPM to cover outputs
_OUT_PARAM BOOL continueAuthSession Continue use flag. Fixed value of FALSE
_OUT_PARAM TPM_AUTHDATA resAuth The authorization session digest for the returned parameters. HMAC key: ownerAuth.

_TPM_COMMAND TPM_ActivateIdentity
_COMMENT The purpose of TPM_ActivateIdentity is to twofold. The first purpose is to obtain assurance that the credential in the TPM_SYM_CA_ATTESTATION is for this TPM. The second purpose is to obtain the session key used to encrypt the TPM_IDENTITY_CREDENTIAL. This is an extension to the 1.1 functionality of TPM_ActivateIdentity. The blob sent to from the CA can be in the 1.1 format or the 1.2 format. The TPM determines the type from the size or version information in the blob. TPM_ActivateIdentity checks that the symmetric session key corresponds to a TPM-identity before releasing that session key. Only the Owner of the TPM has the privilege of activating a TPM identity. The Owner is required to authorize the TPM_ActivateIdentity command. The owner may authorize the command using either the TPM_OIAP or TPM_OSAP authorization protocols. The creator of the ActivateIdentity package can specify if any PCR values are to be checked before releasing the session key.
_IN_PARAM TPM_TAG tag TPM_TAG_RQU_AUTH2_COMMAND
_IN_PARAM UINT32 paramSize Total number of input bytes incl. paramSize and tag
_IN_PARAM TPM_COMMAND_CODE ordinal Command ordinal: TPM_ORD_ActivateIdentity
_IN_PARAM TPM_KEY_HANDLE idKeyHandle Identity key to be activated
_IN_PARAM UINT32 blobSize Size of encrypted blob from CA
_IN_PARAM BYTE [ ] blob The encrypted ASYM_CA_CONTENTS or TPM_EK_BLOB
_IN_PARAM TPM_AUTHHANDLE idKeyAuthHandle The authorization session handle used for ID key authorization.
_IN_PARAM TPM_NONCE idKeyLastNonceEven Even nonce previously generated by TPM
_IN_PARAM TPM_NONCE idKeynonceOdd Nonce generated by system associated with idKeyAuthHandle
_IN_PARAM BOOL continueIdKeySession Continue usage flag for idKeyAuthHandle.
_IN_PARAM TPM_AUTHDATA idKeyAuth The authorization session digest for the inputs and ID key. HMAC key: idKey.usageAuth.
_IN_PARAM TPM_AUTHHANDLE authHandle The authorization session handle used for owner authentication.
_IN_PARAM TPM_NONCE authLastNonceEven Even nonce previously generated by TPM to cover inputs
_IN_PARAM TPM_NONCE nonceOdd Nonce generated by system associated with authHandle
_IN_PARAM BOOL continueAuthSession The continue use flag for the authorization session handle
_IN_PARAM TPM_AUTHDATA ownerAuth The authorization session digest for inputs and owner. HMAC key: ownerAuth.
_OUT_PARAM TPM_TAG tag TPM_TAG_RSP_AUTH2_COMMAND
_OUT_PARAM UINT32 paramSize Total number of output bytes including paramSize and tag
_OUT_PARAM TPM_RESULT returnCode The return code of the operation.
_OUT_PARAM TPM_SYMMETRIC_KEY symmetricKey The decrypted symmetric key.
_OUT_PARAM TPM_NONCE idKeyNonceEven Even nonce newly generated by TPM.
_OUT_PARAM BOOL continueIdKeySession Continue use flag, TRUE if handle is still active
_OUT_PARAM TPM_AUTHDATA idKeyAuth The authorization session digest used for the returned parameters and idKeyAuth session. HMAC key: idKey.usageAuth.
_OUT_PARAM TPM_NONCE nonceEven Even nonce newly generated by TPM to cover outputs
_OUT_PARAM BOOL continueAuthSession Continue use flag, TRUE if handle is still active
_OUT_PARAM TPM_AUTHDATA resAuth The authorization session digest for the returned parameters. HMAC key: ownerAuth.
_COMMENT and Reporting This section deals with what commands have direct access to the PCR

_TPM_COMMAND TPM_Extend
_COMMENT This adds a new measurement to a PCR
_IN_PARAM TPM_TAG tag TPM_TAG_RQU_COMMAND
_IN_PARAM UINT32 paramSize Total number of input bytes including paramSize and tag
_IN_PARAM TPM_COMMAND_CODE ordinal Command ordinal: TPM_ORD_Extend.
_IN_PARAM TPM_PCRINDEX pcrNum The PCR to be updated.
_IN_PARAM TPM_DIGEST inDigest The 160 bit value representing the event to be recorded.
_OUT_PARAM TPM_TAG tag TPM_TAG_RSP_COMMAND
_OUT_PARAM UINT32 paramSize Total number of output bytes including paramSize and tag
_OUT_PARAM TPM_RESULT returnCode The return code of the operation.
_OUT_PARAM TPM_PCRVALUE outDigest The PCR value after execution of the command.

_TPM_COMMAND TPM_PCRRead
_COMMENT The TPM_PCRRead operation provides non-cryptographic reporting of the contents of a named PCR.
_IN_PARAM TPM_TAG tag TPM_TAG_RQU_COMMAND
_IN_PARAM UINT32 paramSize Total number of input bytes including paramSize and tag
_IN_PARAM TPM_COMMAND_CODE ordinal Command ordinal: TPM_ORD_PCRRead.
_IN_PARAM TPM_PCRINDEX pcrIndex Index of the PCR to be read
_OUT_PARAM TPM_TAG tag TPM_TAG_RSP_COMMAND
_OUT_PARAM UINT32 paramSize Total number of output bytes including paramSize and tag
_OUT_PARAM TPM_RESULT returnCode The return code of the operation.
_OUT_PARAM TPM_PCRVALUE outDigest The current contents of the named PCR

_TPM_COMMAND TPM_Quote
_COMMENT The TPM_Quote operation provides cryptographic reporting of PCR values. A loaded key is required for operation. TPM_Quote uses a key to sign a statement that names the current value of a chosen PCR and externally supplied data (which may be a nonce supplied by a Challenger). The term "ExternalData" is used because an important use of TPM_Quote is to provide a digital signature on arbitrary data, where the signature includes the PCR values of the platform at time of signing. Hence the "ExternalData" is not just for anti-replay purposes, although it is (of course) used for that purpose in an integrity challenge. TPM_Quote should not use a TPM_KEY_SIGNING, because there is no way for the remote party to tell whether TPM_Quote or TPM_Sign created the signature. The exception is a TPM_KEY_SIGNING key with the _INFO signature scheme, because the metadata differentiates TPM_Sign from TPM_Quote.
_IN_PARAM TPM_TAG tag TPM_TAG_RQU_AUTH1_COMMAND
_IN_PARAM UINT32 paramSize Total number of input bytes including paramSize and tag
_IN_PARAM TPM_COMMAND_CODE ordinal Command ordinal: TPM_ORD_Quote.
_IN_PARAM TPM_KEY_HANDLE keyHandle The keyHandle identifier of a loaded key that can sign the PCR values.
_IN_PARAM TPM_NONCE externalData bits of externally supplied data (typically a nonce provided by a server to prevent replay-attacks)
_IN_PARAM TPM_PCR_SELECTION targetPCR The indices of the PCRs that are to be reported.
_IN_PARAM TPM_AUTHHANDLE authHandle The authorization session handle used for keyHandle authorization.
_IN_PARAM TPM_NONCE authLastNonceEven Even nonce previously generated by TPM to cover inputs
_IN_PARAM TPM_NONCE nonceOdd Nonce generated by system associated with authHandle
_IN_PARAM BOOL continueAuthSession The continue use flag for the authorization session handle
_IN_PARAM TPM_AUTHDATA privAuth The authorization session digest for inputs and keyHandle. HMAC key: key -> usageAuth.
_OUT_PARAM TPM_TAG tag TPM_TAG_RSP_AUTH1_COMMAND
_OUT_PARAM UINT32 paramSize Total number of output bytes including paramSize and tag
_OUT_PARAM TPM_RESULT returnCode The return code of the operation.
_OUT_PARAM TPM_PCR_COMPOSITE pcrData A structure containing the same indices as targetPCR, plus the corresponding current PCR values.
_OUT_PARAM UINT32 sigSize The used size of the output area for the signature
_OUT_PARAM BYTE[] sig The signed data blob.
_OUT_PARAM TPM_NONCE nonceEven Even nonce newly generated by TPM to cover outputs
_OUT_PARAM BOOL continueAuthSession Continue use flag, TRUE if handle is still active
_OUT_PARAM TPM_AUTHDATA resAuth The authorization session digest for the returned parameters. HMAC key: Key -> usageAuth.

_TPM_COMMAND TPM_PCR_Reset
_COMMENT For PCR with the pcrReset attribute set to TRUE, this command resets the PCR back to the default value, this mimics the actions of TPM_Init. The PCR may have restrictions as to which locality can perform the reset operation. Sending a null pcrSelection results in an error is due to the requirement that the command actually do something. If pcrSelection is null there are no PCR to reset and the command would then do nothing. For PCR that are resettable, the presence of a Trusted Operating System (TOS) can change the behavior of TPM_PCR_Reset. The following pseudo code shows how the behavior changes At TPM_Startup If TPM_PCR_ATTRIBUTES->pcrReset is FALSE Set PCR to 0x00…00 Else Set PCR to 0xFF…FF At TPM_PCR_Reset If TPM_PCR_ATTRIBUTES->pcrReset is TRUE If TOSPresent Set PCR to 0x00…00 Else Set PCR to 0xFF…FF Else Return error The above pseudocode is for example only, for the details of a specific platform, the reader must review the platform specific specification. The purpose of the above pseudocode is to show that both pcrReset and the TOSPresent bit control the value in use to when the PCR resets.
_IN_PARAM TPM_TAG tag TPM_TAG_RQU_COMMAND
_IN_PARAM UINT32 paramSize Total number of input bytes including paramSize and tag
_IN_PARAM TPM_COMMAND_CODE ordinal Command ordinal: TPM_ORD_PCR_Reset
_IN_PARAM TPM_PCR_SELECTION pcrSelection The PCR’s to reset
_OUT_PARAM TPM_TAG tag TPM_TAG_RSP_COMMAND
_OUT_PARAM UINT32 paramSize Total number of output bytes including paramSize and tag
_OUT_PARAM TPM_RESULT returnCode The return code of the operation.

_TPM_COMMAND TPM_Quote2
_COMMENT The TPM_Quote2 operation provides cryptographic reporting of PCR values. A loaded key is required for operation. TPM_Quote2 uses a key to sign a statement that names the current value of a chosen PCR and externally supplied data (which may be a nonce supplied by a Challenger). The term "externalData" is used because an important use of TPM_Quote2 is to provide a digital signature on arbitrary data, where the signature includes the PCR values of the platform at time of signing. Hence the "externalData" is not just for anti-replay purposes, although it is (of course) used for that purpose in an integrity challenge. TPM_Quote2 differs from TPM_Quote in that TPM_Quote2 uses TPM_PCR_INFO_SHORT to hold information relative to the PCR registers. TPM_PCR_INFO_SHORT includes locality information to provide the requestor a more complete view of the current platform configuration.
_IN_PARAM TPM_TAG tag TPM_TAG_RQU_AUTH1_COMMAND
_IN_PARAM UINT32 paramSize Total number of input bytes including paramSize and tag
_IN_PARAM TPM_COMMAND_CODE ordinal Command ordinal: TPM_ORD_Quote2
_IN_PARAM TPM_KEY_HANDLE keyHandle The keyHandle identifier of a loaded key that can sign the PCR values.
_IN_PARAM TPM_NONCE externalData bits of externally supplied data (typically a nonce provided by a server to prevent replay-attacks)
_IN_PARAM TPM_PCR_SELECTION targetPCR The indices of the PCRs that are to be reported.
_IN_PARAM BOOL addVersion When TRUE add TPM_CAP_VERSION_INFO to the output
_IN_PARAM TPM_AUTHHANDLE authHandle The authorization session handle used for keyHandle authorization.
_IN_PARAM TPM_NONCE authLastNonceEven Even nonce previously generated by TPM to cover inputs
_IN_PARAM TPM_NONCE nonceOdd Nonce generated by system associated with authHandle
_IN_PARAM BOOL continueAuthSession The continue use flag for the authorization session handle
_IN_PARAM TPM_AUTHDATA privAuth The authorization session digest for inputs and keyHandle. HMAC key: key -> usageAuth.
_OUT_PARAM TPM_TAG tag TPM_TAG_RSP_AUTH1_COMMAND
_OUT_PARAM UINT32 paramSize Total number of output bytes including paramSize and tag
_OUT_PARAM TPM_RESULT returnCode The return code of the operation.
_OUT_PARAM TPM_PCR_INFO_SHORT pcrData The value created and signed for the quote
_OUT_PARAM UINT32 versionInfoSize Size of the version info
_OUT_PARAM TPM_CAP_VERSION_INFO versionInfo The version info
_OUT_PARAM UINT32 sigSize The used size of the output area for the signature
_OUT_PARAM BYTE[] sig The signed data blob.
_OUT_PARAM TPM_NONCE nonceEven Even nonce newly generated by TPM to cover outputs
_OUT_PARAM BOOL continueAuthSession Continue use flag, TRUE if handle is still active
_OUT_PARAM TPM_AUTHDATA resAuth The authorization session digest for the returned parameters. HMAC key: Key -> usageAuth.

_TPM_COMMAND TPM_ChangeAuth
_COMMENT The TPM_ChangeAuth command allows the owner of an entity to change the AuthData for the entity. This command cannot invalidate the old entity. Therefore, the authorization change is only effective if the application can guarantee that the old entity can be securely destroyed. If not, two valid entities will exist, one with the old and one with the new authorization secret. If this command is delegated, the delegated party can expand its key use privileges. That party can create a copy of the key with known authorization, and it can then use the key without any ordinal restrictions. TPM_ChangeAuth requires the encryption of one parameter (“NewAuth”). For the sake of uniformity with other commands that require the encryption of more than one parameter, the parameters used for used encryption are generated from the authLastNonceEven (created during the OSAP session), nonceOdd, and the session shared secret. The parameter list to this command must always include two authorization sessions, regardless of the state of authDataUsage for the respective keys.
_IN_PARAM TPM_TAG tag TPM_TAG_RQU_AUTH2_COMMAND
_IN_PARAM UINT32 paramSize Total number of input bytes including paramSize and tag
_IN_PARAM TPM_COMMAND_CODE ordinal Command ordinal: TPM_ORD_ChangeAuth
_IN_PARAM TPM_KEY_HANDLE parentHandle Handle of the parent key to the entity.
_IN_PARAM TPM_PROTOCOL_ID protocolID The protocol in use.
_IN_PARAM TPM_ENCAUTH newAuth The encrypted new AuthData for the entity
_IN_PARAM TPM_ENTITY_TYPE entityType The type of entity to be modified
_IN_PARAM UINT32 encDataSize The size of the encData parameter
_IN_PARAM BYTE[] encData The encrypted entity that is to be modified.
_IN_PARAM TPM_AUTHHANDLE parentAuthHandle The authorization session handle used for the parent key. H1
_IN_PARAM TPM_NONCE authLastNonceEven Even nonce previously generated by TPM to cover inputs H1
_IN_PARAM TPM_NONCE nonceOdd Nonce generated by system associated with parentAuthHandle H1
_IN_PARAM BOOL continueAuthSession Ignored, parentAuthHandle is always terminated.
_IN_PARAM TPM_AUTHDATA parentAuth The authorization session digest for inputs and parentHandle. HMAC key: parentKey.usageAuth.
_IN_PARAM TPM_AUTHHANDLE entityAuthHandle The authorization session handle used for the encrypted entity. The session type MUST be OIAP H2
_IN_PARAM TPM_NONCE entitylastNonceEven Even nonce previously generated by TPM H2
_IN_PARAM TPM_NONCE entitynonceOdd Nonce generated by system associated with entityAuthHandle H2
_IN_PARAM BOOL continueEntitySession Ignored, entityAuthHandle is always terminated.
_IN_PARAM TPM_AUTHDATA entityAuth The authorization session digest for the inputs and encrypted entity. HMAC key: entity.usageAuth.
_OUT_PARAM TPM_TAG tag TPM_TAG_RSP_AUTH2_COMMAND
_OUT_PARAM UINT32 paramSize Total number of output bytes including paramSize and tag
_OUT_PARAM TPM_RESULT returnCode The return code of the operation. See section 4.3.
_OUT_PARAM UINT32 outDataSize The used size of the output area for outData
_OUT_PARAM BYTE[] outData The modified, encrypted entity. H1
_OUT_PARAM TPM_NONCE nonceEven Even nonce newly generated by TPM to cover outputs H1
_OUT_PARAM BOOL continueAuthSession Continue use flag, fixed value of FALSE
_OUT_PARAM TPM_AUTHDATA resAuth The authorization session digest for the returned parameters and parentHandle. HMAC key: parentKey.usageAuth.
_OUT_PARAM TPM_NONCE entityNonceEven Even nonce newly generated by TPM to cover entity H2 H2
_OUT_PARAM BOOL continueEntitySession Continue use flag, fixed value of FALSE
_OUT_PARAM TPM_AUTHDATA entityAuth The authorization session digest for the returned parameters and entity. HMAC key: entity.usageAuth, the original and not the new auth value

_TPM_COMMAND TPM_ChangeAuthOwner
_COMMENT The TPM_ChangeAuthOwner command allows the owner of an entity to change the AuthData for the TPM Owner or the SRK. This command requires authorization from the current TPM Owner to execute. TPM's targeted for an environment (e.g. a server) with long lasting sessions should not invalidate all sessions.
_IN_PARAM TPM_TAG tag TPM_TAG_RQU_AUTH1_COMMAND
_IN_PARAM UINT32 paramSize Total number of input bytes including paramSize and tag
_IN_PARAM TPM_COMMAND_CODE ordinal Command ordinal: TPM_ORD_ChangeAuthOwner
_IN_PARAM TPM_PROTOCOL_ID protocolID The protocol in use.
_IN_PARAM TPM_ENCAUTH newAuth The encrypted new AuthData for the entity
_IN_PARAM TPM_ENTITY_TYPE entityType The type of entity to be modified
_IN_PARAM TPM_AUTHHANDLE ownerAuthHandle The authorization session handle used for the TPM Owner.
_IN_PARAM TPM_NONCE authLastNonceEven Even nonce previously generated by TPM to cover inputs
_IN_PARAM TPM_NONCE nonceOdd Nonce generated by system associated with ownerAuthHandle
_IN_PARAM BOOL continueAuthSession Continue use flag the TPM ignores this value
_IN_PARAM TPM_AUTHDATA ownerAuth The authorization session digest for inputs and ownerHandle. HMAC key: ownerAuth.
_OUT_PARAM TPM_TAG tag TPM_TAG_RSP_AUTH1_COMMAND
_OUT_PARAM UINT32 paramSize Total number of output bytes including paramSize and tag
_OUT_PARAM TPM_RESULT returnCode The return code of the operation.
_OUT_PARAM TPM_NONCE nonceEven Even nonce newly generated by TPM to cover outputs
_OUT_PARAM BOOL continueAuthSession Continue use flag, fixed value of FALSE
_OUT_PARAM TPM_AUTHDATA resAuth The authorization session digest for the returned parameters and ownerHandle. HMAC key: ownerAuth, the original value and not the new auth value

_TPM_COMMAND TPM_OIAP
_IN_PARAM TPM_TAG tag TPM_TAG_RQU_COMMAND
_IN_PARAM UINT32 paramSize Total number of input bytes including paramSize and tag
_IN_PARAM TPM_COMMAND_CODE ordinal Command ordinal: TPM_ORD_OIAP.
_OUT_PARAM TPM_TAG tag TPM_TAG_RSP_COMMAND
_OUT_PARAM UINT32 paramSize Total number of output bytes including paramSize and tag
_OUT_PARAM TPM_RESULT returnCode The return code of the operation.
_OUT_PARAM TPM_AUTHHANDLE authHandle Handle that TPM creates that points to the authorization state.
_OUT_PARAM TPM_NONCE nonceEven Nonce generated by TPM and associated with session.
_COMMENT This section describes the authorization-related actions of a TPM when it receives a command that has been authorized with the OIAP protocol. Many commands use OIAP authorization. The following description is therefore necessarily abstract.

_TPM_COMMAND TPM_OSAP
_COMMENT The TPM_OSAP command creates the authorization session handle, the shared secret and generates nonceEven and nonceEvenOSAP.
_IN_PARAM TPM_TAG tag TPM_TAG_RQU_COMMAND
_IN_PARAM UINT32 paramSize Total number of input bytes including paramSize and tag
_IN_PARAM TPM_COMMAND_CODE ordinal Command ordinal: TPM_ORD_OSAP.
_IN_PARAM TPM_ENTITY_TYPE entityType The type of entity in use
_IN_PARAM UINT32 entityValue The selection value based on entityType, e.g. a keyHandle #
_IN_PARAM TPM_NONCE nonceOddOSAP The nonce generated by the caller associated with the shared secret.
_OUT_PARAM TPM_TAG tag TPM_TAG_RSP_COMMAND
_OUT_PARAM UINT32 paramSize Total number of output bytes including paramSize and tag
_OUT_PARAM TPM_RESULT returnCode The return code of the operation.
_OUT_PARAM TPM_AUTHHANDLE authHandle Handle that TPM creates that points to the authorization state.
_OUT_PARAM TPM_NONCE nonceEven Nonce generated by TPM and associated with session.
_OUT_PARAM TPM_NONCE nonceEvenOSAP Nonce generated by TPM and associated with shared secret.

_TPM_COMMAND TPM_DSAP
_COMMENT The TPM_DSAP command creates the authorization session handle using a delegated AuthData value passed into the command as an encrypted blob or from the internal delegation table. It can be used to start an authorization session for a user key or the owner. As in TPM_OSAP, it generates a shared secret and generates nonceEven and nonceEvenOSAP.
_IN_PARAM TPM_TAG tag TPM_TAG_RQU_COMMAND
_IN_PARAM UINT32 paramSize Total number of input bytes including paramSize and tag
_IN_PARAM TPM_COMMAND_CODE ordinal Command ordinal: TPM_ORD_DSAP.
_IN_PARAM TPM_ENTITY_TYPE entityType The type of delegation information to use
_IN_PARAM TPM_KEY_HANDLE keyHandle Key for which delegated authority corresponds, or 0 if delegated owner activity. Only relevant if entityValue equals TPM_DELEGATE_KEY_BLOB
_IN_PARAM TPM_NONCE nonceOddDSAP The nonce generated by the caller associated with the shared secret.
_IN_PARAM UINT32 entityValueSize The size of entityValue.
_IN_PARAM BYTE [ ] entityValue Either TPM_DELEGATE_KEY_BLOB or TPM_DELEGATE_OWNER_BLOB or index MUST not be empty If entityType is TPM_ET_DEL_ROW then entityValue is a TPM_DELEGATE_INDEX
_OUT_PARAM TPM_TAG tag TPM_TAG_RSP_COMMAND
_OUT_PARAM UINT32 paramSize Total number of output bytes including paramSize and tag
_OUT_PARAM TPM_RESULT returnCode The return code of the operation.
_OUT_PARAM TPM_AUTHHANDLE authHandle Handle that TPM creates that points to the authorization state.
_OUT_PARAM TPM_NONCE nonceEven Nonce generated by TPM and associated with session.
_OUT_PARAM TPM_NONCE nonceEvenDSAP Nonce generated by TPM and associated with shared secret.

_TPM_COMMAND TPM_SetOwnerPointer
_COMMENT This command will set a reference to which secret the TPM will use when executing an owner secret related OIAP or OSAP session. This command should only be used to provide an owner delegation function for legacy code that does not itself support delegation. Normally, TPM_STCLEAR_DATA->ownerReference points to TPM_KH_OWNER, indicating that OIAP and OSAP sessions should use the owner authorization. This command allows ownerReference to point to an index in the delegation table, indicating that OIAP and OSAP sessions should use the delegation authorization. In use, a TSS supporting delegation would create and load the owner delegation and set the owner pointer to that delegation. From then on, a legacy TSS application would use its OIAP and OSAP sessions with the delegated owner authorization. Since this command is not authorized, the ownerReference is open to DoS attacks. Applications can attempt to recover from a failing owner authorization by resetting ownerReference to an appropriate value. This command intentionally does not clear OSAP sessions. A TPM 1.1 application gets the benefit of owner delegation, while the original owner can use a pre-existing OSAP session with the actual owner authorization.
_IN_PARAM TPM_TAG tag TPM_TAG_RQU_COMMAND
_IN_PARAM UINT32 paramSize Total number of input bytes including paramSize and tag
_IN_PARAM TPM_COMMAND_CODE ordinal Ordinal: TPM_ORD_SetOwnerPointer
_IN_PARAM TPM_ENTITY_TYPE entityType The type of entity in use
_IN_PARAM UINT32 entityValue The selection value based on entityType
_OUT_PARAM TPM_TAG tag TPM_TAG_RSP_COMMAND
_OUT_PARAM UINT32 paramSize Total number of output bytes
_OUT_PARAM TPM_RESULT returnCode The return code of the operation

_TPM_COMMAND TPM_Delegate_Manage
_COMMENT TPM_Delegate_Manage is the fundamental process for managing the Family tables, including enabling/disabling Delegation for a selected Family. Normally TPM_Delegate_Manage must be executed at least once (to create Family tables for a particular family) before any other type of Delegation command in that family can succeed. TPM_Delegate_Manage is authorized by the TPM Owner if an Owner is installed, because changing a table is a privileged Owner operation. If no Owner is installed, TPM_Delegate_Manage requires no privilege to execute. This does not disenfranchise an Owner, since there is no Owner, and simplifies loading of tables during platform manufacture or on first-boot. Burn-out of TPM non-volatile storage by inappropriate use is mitigated by the TPM’s normal limits on NV-writes in the absence of an Owner. Tables can be locked after loading, to prevent subsequent tampering, and only unlocked by the Owner, his delegate, or the act of removing the Owner (even if there is no Owner). TPM_Delegate_Manage command is customized by opCode: (1) TPM_FAMILY_ENABLE enables/disables use of a family and all the rows of the delegate table belonging to that family, (2) TPM_FAMILY_ADMIN can be used to prevent further management of the Tables until an Owner is installed, or until the Owner is removed from the TPM. (Note that the Physical Presence command TPM_ForceClear always enables further management, even if TPM_ForceClear is used when no Owner is installed.) (3) TPM_FAMILY_CREATE creates a new family. Sessions are invalidated even in this case because the lastFamilyID could wrap. (4) TPM_FAMILY_INVALIDATE invalidates an existing family. The TPM_SELFTEST_FAILED error code is returned because the familyRow has already been validated earlier. Failure here indicates a malfunction of the TPM. The rationale for Action 19.1 is that invalidating the family ID prevents the use of associated delegate rows, whether or not those delegate rows are themselves invalidated. Omitting the delegate row invalidation avoids an NV write.
_IN_PARAM TPM_TAG tag TPM_TAG_RQU_AUTH1_COMMAND
_IN_PARAM UINT32 paramSize Total number of input bytes including paramSize and tag
_IN_PARAM TPM_COMMAND_CODE ordinal Command ordinal: TPM_ORD_Delegate_Manage
_IN_PARAM TPM_FAMILY_ID familyID The familyID that is to be managed s
_IN_PARAM TPM_FAMILY_OPERATION opCode Operation to be performed by this command. s
_IN_PARAM UINT32 opDataSize Size in bytes of opData s
_IN_PARAM BYTE [ ] opData Data necessary to implement opCode
_IN_PARAM TPM_AUTHHANDLE authHandle The authorization session handle used for owner authentication.
_IN_PARAM TPM_NONCE authLastNonceEven Even nonce previously generated by TPM to cover inputs
_IN_PARAM TPM_NONCE nonceOdd Nonce generated by system associated with authHandle
_IN_PARAM BOOL continueAuthSession The continue use flag for the authorization session handle
_IN_PARAM TPM_AUTHDATA ownerAuth HMAC key: ownerAuth.
_OUT_PARAM TPM_TAG tag TPM_TAG_RSP_AUTH1_COMMAND
_OUT_PARAM UINT32 paramSize Total number of output bytes including paramSize and tag
_OUT_PARAM TPM_RESULT returnCode The return code of the operation
_OUT_PARAM UINT32 retDataSize Size in bytes of retData
_OUT_PARAM BYTE [ ] retData Returned data
_OUT_PARAM TPM_NONCE nonceEven Even nonce newly generated by TPM to cover outputs
_OUT_PARAM BOOL continueAuthSession Continue use flag, TRUE if handle is still active
_OUT_PARAM TPM_AUTHDATA resAuth HMAC key: ownerAuth.

_TPM_COMMAND TPM_Delegate_CreateKeyDelegation
_COMMENT This command delegates privilege to use a key by creating a blob that can be used by TPM_DSAP. There is no check for appropriateness of the key’s key usage against the key permission settings. If the key usage is incorrect, this command succeeds, but the delegated command will fail. These blobs CANNOT be used as input data for TPM_LoadOwnerDelegation because the internal TPM delegate table can store owner delegations only. (TPM_Delegate_CreateOwnerDelegation must be used to delegate Owner privilege.) The publicInfo -> familyID can specify a disabled family row. The family row is checked when the key delegation is used in a DSAP session, not when it is created.
_IN_PARAM TPM_TAG tag TPM_TAG_RQU_AUTH1_COMMAND
_IN_PARAM UINT32 paramSize Total number of input bytes including paramSize and tag
_IN_PARAM TPM_COMMAND_CODE ordinal Command ordinal: TPM_ORD_Delegate_CreateKeyDelegation.
_IN_PARAM TPM_KEY_HANDLE keyHandle The keyHandle identifier of a loaded key.
_IN_PARAM TPM_DELEGATE_PUBLIC publicInfo The public information necessary to fill in the blob
_IN_PARAM TPM_ENCAUTH delAuth The encrypted new AuthData for the blob. The encryption key is the shared secret from the authorization session protocol.
_IN_PARAM TPM_AUTHHANDLE authHandle The authorization session handle used for keyHandle authorization
_IN_PARAM TPM_NONCE authLastNonceEven Even nonce previously generated by TPM to cover inputs
_IN_PARAM TPM_NONCE nonceOdd Nonce generated by system associated with authHandle
_IN_PARAM BOOL continueAuthSession Ignored
_IN_PARAM TPM_AUTHDATA privAuth The authorization session digest that authorizes the use of keyHandle. HMAC key: key.usageAuth
_OUT_PARAM TPM_TAG tag TPM_TAG_RSP_AUTH1_COMMAND
_OUT_PARAM UINT32 paramSize Total number of output bytes including paramSize and tag
_OUT_PARAM TPM_RESULT returnCode The return code of the operation.
_OUT_PARAM UINT32 blobSize The length of the returned blob
_OUT_PARAM TPM_DELEGATE_KEY_BLOB blob The partially encrypted delegation information.
_OUT_PARAM TPM_NONCE nonceEven Even nonce newly generated by TPM to cover outputs
_OUT_PARAM BOOL continueAuthSession Continue use flag. Fixed value of FALSE
_OUT_PARAM TPM_AUTHDATA resAuth The authorization session digest for the returned parameters. HMAC key: key.usageAuth

_TPM_COMMAND TPM_Delegate_CreateOwnerDelegation
_COMMENT TPM_Delegate_CreateOwnerDelegation delegates the Owner’s privilege to use a set of command ordinals, by creating a blob. Such blobs can be used as input data for TPM_DSAP or TPM_Delegate_LoadOwnerDelegation. TPM_Delegate_CreateOwnerDelegation includes the ability to void all existing delegations (by incrementing the verification count) before creating the new delegation. This ensures that the new delegation will be the only delegation that can operate at Owner privilege in this family. This new delegation could be used to enable a security monitor (a local separate entity, or remote separate entity, or local host entity) to reinitialize a family and perhaps perform external verification of delegation settings. Normally the ordinals for a delegated security monitor would include TPM_Delegate_CreateOwnerDelegation (this command) in order to permit the monitor to create further delegations, and TPM_Delegate_UpdateVerification to reactivate some previously voided delegations. If the verification count is incremented and the new delegation does not delegate any privileges (to any ordinals) at all, or uses an authorisation value that is then discarded, this family’s delegations are all void and delegation must be managed using actual Owner authorisation. (TPM_Delegate_CreateKeyDelegation must be used to delegate privilege to use a key.)
_IN_PARAM TPM_TAG tag TPM_TAG_RQU_AUTH1_COMMAND
_IN_PARAM UINT32 paramSize Total number of input bytes including paramSize and tag
_IN_PARAM TPM_COMMAND_CODE ordinal Command ordinal: TPM_ORD_Delegate_CreateOwnerDelegation.
_IN_PARAM BOOL increment Flag dictates whether verificationCount will be incremented
_IN_PARAM TPM_DELEGATE_PUBLIC publicInfo The public parameters for the blob
_IN_PARAM TPM_ENCAUTH delAuth The encrypted new AuthData for the blob. The encryption key is the shared secret from the OSAP protocol.
_IN_PARAM TPM_AUTHHANDLE authHandle The authorization session handle TPM Owner authentication
_IN_PARAM TPM_NONCE authLastNonceEven Even nonce previously generated by TPM to cover inputs
_IN_PARAM TPM_NONCE nonceOdd Nonce generated by system associated with authHandle
_IN_PARAM BOOL continueAuthSession Ignored
_IN_PARAM TPM_AUTHDATA ownerAuth The authorization session digest. HMAC key:ownerAuth
_OUT_PARAM TPM_TAG tag TPM_TAG_RSP_AUTH1_COMMAND
_OUT_PARAM UINT32 paramSize Total number of output bytes including paramSize and tag
_OUT_PARAM TPM_RESULT returnCode The return code of the operation.
_OUT_PARAM UINT32 blobSize The length of the returned blob
_OUT_PARAM TPM_DELEGATE_OWNER_BLOB blob The partially encrypted delegation information.
_OUT_PARAM TPM_NONCE nonceEven Even nonce newly generated by TPM to cover outputs
_OUT_PARAM BOOL continueAuthSession Continue use flag. Fixed value of FALSE
_OUT_PARAM TPM_AUTHDATA resAuth The authorization session digest for the returned parameters. HMAC key: ownerAuth

_TPM_COMMAND TPM_Delegate_LoadOwnerDelegation
_COMMENT This command loads a delegate table row blob into a non-volatile delegate table row. TPM_Delegate_LoadOwnerDelegation can be used during manufacturing or on first boot (when no Owner is installed), or after an Owner is installed. If an Owner is installed, TPM_Delegate_LoadOwnerDelegation requires Owner authorisation, and sensitive information must be encrypted. Burn-out of TPM non-volatile storage by inappropriate use is mitigated by the TPM’s normal limits on NV-writes in the absence of an Owner. Tables can be locked after loading using TPM_Delegate_Manage, to prevent subsequent tampering. A management system outside the TPM is expected to manage the delegate table rows stored on the TPM, and can overwrite any previously stored data. There is no way to explicitly delete a delegation entry. A new entry can overwrite an invalid entry. This command cannot be used to load key delegation blobs into the TPM
_IN_PARAM TPM_TAG tag TPM_TAG_RQU_AUTH1_COMMAND
_IN_PARAM UINT32 paramSize Total number of input bytes incl. paramSize and tag
_IN_PARAM TPM_COMMAND_CODE ordinal Ordinal: TPM_ORD_Delegate_LoadOwnerDelegation
_IN_PARAM TPM_DELEGATE_INDEX index The index of the delegate row to be written
_IN_PARAM UINT32 blobSize The size of the delegate blob
_IN_PARAM TPM_DELEGATE_OWNER_BLOB blob Delegation information, including encrypted portions as appropriate
_IN_PARAM TPM_AUTHHANDLE authHandle The authorization session handle TPM Owner authentication
_IN_PARAM TPM_NONCE authLastNonceEven Even nonce previously generated by TPM to cover inputs
_IN_PARAM TPM_NONCE nonceOdd Nonce generated by system associated with authHandle
_IN_PARAM BOOL continueAuthSession The continue use flag for the authorization session handle
_IN_PARAM TPM_AUTHDATA ownerAuth The authorization session digest. HMAC key:ownerAuth
_OUT_PARAM TPM_TAG tag TPM_TAG_RSP_AUTH1_COMMAND
_OUT_PARAM UINT32 paramSize Total number of output bytes
_OUT_PARAM TPM_RESULT returnCode The return code of the operation
_OUT_PARAM TPM_NONCE nonceEven Even nonce newly generated by TPM to cover outputs
_OUT_PARAM BOOL continueAuthSession Continue use flag, TRUE if handle is still active
_OUT_PARAM TPM_AUTHDATA resAuth Authorization HMAC key: ownerAuth.

_TPM_COMMAND TPM_Delegate_ReadTable
_COMMENT This command reads from the TPM the public contents of the family and delegate tables that are stored on the TPM. Such data is required during external verification of tables. There are no restrictions on the execution of this command; anyone can read this information regardless of the state of the PCRs, regardless of whether they know any specific AuthData value and regardless of whether or not the enable and admin bits are set one way or the other.
_IN_PARAM TPM_TAG tag TPM_TAG_RQU_COMMAND
_IN_PARAM UINT32 paramSize Total number of input bytes including paramSize and tag
_IN_PARAM TPM_COMMAND_CODE ordinal Command ordinal: TPM_ORD_Delegate_ReadTable
_OUT_PARAM TPM_TAG tag TPM_TAG_RSP_COMMAND
_OUT_PARAM UINT32 paramSize Total number of output bytes including paramSize and tag
_OUT_PARAM TPM_RESULT returnCode The return code of the operation
_OUT_PARAM UINT32 familyTableSize Size in bytes of familyTable
_OUT_PARAM BYTE [ ] familyTable Array of TPM_FAMILY_TABLE_ENTRY elements
_OUT_PARAM UINT32 delegateTableSize Size in bytes of delegateTable
_OUT_PARAM BYTE[] delegateTable Array of TPM_DELEGATE_INDEX and TPM_DELEGATE_PUBLIC elements

_TPM_COMMAND TPM_Delegate_UpdateVerification
_COMMENT TPM_UpdateVerification sets the verificationCount in an entity (a blob or a delegation row) to the current family value, in order that the delegations represented by that entity will continue to be accepted by the TPM.
_IN_PARAM TPM_TAG tag TPM_TAG_RQU_AUTH1_COMMAND
_IN_PARAM UINT32 paramSize Total number of input bytes including paramSize and tag
_IN_PARAM TPM_COMMAND_CODE ordinal Command ordinal: TPM_ORD_Delegate_UpdateVerification
_IN_PARAM UINT32 inputSize The size of inputData
_IN_PARAM BYTE inputData
_IN_PARAM TPM_DELEGATE_KEY_BLOB or TPM_DELEGATE_OWNER_BLOB or TPM_DELEGATE_INDEX
_IN_PARAM TPM_AUTHHANDLE authHandle The authorization session handle used for owner authentication.
_IN_PARAM TPM_NONCE authLastNonceEven Even nonce previously generated by TPM to cover inputs
_IN_PARAM TPM_NONCE nonceOdd Nonce generated by system associated with authHandle
_IN_PARAM BOOL continueAuthSession The continue use flag for the authorization session handle
_IN_PARAM TPM_AUTHDATA ownerAuth Authorization HMAC key: ownerAuth.
_OUT_PARAM TPM_TAG tag TPM_TAG_RSP_AUTH1_COMMAND
_OUT_PARAM UINT32 paramSize Total number of output bytes including paramSize and tag
_OUT_PARAM TPM_RESULT returnCode The return code of the operation
_OUT_PARAM UINT32 outputSize The size of the output
_OUT_PARAM BYTE outputData
_OUT_PARAM TPM_DELEGATE_KEY_BLOB or TPM_DELEGATE_OWNER_BLOB
_OUT_PARAM TPM_NONCE nonceEven Even nonce newly generated by TPM to cover outputs
_OUT_PARAM BOOL continueAuthSession Continue use flag, TRUE if handle is still active
_OUT_PARAM TPM_AUTHDATA resAuth The authorization session digest for the returned parameters. HMAC key: ownerAuth.

_TPM_COMMAND TPM_Delegate_VerifyDelegation
_COMMENT TPM_VerifyDelegation interprets a delegate blob and returns success or failure, depending on whether the blob is currently valid. The delegate blob is NOT loaded into the TPM.
_IN_PARAM TPM_TAG tag TPM_TAG_RQU_COMMAND
_IN_PARAM UINT32 paramSize Total number of input bytes including paramSize and tag
_IN_PARAM TPM_COMMAND_CODE ordinal Command ordinal, TPM_ORD_Delegate_VerifyDelegation
_IN_PARAM UINT32 delegationSize The length of the delegated information blob
_IN_PARAM BYTE[] delegation
_IN_PARAM TPM_DELEGATE_KEY_BLOB or TPM_DELEGATE_OWNER_BLOB
_OUT_PARAM TPM_TAG tag TPM_TAG_RSP_COMMAND
_OUT_PARAM UINT32 paramSize Total number of output bytes including paramSize and tag
_OUT_PARAM TPM_RESULT returnCode The return code of the operation.
_COMMENT Storage This section handles the allocation and use of the TPM non-volatile storage.

_TPM_COMMAND TPM_NV_DefineSpace
_COMMENT This establishes the space necessary for the indicated index. The definition will include the access requirements for writing and reading the area. Previously defined space at the index and new size is non-zero (and space is available, etc.) –> redefine the index No previous space at the index and new size is non-zero (and space is available, etc.)-> define the index Previously defined space at the index and new size is 0 -> delete the index No previous space at the index and new size is 0 -> error The space definition size does not include the area needed to manage the space. Setting TPM_PERMANENT_FLAGS -> nvLocked TRUE when it is already TRUE is not an error.
_IN_PARAM TPM_TAG tag TPM_TAG_RQU_AUTH1_COMMAND
_IN_PARAM UINT32 paramSize Total number of input bytes including paramSize and tag
_IN_PARAM TPM_COMMAND_CODE ordinal Ordinal, TPM_ORD_NV_DefineSpace
_IN_PARAM TPM_NV_DATA_PUBLIC pubInfo The public parameters of the NV area
_IN_PARAM TPM_ENCAUTH encAuth The encrypted AuthData, only valid if the attributes require subsequent authorization
_IN_PARAM TPM_AUTHHANDLE authHandle The authorization session handle used for ownerAuth
_IN_PARAM TPM_NONCE authLastNonceEven Even nonce previously generated by TPM to cover inputs
_IN_PARAM TPM_NONCE nonceOdd Nonce generated by system associated with authHandle
_IN_PARAM BOOL continueAuthSession The continue use flag for the authorization session handle
_IN_PARAM TPM_AUTHDATA ownerAuth The authorization session digest HMAC key: ownerAuth
_OUT_PARAM TPM_TAG tag TPM_TAG_RSP_AUTH1_COMMAND
_OUT_PARAM UINT32 paramSize Total number of output bytes including paramSize and tag
_OUT_PARAM TPM_RESULT returnCode The return code of the operation.
_OUT_PARAM TPM_NONCE nonceEven Even nonce newly generated by TPM to cover outputs
_OUT_PARAM BOOL continueAuthSession Continue use flag, fixed to FALSE
_OUT_PARAM TPM_AUTHDATA ownerAuth The authorization session digest HMAC key: ownerAuth

_TPM_COMMAND TPM_NV_WriteValue
_COMMENT This command writes the value to a defined area. The write can be TPM Owner authorized or unauthorized and protected by other attributes and will work when no TPM Owner is present. The action setting bGlobalLock to TRUE is intentionally before the action checking the owner authorization. This allows code (e.g., a BIOS) to lock NVRAM without knowing the owner authorization. The DIR (TPM_NV_INDEX_DIR) has the attributes TPM_NV_PER_OWNERWRITE and TPM_NV_WRITEALL. Certain platform manufacturers or software might require specific error handling in Action Owner authorization is not required when nvLocked is FALSE. If the host does send owner authorization, Action 20.2 indicates that it should be correct, since some TPM implementations may validate it.
_IN_PARAM TPM_TAG tag TPM_TAG_RQU_AUTH1_COMMAND
_IN_PARAM UINT32 paramSize Total number of input bytes including paramSize and tag
_IN_PARAM TPM_COMMAND_CODE ordinal Ordinal, TPM_ORD_NV_WriteValue
_IN_PARAM TPM_NV_INDEX nvIndex The index of the area to set
_IN_PARAM UINT32 offset The offset into the NV Area
_IN_PARAM UINT32 dataSize The size of the data parameter
_IN_PARAM BYTE[] data The data to set the area to
_IN_PARAM TPM_AUTHHANDLE authHandle The authorization session handle used for TPM Owner
_IN_PARAM TPM_NONCE authLastNonceEven Even nonce previously generated by TPM to cover inputs
_IN_PARAM TPM_NONCE authNonceOdd Nonce generated by caller
_IN_PARAM BOOL continueAuthSession The continue use flag for the authorization session handle
_IN_PARAM TPM_AUTHDATA ownerAuth The authorization session digest HMAC key: ownerAuth
_OUT_PARAM TPM_TAG tag TPM_TAG_RSP_AUTH1_COMMAND
_OUT_PARAM UINT32 paramSize Total number of output bytes including paramSize and tag
_OUT_PARAM TPM_RESULT returnCode The return code of the operation.
_OUT_PARAM TPM_NONCE nonceEven Even nonce newly generated by TPM to cover outputs
_OUT_PARAM BOOL continueAuthSession Continue use flag, TRUE if handle is still active
_OUT_PARAM TPM_AUTHDATA ownerAuth The authorization session digest HMAC key: ownerAuth

_TPM_COMMAND TPM_NV_WriteValueAuth
_COMMENT This command writes to a previously defined area. The area must require authorization to write. Use this command when authorization other than the owner authorization is to be used. Otherwise, use TPM_NV_WriteValue. The Part 2 ordinal table indicates that TPM_NV_WriteValueAuth requires an owner present. This is normative, although it was a mistake.
_IN_PARAM TPM_TAG Tag TPM_TAG_RQU_AUTH1_COMMAND
_IN_PARAM UINT32 paramSize Total number of input bytes including paramSize and tag
_IN_PARAM TPM_COMMAND_CODE ordinal Ordinal, TPM_ORD_NV_WriteValueAuth
_IN_PARAM TPM_NV_INDEX nvIndex The index of the area to set
_IN_PARAM UINT32 offset The offset into the chunk
_IN_PARAM UINT32 dataSize The size of the data area
_IN_PARAM BYTE data The data to set the area to
_IN_PARAM TPM_AUTHHANDLE authHandle The authorization session handle used for NV element authorization
_IN_PARAM TPM_NONCE authLastNonceEven Even nonce previously generated by TPM to cover inputs
_IN_PARAM TPM_NONCE nonceOdd Nonce generated by system associated with authHandle
_IN_PARAM BOOL continueAuthSession The continue use flag for the authorization session handle
_IN_PARAM TPM_AUTHDATA authValue HMAC key: NV element auth value
_OUT_PARAM TPM_TAG tag TPM_TAG_RSP_AUTH1_COMMAND
_OUT_PARAM UINT32 paramSize Total number of output bytes including paramSize and tag
_OUT_PARAM TPM_RESULT returnCode The return code of the operation.
_OUT_PARAM TPM_NONCE nonceEven Even nonce newly generated by TPM to cover outputs
_OUT_PARAM BOOL continueAuthSession Continue use flag, TRUE if handle is still active
_OUT_PARAM TPM_AUTHDATA authValue HMAC key: NV element auth value

_TPM_COMMAND TPM_NV_ReadValue
_COMMENT Read a value from the NV store. This command uses optional owner authentication. Action 1 indicates that if the NV area is not locked then reading of the NV area continues without ANY authorization. This is intentional, and allows a platform manufacturer to set the NV areas, read them back, and then lock them all without having to install a TPM owner. Certain platform manufacturers or software might require specific error handling in Action Owner authorization is not required when nvLocked is FALSE. If the host does send owner authorization, Action 20.4 indicates that it should be correct, since some TPM implementations may validate it.
_IN_PARAM TPM_TAG tag TPM_TAG_RQU_AUTH1_COMMAND
_IN_PARAM UINT32 paramSize Total number of input bytes including paramSize and tag
_IN_PARAM TPM_COMMAND_CODE ordinal Ordinal, TPM_ORD_NV_ReadValue
_IN_PARAM TPM_NV_INDEX nvIndex The index of the area to set
_IN_PARAM UINT32 offset The offset into the area
_IN_PARAM UINT32 dataSize The size of the data area
_IN_PARAM TPM_AUTHHANDLE authHandle The authorization session handle used for TPM Owner authorization
_IN_PARAM TPM_NONCE authLastNonceEven Even nonce previously generated by TPM to cover inputs
_IN_PARAM TPM_NONCE authNonceOdd Nonce generated by caller
_IN_PARAM BOOL continueAuthSession The continue use flag for the authorization session handle
_IN_PARAM TPM_AUTHDATA ownerAuth HMAC key: ownerAuth
_OUT_PARAM TPM_TAG tag TPM_TAG_RSP_AUTH1_COMMAND
_OUT_PARAM UINT32 paramSize Total number of output bytes including paramSize and tag
_OUT_PARAM TPM_RESULT returnCode The return code of the operation.
_OUT_PARAM UINT32 dataSize The size of the data area
_OUT_PARAM BYTE[] data The data to set the area to
_OUT_PARAM TPM_NONCE nonceEven Even nonce newly generated by TPM to cover outputs
_OUT_PARAM BOOL continueAuthSession Continue use flag, TRUE if handle is still active
_OUT_PARAM TPM_AUTHDATA ownerAuth HMAC key: ownerAuth

_TPM_COMMAND TPM_NV_ReadValueAuth
_COMMENT This command requires that the read be authorized by a value set with the blob. The Part 2 ordinal table indicates that TPM_NV_ReadValueAuth requires an owner present. This is normative, although it was a mistake.
_IN_PARAM TPM_TAG tag TPM_TAG_RQU_AUTH1_COMMAND
_IN_PARAM UINT32 paramSize Total number of input bytes including paramSize and tag
_IN_PARAM TPM_COMMAND_CODE ordinal Ordinal, TPM_ORD_NV_ReadValueAuth
_IN_PARAM TPM_NV_INDEX nvIndex The index of the area to set UNIT32 offset The offset from the data area
_IN_PARAM UINT32 dataSize The size of the data area
_IN_PARAM TPM_AUTHHANDLE authHandle authThe auth handle for the NV element authorization
_IN_PARAM TPM_NONCE authLastNonceEven Even nonce previously generated by TPM to cover inputs
_IN_PARAM TPM_NONCE authNonceOdd Nonce generated by system associated with authHandle
_IN_PARAM BOOL authContinueSession The continue use flag for the authorization session handle
_IN_PARAM TPM_AUTHDATA authHmac HMAC key: nv element authorization
_OUT_PARAM TPM_TAG tag TPM_TAG_RSP_AUTH1_COMMAND
_OUT_PARAM UINT32 paramSize Total number of output bytes including paramSize and tag
_OUT_PARAM TPM_RESULT returnCode The return code of the operation.
_OUT_PARAM UINT32 dataSize The size of the data area
_OUT_PARAM BYTE[] data The data
_OUT_PARAM TPM_NONCE authNonceEven Even nonce newly generated by TPM to cover outputs
_OUT_PARAM BOOL authContinueSession Continue use flag, TRUE if handle is still active
_OUT_PARAM TPM_AUTHDATA authHmacOut HMAC key: nv element authorization
_COMMENT Three TPM_RT_CONTEXT session resources located in TPM_STANY_DATA work together to control session save and load: contextNonceSession, contextCount, and contextList[]. All three MUST initialized at TPM_Startup(ST_CLEAR) and TPM_Startup(ST_DEACTIVATED) and MAY be initialized at TPM_Startup(ST_STATE). Initializing invalidates all saved sessions. They MAY be restored by TPM_Startup(ST_STATE). This case would allow saved sessions to be loaded. The actual ST_STATE operation is reported by the TPM_RT_CONTEXT startup effect. TPM_SaveContext creates a contextBlob containing an encrypted contextNonceSession. The nonce is checked by TPM_LoadContext. So initializing contextNonceSession invalidates all saved contexts. The nonce is large and protected, making a replay infeasible. The contextBlob also contains a public but protected contextCount. The count increments for each saved contextBlob. The TPM also saves contextCount in contextList[]. The TPM validates contextBlob against the contextList[] during TPM_LoadContext. Since the contextList[] is finite, it limits the number of valid saved sessions. Since the contextCount cannot be allowed to wrap, it limits the total number of saved sessions. After a contextBlob is loaded, its contextCount entry is removed from contextList[]. This releases space in the context list for future entries. It also invalidates the contextBlob. So a saved contextBlob can be loaded only once. TPM_FlushSpecific can also specify a contextCount to be removed from the contextList[], allowing invalidation of an individual contextBlob. This is different from TPM_FlushSpecific specifying a session handle, which invalidates a loaded session, not a saved contextBlob.

_TPM_COMMAND TPM_KeyControlOwner
_COMMENT This command controls some attributes of keys that are stored within the TPM key cache. OwnerEvict: If this bit is set to true, this key remains in the TPM non-volatile storage through all TPM_Startup events. The only way to evict this key is for the TPM Owner to execute this command again, setting the owner control bit to false and then executing TPM_FlushSpecific. The key handle does not reference an authorized entity and is not validated. The check for two remaining key slots ensures that users can load the two keys required to execute many commands. Since only the owner can flush owner evict keys, non-owner commands could be blocked if this test was not performed.
_IN_PARAM TPM_TAG tag TPM_TAG_RQU_AUTH1_COMMAND
_IN_PARAM UINT32 paramSize Total number of input bytes incl. paramSize and tag
_IN_PARAM TPM_COMMAND_CODE ordinal Command ordinal: TPM_ORD_KeyControlOwner
_IN_PARAM TPM_KEY_HANDLE keyHandle The handle of a loaded key.
_IN_PARAM TPM_PUBKEY pubKey The public key associated with the loaded key
_IN_PARAM TPM_KEY_CONTROL bitName The name of the bit to be modified
_IN_PARAM BOOL bitValue The value to set the bit to
_IN_PARAM TPM_AUTHHANDLE authHandle The authorization session handle used for owner authentication.
_IN_PARAM TPM_NONCE authLastNonceEven Even nonce previously generated by TPM to cover inputs
_IN_PARAM TPM_NONCE nonceOdd Nonce generated by system associated with authHandle
_IN_PARAM BOOL continueAuthSession The continue use flag for the authorization session handle
_IN_PARAM TPM_AUTHDATA ownerAuth HMAC authorization: key ownerAuth
_OUT_PARAM TPM_TAG tag TPM_TAG_RSP_AUTH1_COMMAND
_OUT_PARAM UINT32 paramSize Total number of output bytes including paramSize and tag
_OUT_PARAM TPM_RESULT returnCode The return code of the operation.
_OUT_PARAM TPM_NONCE nonceEven Even nonce newly generated by TPM.
_OUT_PARAM BOOL continueAuthSession Continue use flag, TRUE if handle is still active
_OUT_PARAM TPM_AUTHDATA resAuth HMAC authorization: key ownerAuth

_TPM_COMMAND TPM_SaveContext
_COMMENT TPM_SaveContext saves a loaded resource outside the TPM. After successful execution of the command, the TPM automatically releases the internal memory for sessions but leaves keys in place. There is no assumption that a saved context blob is stored in a safe, protected area. Since the context blob can be loaded at any time, do not rely on TPM_SaveContext to restrict access to an entity such as a key. If use of the entity should be restricted, means such as authorization secrets or PCR’s should be used. In general, TPM_SaveContext can save a transport session. However, it cannot save an exclusive transport session, because any ordinal other than TPM_ExecuteTransport terminates the exclusive transport session. This action prevents the exclusive transport session from being saved and reloaded while intervening commands are hidden from the transport log.
_IN_PARAM TPM_TAG tag TPM_TAG_RQU_COMMAND
_IN_PARAM UINT32 paramSize Total number of input bytes including paramSize and tag
_IN_PARAM TPM_COMMAND_CODE ordinal Command ordinal: TPM_ORD_SaveContext
_IN_PARAM TPM_HANDLE handle Handle of the resource being saved.
_IN_PARAM TPM_RESOURCE_TYPE resourceType The type of resource that is being saved
_IN_PARAM BYTE[16] label Label for identification purposes
_IN_PARAM TPM_TAG tag TPM_TAG_RSP_COMMAND
_OUT_PARAM UINT32 paramSize Total number of output bytes including paramSize and tag
_OUT_PARAM TPM_RESULT returnCode The return code of the operation.
_OUT_PARAM UINT32 contextSize The actual size of the outgoing context blob
_OUT_PARAM TPM_CONTEXT_BLOB contextBlob The context blob

_TPM_COMMAND TPM_LoadContext
_COMMENT TPM_LoadContext loads into the TPM a previously saved context. The command returns a handle.
_IN_PARAM TPM_TAG tag TPM_TAG_RQU_COMMAND
_IN_PARAM UINT32 paramSize Total number of input bytes including paramSize and tag
_IN_PARAM TPM_COMMAND_CODE ordinal Command ordinal: TPM_ORD_LoadContext
_IN_PARAM TPM_HANDLE entityHandle The handle the TPM MUST use to locate the entity tied to the OSAP/DSAP session
_IN_PARAM BOOL keepHandle Indication if the handle MUST be preserved
_IN_PARAM UINT32 contextSize The size of the following context blob.
_IN_PARAM TPM_CONTEXT_BLOB contextBlob The context blob
_OUT_PARAM TPM_TAG tag TPM_TAG_RSP_COMMAND
_OUT_PARAM UINT32 paramSize Total number of output bytes including paramSize and tag
_OUT_PARAM TPM_RESULT returnCode The return code of the operation.
_OUT_PARAM TPM_HANDLE handle The handle assigned to the resource after it has been successfully loaded.
_COMMENT The TPM has numerous resources held inside of the TPM that may need eviction. The need for eviction occurs when the number or resources in use by the TPM exceed the available space. For resources that are hard to reload (i.e. keys tied to PCR values) the outside entity should first perform a context save before evicting items. In version 1.1 there were separate commands to evict separate resource types. This new command set uses the resource types defined for context saving and creates a generic command that will evict all resource types.

_TPM_COMMAND TPM_FlushSpecific
_COMMENT TPM_FlushSpecific flushes from the TPM a specific handle.
_IN_PARAM TPM_TAG tag TPM_TAG_RQU_COMMAND
_IN_PARAM UINT32 paramSize Total number of input bytes including paramSize and tag
_IN_PARAM TPM_COMMAND_CODE ordinal Command ordinal: TPM_ORD_FlushSpecific
_IN_PARAM TPM_HANDLE handle The handle of the item to flush
_IN_PARAM TPM_RESOURCE_TYPE resourceType The type of resource that is being flushed
_OUT_PARAM TPM_TAG tag TPM_TAG_RSP_COMMAND
_OUT_PARAM UINT32 paramSize Total number of output bytes including paramSize and tag
_OUT_PARAM TPM_RESULT returnCode The return code of the operation
_COMMENT The TPM timing ticks are always available for use. The association of timing ticks to actual time is a protocol that occurs outside of the TPM. See the design document for details. The setting of the clock type variable is a one time operation that allows the TPM to be configured to the type of platform that is installed on. The ability for the TPM to continue to increment the timer ticks across power cycles of the platform is a TPM and platform manufacturer decision.

_TPM_COMMAND TPM_GetTicks
_COMMENT This command returns the current tick count of the TPM.
_IN_PARAM TPM_TAG tag TPM_TAG_RQU_COMMAND
_IN_PARAM UINT32 paramSize Total number of input bytes including paramSize and tag
_IN_PARAM TPM_COMMAND_CODE ordinal Ordinal: TPM_ORD_GetTicks
_OUT_PARAM TPM_TAG tag TPM_TAG_RSP_COMMAND
_OUT_PARAM UINT32 paramSize Total number of output bytes including paramSize and tag
_OUT_PARAM TPM_RESULT returnCode The return code of the operation.
_OUT_PARAM TPM_CURRENT_TICKS currentTime The current time held in the TPM

_TPM_COMMAND TPM_TickStampBlob
_COMMENT This command applies a time stamp to the passed blob. The TPM makes no representation regarding the blob merely that the blob was present at the TPM at the time indicated.
_IN_PARAM TPM_TAG tag TPM_TAG_RQU_AUTH1_COMMAND
_IN_PARAM UINT32 paramSize Total number of input bytes including paramSize and tag
_IN_PARAM TPM_COMMAND_CODE ordinal Ordinal, fixed value of TPM_ORD_TickStampBlob
_IN_PARAM TPM_KEY_HANDLE keyHandle The keyHandle identifier of a loaded key that can perform digital signatures.
_IN_PARAM TPM_NONCE antiReplay Anti replay value added to signature
_IN_PARAM TPM_DIGEST digestToStamp The digest to perform the tick stamp on
_IN_PARAM TPM_AUTHHANDLE authHandle The authorization session handle used for keyHandle authorization
_IN_PARAM TPM_NONCE authLastNonceEven Even nonce previously generated by TPM to cover inputs
_IN_PARAM TPM_NONCE nonceOdd Nonce generated by system associated with authHandle
_IN_PARAM BOOL continueAuthSession The continue use flag for the authorization session handle
_IN_PARAM TPM_AUTHDATA privAuth The authorization session digest that authorizes the use of keyHandle. HMAC key: key.usageAuth
_OUT_PARAM TPM_TAG tag TPM_TAG_RSP_AUTH1_COMMAND
_OUT_PARAM UINT32 paramSize Total number of output bytes including paramSize and tag
_OUT_PARAM TPM_RESULT returnCode The return code of the operation.
_OUT_PARAM TPM_CURRENT_TICKS currentTicks The current time according to the TPM
_OUT_PARAM UINT32 sigSize The length of the returned digital signature
_OUT_PARAM BYTE[] sig The resulting digital signature.
_OUT_PARAM TPM_NONCE nonceEven Even nonce newly generated by TPM to cover outputs
_OUT_PARAM BOOL continueAuthSession Continue use flag, TRUE if handle is still active
_OUT_PARAM TPM_AUTHDATA resAuth The authorization session digest for the returned parameters. HMAC key: key.usageAuth

_TPM_COMMAND TPM_EstablishTransport
_COMMENT This establishes the transport session. Depending on the attributes specified for the session this may establish shared secrets, encryption keys, and session logs. The session will be in use for by the TPM_ExecuteTransport command. The only restriction on what can happen inside of a transport session is that there is no “nesting” of sessions. It is permissible to perform operations that delete internal state and make the TPM inoperable.
_IN_PARAM TPM_TAG tag TPM_TAG_RQU_AUTH1_COMMAND
_IN_PARAM UINT32 paramSize Total number of input bytes including paramSize and tag
_IN_PARAM TPM_COMMAND_CODE ordinal Command ordinal: TPM_ORD_EstablishTransport
_IN_PARAM TPM_KEY_HANDLE encHandle The handle to the key that encrypted the blob
_IN_PARAM TPM_TRANSPORT_PUBLIC transPublic The public information describing the transport session
_IN_PARAM UINT32 secretSize The size of the secret Area
_IN_PARAM BYTE[] secret The encrypted secret area
_IN_PARAM TPM_AUTHHANDLE authHandle The authorization session handle used for keyHandle authorization
_IN_PARAM TPM_NONCE authLastNonceEven Even nonce previously generated by TPM to cover inputs
_IN_PARAM TPM_NONCE nonceOdd Nonce generated by system associated with authHandle
_IN_PARAM BOOL continueAuthSession The continue use flag for the authorization session handle
_IN_PARAM TPM_AUTHDATA keyAuth Authorization. HMAC key: encKey.usageAuth
_OUT_PARAM TPM_TAG tag TPM_TAG_RSP_AUTH1_COMMAND
_OUT_PARAM UINT32 paramSize Total number of output bytes including paramSize and tag
_OUT_PARAM TPM_RESULT returnCode The return code of the operation.
_OUT_PARAM TPM_TRANSHANDLE transHandle The handle for the transport session
_OUT_PARAM TPM_MODIFIER_INDICATOR locality The locality that called this command
_OUT_PARAM TPM_CURRENT_TICKS currentTicks The current tick count
_OUT_PARAM TPM_NONCE transNonceEven The even nonce in use for subsequent execute transport
_OUT_PARAM TPM_NONCE nonceEven Even nonce newly generated by TPM to cover outputs
_OUT_PARAM BOOL continueAuthSession Continue use flag, TRUE if handle is still active
_OUT_PARAM TPM_AUTHDATA resAuth Authorization. HMAC key: key.usageAuth

_TPM_COMMAND TPM_ExecuteTransport
_COMMENT Delivers a wrapped TPM command to the TPM where the TPM unwraps the command and then executes the command. TPM_ExecuteTransport uses the same rolling nonce paradigm as other authorized TPM commands. The even nonces start in TPM_EstablishTransport and change on each invocation of TPM_ExecuteTransport. The only restriction on what can happen inside of a transport session is that there is no “nesting” of sessions. It is permissible to perform operations that delete internal state and make the TPM inoperable. Because, in general, key handles are not logged, a digest of the corresponding public key is logged. In cases where the key handle is logged (e.g. TPM_OwnerReadInternalPub), the public key is also logged. The wrapped command is audited twice – once according to the actions of TPM_ExecuteTransport and once within the wrapped command itself according to the special rules for auditing a command wrapped in an encrypted transport session. The method of incrementing the symmetric key counter value is different from that used by some standard crypto libraries (e.g. openSSL, Java JCE) that increment the entire counter value. TPM users should be aware of this to avoid errors when the counter wraps.
_IN_PARAM TPM_TAG tag TPM_TAG_RQU_AUTH1_COMMAND
_IN_PARAM UINT32 paramSize Total number of input bytes including paramSize and tag
_IN_PARAM TPM_COMMAND_CODE ordinal Command ordinal: TPM_ORD_ExecuteTransport
_IN_PARAM UINT32 wrappedCmdSize Size of the wrapped command
_IN_PARAM BYTE[] wrappedCmd The wrapped command
_IN_PARAM TPM_TRANSHANDLE transHandle The transport session handle
_IN_PARAM TPM_NONCE transLastNonceEven Even nonce previously generated by TPM
_IN_PARAM TPM_NONCE transNonceOdd Nonce generated by caller
_IN_PARAM BOOL continueTransSession The continue use flag for the authorization session handle
_IN_PARAM TPM_AUTHDATA transAuth HMAC for transHandle key: transHandle -> authData
_OUT_PARAM TPM_TAG tag TPM_TAG_RSP_AUTH1_COMMAND
_OUT_PARAM UINT32 paramSize Total number of output bytes including paramSize and tag
_OUT_PARAM TPM_RESULT returnCode The return code of the ExecuteTransport command. This does not reflect the status of wrapped command.
_OUT_PARAM UINT64 currentTicks The current ticks when the command was executed
_OUT_PARAM TPM_MODIFIER_INDICATOR locality The locality that called this command
_OUT_PARAM UINT32 wrappedRspSize Size of the wrapped response
_OUT_PARAM BYTE[] wrappedRsp The wrapped response
_OUT_PARAM TPM_NONCE transNonceEven Even nonce newly generated by TPM
_OUT_PARAM BOOL continueTransSession The continue use flag for the session
_OUT_PARAM TPM_AUTHDATA transAuth HMAC for transHandle key: transHandle -> authData

_TPM_COMMAND TPM_ReleaseTransportSigned
_COMMENT This command completes the transport session. If logging for this session is turned on, then this command returns a digital signature of the hash of all operations performed during the session. This command serves no purpose if logging is turned off, and results in an error if attempted. This command uses two authorization sessions, the key that will sign the log and the authorization from the session. Having the session authorization proves that the requestor that is signing the log is the owner of the session. If this restriction is not put in then an attacker can close the log and sign using their own key. The hash of the session log includes the information associated with the input phase of execution of the TPM_ReleaseTransportSigned command. It cannot include the output phase information.
_IN_PARAM TPM_TAG tag TPM_TAG_RQU_AUTH2_COMMAND
_IN_PARAM UINT32 paramSize Total number of input bytes including paramSize and tag
_IN_PARAM TPM_COMMAND_CODE ordinal Command ordinal: TPM_ORD_ReleaseTransportSigned
_IN_PARAM TPM_KEY_HANDLE keyHandle Handle of a loaded key that will perform the signing
_IN_PARAM TPM_NONCE antiReplay Value provided by caller for anti-replay protection
_IN_PARAM TPM_AUTHHANDLE authHandle The authorization session to use key
_IN_PARAM TPM_NONCE authLastNonceEven Even nonce previously generated by TPM to cover inputs
_IN_PARAM TPM_NONCE authNonceOdd Nonce generated by system associated with authHandle
_IN_PARAM BOOL continueAuthSession The continue use flag for the authorization session handle
_IN_PARAM TPM_AUTHDATA keyAuth The authorization session digest that authorizes the use of key. HMAC key: key -> usageAuth
_IN_PARAM TPM_TRANSHANDLE transHandle The transport session handle
_IN_PARAM TPM_NONCE transLastNonceEven Even nonce in use by execute Transport
_IN_PARAM TPM_NONCE transNonceOdd Nonce supplied by caller for transport session
_IN_PARAM BOOL continueTransSession The continue use flag for the authorization session handle
_IN_PARAM TPM_AUTHDATA transAuth HMAC for transport session key: transHandle -> authData
_OUT_PARAM TPM_TAG tag TPM_TAG_RSP_AUTH2_COMMAND
_OUT_PARAM UINT32 paramSize Total number of output bytes including paramSize and tag
_OUT_PARAM TPM_RESULT returnCode The return code of the operation.
_OUT_PARAM TPM_MODIFIER_INDICATOR locality The locality that called this command
_OUT_PARAM TPM_CURRENT_TICKS currentTicks The current ticks when the command executed
_OUT_PARAM UINT32 signSize The size of the signature area
_OUT_PARAM BYTE[] signature The signature of the digest
_OUT_PARAM TPM_NONCE authNonceEven Even nonce newly generated by TPM
_OUT_PARAM BOOL continueAuthSession The continue use flag for the session
_OUT_PARAM TPM_AUTHDATA keyAuth HMAC: key -> usageAuth
_OUT_PARAM TPM_NONCE transNonceEven Even nonce newly generated by TPM
_OUT_PARAM BOOL continueTransSession The continue use flag for the session
_OUT_PARAM TPM_AUTHDATA transAuth HMAC: transHandle -> authData

_TPM_COMMAND TPM_CreateCounter
_COMMENT This command creates the counter but does not select the counter. Counter creation assigns an AuthData value to the counter and sets the counters original start value. The original start value is the current internal base value plus one. Setting the new counter to the internal base avoids attacks on the system that are attempting to use old counter values.
_IN_PARAM TPM_TAG tag TPM_TAG_RQU_AUTH1_COMMAND
_IN_PARAM UINT32 paramSize Total number of input bytes incl. paramSize and tag
_IN_PARAM TPM_COMMAND_CODE ordinal Command ordinal: TPM_ORD_CreateCounter
_IN_PARAM TPM_ENCAUTH encAuth The encrypted auth data for the new counter s
_IN_PARAM BYTE label Label to associate with counter
_IN_PARAM TPM_AUTHHANDLE authHandle The authorization session handle used for owner authentication.
_IN_PARAM TPM_NONCE authLastNonceEven Even nonce previously generated by TPM to cover inputs
_IN_PARAM TPM_NONCE nonceOdd Nonce generated by system associated with authHandle
_IN_PARAM BOOL continueAuthSession Ignored
_IN_PARAM TPM_AUTHDATA ownerAuth Authorization ownerAuth.
_OUT_PARAM TPM_TAG tag TPM_TAG_RSP_AUTH1_COMMAND
_OUT_PARAM UINT32 paramSize Total number of output bytes including paramSize and tag
_OUT_PARAM TPM_RESULT returnCode The return code of the operation.
_OUT_PARAM TPM_COUNT_ID countID The handle for the counter
_OUT_PARAM TPM_COUNTER_VALUE counterValue The starting counter value
_OUT_PARAM TPM_NONCE nonceEven Even nonce newly generated by TPM to cover outputs
_OUT_PARAM BOOL continueAuthSession Fixed value of FALSE
_OUT_PARAM TPM_AUTHDATA resAuth Authorization. HMAC key: ownerAuth.

_TPM_COMMAND TPM_IncrementCounter
_COMMENT This authorized command increments the indicated counter by one. Once a counter has been incremented then all subsequent increments must be for the same handle until a successful TPM_Startup(ST_CLEAR) is executed. The order for checking validation of the command parameters when no counter is active, keeps an attacker from creating a denial-of-service attack.
_IN_PARAM TPM_TAG tag TPM_TAG_RQU_AUTH1_COMMAND
_IN_PARAM UINT32 paramSize Total number of input bytes including paramSize and tag
_IN_PARAM TPM_COMMAND_CODE ordinal Command ordinal: TPM_ORD_IncrementCounter s
_IN_PARAM TPM_COUNT_ID countID The handle of a valid counter
_IN_PARAM TPM_AUTHHANDLE authHandle The authorization session handle used for counter authorization
_IN_PARAM TPM_NONCE authLastNonceEven Even nonce previously generated by TPM to cover inputs
_IN_PARAM TPM_NONCE nonceOdd Nonce generated by system associated with authHandle
_IN_PARAM BOOL continueAuthSession The continue use flag for the authorization session handle
_IN_PARAM TPM_AUTHDATA counterAuth The authorization session digest that authorizes the use of countID. HMAC key: countID -> authData
_OUT_PARAM TPM_TAG tag TPM_TAG_RSP_AUTH1_COMMAND
_OUT_PARAM UINT32 paramSize Total number of output bytes including paramSize and tag
_OUT_PARAM TPM_RESULT returnCode The return code of the operation.
_OUT_PARAM TPM_COUNTER_VALUE count The counter value
_OUT_PARAM TPM_NONCE nonceEven Even nonce newly generated by TPM to cover outputs
_OUT_PARAM BOOL continueAuthSession Continue use flag, TRUE if handle is still active
_OUT_PARAM TPM_AUTHDATA resAuth The authorization session digest for the returned parameters. HMAC key: countID -> authData

_TPM_COMMAND TPM_ReadCounter
_COMMENT Reading the counter provides the caller with the current number in the sequence.
_IN_PARAM TPM_TAG tag TPM_TAG_RQU_COMMAND
_IN_PARAM UINT32 paramSize Total number of input bytes incl. paramSize and tag
_IN_PARAM TPM_COMMAND_CODE ordinal Command ordinal: TPM_ORD_ReadCounter
_IN_PARAM TPM_COUNT_ID countID ID value of the counter
_OUT_PARAM TPM_TAG tag TPM_TAG_RSP_COMMAND
_OUT_PARAM UINT32 paramSize Total number of output bytes including paramSize and tag
_OUT_PARAM TPM_RESULT returnCode The return code of the operation.
_OUT_PARAM TPM_COUNTER_VALUE count The counter value

_TPM_COMMAND TPM_ReleaseCounter
_COMMENT This command releases a counter such that no reads or increments of the indicated counter will succeed.
_IN_PARAM TPM_TAG tag TPM_TAG_RQU_AUTH1_COMMAND
_IN_PARAM UINT32 paramSize Total number of input bytes including paramSize and tag
_IN_PARAM TPM_COMMAND_CODE ordinal Command ordinal: TPM_ORD_ReleaseCounter s
_IN_PARAM TPM_COUNT_ID countID ID value of the counter
_IN_PARAM TPM_AUTHHANDLE authHandle The authorization session handle used for countID authorization
_IN_PARAM TPM_NONCE authLastNonceEven Even nonce previously generated by TPM to cover inputs
_IN_PARAM TPM_NONCE nonceOdd Nonce associated with countID
_IN_PARAM BOOL continueAuthSession The continue use flag for the authorization session handle
_IN_PARAM TPM_AUTHDATA counterAuth The authorization session digest that authorizes the use of countID. HMAC key: countID -> authData
_OUT_PARAM TPM_TAG tag TPM_TAG_RSP_AUTH1_COMMAND
_OUT_PARAM UINT32 paramSize Total number of output bytes including paramSize and tag
_OUT_PARAM TPM_RESULT returnCode The return code of the operation.
_OUT_PARAM TPM_NONCE nonceEven Even nonce newly generated by TPM to cover outputs
_OUT_PARAM BOOL continueAuthSession Continue use flag, TRUE if handle is still active
_OUT_PARAM TPM_AUTHDATA resAuth The authorization session digest for the returned parameters. HMAC key: countID -> authData

_TPM_COMMAND TPM_ReleaseCounterOwner
_COMMENT This command releases a counter such that no reads or increments of the indicated counter will succeed.
_IN_PARAM TPM_TAG tag TPM_TAG_RQU_AUTH1_COMMAND
_IN_PARAM UINT32 paramSize Total number of input bytes including paramSize and tag
_IN_PARAM TPM_COMMAND_CODE ordinal Command ordinal: TPM_ORD_ReleaseCounterOwner s
_IN_PARAM TPM_COUNT_ID countID ID value of the counter
_IN_PARAM TPM_AUTHHANDLE authHandle The authorization session handle used for owner authentication
_IN_PARAM TPM_NONCE authLastNonceEven Even nonce previously generated by TPM to cover inputs
_IN_PARAM TPM_NONCE nonceOdd Nonce generated by system associated with authHandle
_IN_PARAM BOOL continueAuthSession The continue use flag for the authorization session handle
_IN_PARAM TPM_AUTHDATA ownerAuth The authorization session digest that authorizes the inputs. HMAC key: ownerAuth
_OUT_PARAM TPM_TAG tag TPM_TAG_RSP_AUTH1_COMMAND
_OUT_PARAM UINT32 paramSize Total number of output bytes including paramSize and tag
_OUT_PARAM TPM_RESULT returnCode The return code of the operation.
_OUT_PARAM TPM_NONCE nonceEven Even nonce newly generated by TPM to cover outputs
_OUT_PARAM BOOL continueAuthSession Continue use flag, TRUE if handle is still active
_OUT_PARAM TPM_AUTHDATA resAuth The authorization session digest for the returned parameters. HMAC key: ownerAuth

_TPM_COMMAND TPM_DAA_Join
_COMMENT TPM_DAA_Join is the process that establishes the DAA parameters in the TPM for a specific DAA issuing authority. outputSize and outputData are always included in the outParamDigest. This includes stage , where the outputData contains the DAA session handle.
_IN_PARAM TPM_TAG tag TPM_TAG_RQU_AUTH1_COMMAND
_IN_PARAM UINT32 paramSize Total number of input bytes incl. paramSize and tag
_IN_PARAM TPM_COMMAND_CODE ordinal Command ordinal: TPM_ORD_DAA_Join.
_IN_PARAM TPM_HANDLE handle Session handle
_IN_PARAM BYTE stage Processing stage of join
_IN_PARAM UINT32 inputSize0 Size of inputData0 for this stage of JOIN
_IN_PARAM BYTE[] inputData0 Data to be used by this capability
_IN_PARAM UINT32 inputSize1 Size of inputData1 for this stage of JOIN
_IN_PARAM BYTE[] inputData1 Data to be used by this capability
_IN_PARAM TPM_AUTHHANDLE authHandle The authorization session handle used for owner authentication H1
_IN_PARAM TPM_NONCE authLastNonceEven Even nonce previously generated by TPM to cover inputs H1
_IN_PARAM TPM_NONCE nonceOdd Nonce generated by system associated with authHandle H1
_IN_PARAM BOOL continueAuthSession Continue use flag, TRUE if handle is still active
_IN_PARAM TPM_AUTHDATA ownerAuth The authorization session digest for inputs and owner. HMAC key: ownerAuth.
_OUT_PARAM TPM_TAG tag TPM_TAG_RSP_AUTH1_COMMAND
_OUT_PARAM UINT32 paramSize Total number of output bytes incl. paramSize and tag
_OUT_PARAM TPM_RESULT returnCode The return code of the operation
_OUT_PARAM UINT32 outputSize Size of outputData
_OUT_PARAM BYTE[] outputData Data produced by this capability H1
_OUT_PARAM TPM_NONCE nonceEven Even nonce newly generated by TPM to cover outputs H1
_OUT_PARAM BOOL continueAuthSession Continue use flag, TRUE if handle is still active
_OUT_PARAM TPM_AUTHDATA resAuth Authorization HMAC key: ownerAuth.
_COMMENT . Variable DAA_Count a. In stage 0, DAA_Count denotes the length of the RSA key chain, which certifies the main DAA public key and which will be loaded in stage 1. It also denotes the number of times stage 1 is executed. b. In stage 3 the variable DAA_count denotes the actual DAA counter. It allows a DAA issuer to keep track of the number of times it has issued 'different' DAA credentials to the same platform. (The counter does not need to be equal to the actual number.)

_TPM_COMMAND TPM_DAA_Sign
_COMMENT outputSize and outputData are always included in the outParamDigest. This includes stage , where the outputData contains the DAA session handle.
_IN_PARAM TPM_TAG Tag TPM_TAG_RQU_AUTH1_COMMAND
_IN_PARAM UINT32 paramSize Total number of input bytes incl. paramSize and tag
_IN_PARAM TPM_COMMAND_CODE Ordinal Command ordinal: TPM_ORD_DAA_Sign
_IN_PARAM TPM_HANDLE handle Handle to the sign session
_IN_PARAM BYTE stage Stage of the sign process
_IN_PARAM UINT32 inputSize0 Size of inputData0 for this stage of DAA_Sign
_IN_PARAM BYTE[] inputData0 Data to be used by this capability
_IN_PARAM UINT32 inputSize1 Size of inputData1 for this stage of DAA_Sign
_IN_PARAM BYTE[] inputData1 Data to be used by this capability
_IN_PARAM TPM_AUTHHANDLE authHandle The authorization session handle used for owner authentication H1
_IN_PARAM TPM_NONCE authLastNonceEven Even nonce previously generated by TPM to cover inputs H1
_IN_PARAM TPM_NONCE nonceOdd Nonce generated by system associated with authHandle H1
_IN_PARAM BOOL continueAuthSession Continue use flag, TRUE if handle is still active
_IN_PARAM TPM_AUTHDATA ownerAuth The authorization session digest for inputs and owner. HMAC key: ownerAuth.
_OUT_PARAM TPM_TAG tag TPM_TAG_RSP_AUTH1_COMMAND
_OUT_PARAM UINT32 paramSize Total number of output bytes incl. paramSize and tag
_OUT_PARAM TPM_RESULT returnCode The return code of the operation
_OUT_PARAM UINT32 outputSize Size of outputData
_OUT_PARAM BYTE[] outputData Data produced by this capability H1
_OUT_PARAM TPM_NONCE nonceEven Even nonce newly generated by TPM to cover outputs H1
_OUT_PARAM BOOL continueAuthSession Continue use flag, TRUE if handle is still active
_OUT_PARAM TPM_AUTHDATA resAuth The authorization session digest for the returned parameters. HMAC key: ownerAuth.
_COMMENT commands This section covers the commands that were in version 1.1 but now have new functionality in other functions. The deprecated commands are still available in 1.2 but all new software should use the new functionality. There is no requirement that the deprecated commands work with new structures.
_COMMENT The key commands are deprecated as the new way to handle keys is to use the standard context commands. So TPM_EvictKey is now handled by TPM_FlushSpecific, TPM_Terminate_Handle by TPM_FlushSpecific.

_TPM_COMMAND TPM_EvictKey
_IN_PARAM TPM_TAG tag TPM_TAG_RQU_COMMAND
_IN_PARAM UINT32 paramSize Total number of input bytes including paramSize and tag
_IN_PARAM TPM_COMMAND_CODE ordinal Command ordinal: TPM_ORD_EvictKey
_IN_PARAM TPM_KEY_HANDLE evictHandle The handle of the key to be evicted.
_OUT_PARAM TPM_TAG tag TPM_TAG_RSP_COMMAND
_OUT_PARAM UINT32 paramSize Total number of output bytes including paramSize and tag
_OUT_PARAM TPM_RESULT returnCode The return code of the operation.

_TPM_COMMAND TPM_Terminate_Handle
_COMMENT This allows the TPM manager to clear out information in a session handle. The TPM may maintain the authorization session even though a key attached to it has been unloaded or the authorization session itself has been unloaded in some way. When a command is executed that requires this session, it is the responsibility of the external software to load both the entity and the authorization session information prior to command execution.
_IN_PARAM TPM_TAG tag TPM_TAG_RQU_COMMAND
_IN_PARAM UINT32 paramSize Total number of input bytes including paramSize and tag
_IN_PARAM TPM_COMMAND_CODE ordinal Command ordinal: TPM_ORD_Terminate_Handle.
_IN_PARAM TPM_AUTHHANDLE handle The handle to terminate
_OUT_PARAM TPM_TAG tag TPM_TAG_RSP_COMMAND
_OUT_PARAM UINT32 paramSize Total number of output bytes including paramSize and tag
_OUT_PARAM TPM_RESULT returnCode The return code of the operation.
_COMMENT The 1.1 context commands were written for specific resource types. The 1.2 commands are generic for all resource types. So the Savexxx commands are replaced by TPM_SaveContext and the LoadXXX commands by TPM_LoadContext.

_TPM_COMMAND TPM_SaveKeyContext
_COMMENT TPM_SaveKeyContext saves a loaded key outside the TPM. After creation of the key context blob the TPM automatically releases the internal memory used by that key. The format of the key context blob is specific to a TPM.
_IN_PARAM TPM_TAG tag TPM_TAG_RQU_COMMAND
_IN_PARAM UINT32 paramSize Total number of input bytes including paramSize and tag
_IN_PARAM TPM_COMMAND_CODE ordinal Command ordinal: TPM_ORD_SaveKeyContext
_IN_PARAM TPM_KEY_HANDLE keyHandle The key which will be kept outside the TPM
_OUT_PARAM TPM_TAG tag TPM_TAG_RSP_COMMAND
_OUT_PARAM UINT32 paramSize Total number of output bytes including paramSize and tag
_OUT_PARAM TPM_RESULT returnCode The return code of the operation.
_OUT_PARAM UINT32 keyContextSize The actual size of the outgoing key context blob. If the command fails the value will be 0
_OUT_PARAM BYTE[] keyContextBlob The key context blob.

_TPM_COMMAND TPM_LoadKeyContext
_COMMENT TPM_LoadKeyContext loads a key context blob into the TPM previously retrieved by a TPM_SaveKeyContext call. After successful completion the handle returned by this command can be used to access the key.
_IN_PARAM TPM_TAG tag TPM_TAG_RQU_COMMAND
_IN_PARAM UINT32 paramSize Total number of input bytes including paramSize and tag
_IN_PARAM TPM_COMMAND_CODE ordinal Command ordinal: TPM_ORD_LoadKeyContext
_IN_PARAM UINT32 keyContextSize The size of the following key context blob.
_IN_PARAM BYTE[] keyContextBlob The key context blob.
_OUT_PARAM TPM_TAG tag TPM_TAG_RSP_COMMAND
_OUT_PARAM UINT32 paramSize Total number of output bytes including paramSize and tag
_OUT_PARAM TPM_RESULT returnCode The return code of the operation.
_OUT_PARAM TPM_KEY_HANDLE keyHandle The handle assigned to the key after it has been successfully loaded.

_TPM_COMMAND TPM_SaveAuthContext
_COMMENT TPM_SaveAuthContext saves a loaded authorization session outside the TPM. After creation of the authorization context blob, the TPM automatically releases the internal memory used by that session. The format of the authorization context blob is specific to a TPM.
_IN_PARAM TPM_TAG tag TPM_TAG_RQU_COMMAND
_IN_PARAM UINT32 paramSize Total number of input bytes including paramSize and tag
_IN_PARAM TPM_COMMAND_CODE ordinal Command ordinal: TPM_ORD_SaveAuthContext
_IN_PARAM TPM_AUTHHANDLE authHandle Authorization session which will be kept outside the TPM
_OUT_PARAM TPM_TAG tag TPM_TAG_RSP_COMMAND
_OUT_PARAM UINT32 paramSize Total number of output bytes including paramSize and tag
_OUT_PARAM TPM_RESULT returnCode The return code of the operation.
_OUT_PARAM UINT32 authContextSize The actual size of the outgoing authorization context blob. If the command fails the value will be 0.
_OUT_PARAM BYTE[] authContextBlob The authorization context blob.

_TPM_COMMAND TPM_LoadAuthContext
_COMMENT TPM_LoadAuthContext loads an authorization context blob into the TPM previously retrieved by a TPM_SaveAuthContext call. After successful completion, the handle returned by this command can be used to access the authorization session.
_IN_PARAM TPM_TAG tag TPM_TAG_RQU_COMMAND
_IN_PARAM UINT32 paramSize Total number of input bytes including paramSize and tag
_IN_PARAM TPM_COMMAND_CODE ordinal Command ordinal: TPM_ORD_LoadAuthContext
_IN_PARAM UINT32 authContextSize The size of the following authorization context blob.
_IN_PARAM BYTE[] authContextBlob The authorization context blob.
_OUT_PARAM TPM_TAG tag TPM_TAG_RSP_COMMAND
_OUT_PARAM UINT32 paramSize Total number of output bytes including paramSize and tag
_OUT_PARAM TPM_RESULT returnCode The return code of the operation.
_OUT_PARAM TPM_KEY_HANDLE authHandle The handle assigned to the authorization session after it has been successfully loaded.
_COMMENT The DIR commands are replaced by the NV storage commands. The DIR [0] in 1.1 is now TPM_PERMANENT_DATA -> authDIR[0] and is always available for the TPM to use. It is accessed by DIR commands using dirIndex 0 and by NV commands using nvIndex TPM_NV_INDEX_DIR. If the TPM vendor supports additional DIR registers, the TPM vendor may return errors or provide vendor specific mappings for those DIR registers to NV storage locations.

_TPM_COMMAND TPM_DirWriteAuth
_COMMENT The TPM_DirWriteAuth operation provides write access to the Data Integrity Registers. DIRs are non-volatile memory registers held in a TPM-shielded location. Owner authentication is required to authorize this action. Access is also provided through the NV commands with nvIndex TPM_NV_INDEX_DIR. Owner authorization is not required when nvLocked is FALSE. Version 1.2 requires only one DIR. If the DIR named does not exist, the TPM_DirWriteAuth operation returns TPM_BADINDEX.
_IN_PARAM TPM_TAG tag TPM_TAG_RQU_AUTH1_COMMAND
_IN_PARAM UINT32 paramSize Total number of input bytes including paramSize and tag
_IN_PARAM TPM_COMMAND_CODE ordinal Command ordinal: TPM_ORD_DirWriteAuth.
_IN_PARAM TPM_DIRINDEX dirIndex Index of the DIR
_IN_PARAM TPM_DIRVALUE newContents New value to be stored in named DIR
_IN_PARAM TPM_AUTHHANDLE authHandle The authorization session handle used for command.
_IN_PARAM TPM_NONCE authLastNonceEven Even nonce previously generated by TPM to cover inputs
_IN_PARAM TPM_NONCE nonceOdd Nonce generated by system associated with authHandle
_IN_PARAM BOOL continueAuthSession The continue use flag for the authorization session handle
_IN_PARAM TPM_AUTHDATA ownerAuth The authorization session digest for inputs. HMAC key: ownerAuth.
_OUT_PARAM TPM_TAG tag TPM_TAG_RSP_AUTH1_COMMAND
_OUT_PARAM UINT32 paramSize Total number of output bytes including paramSize and tag
_OUT_PARAM TPM_RESULT returnCode The return code of the operation.
_OUT_PARAM TPM_NONCE nonceEven Even nonce newly generated by TPM to cover outputs
_OUT_PARAM BOOL continueAuthSession Continue use flag, TRUE if handle is still active
_OUT_PARAM TPM_AUTHDATA resAuth The authorization session digest for the returned parameters. HMAC key: ownerAuth.

_TPM_COMMAND TPM_DirRead
_COMMENT The TPM_DirRead operation provides read access to the DIRs. No authentication is required to perform this action because typically no cryptographically useful AuthData is available early in boot. TSS implementers may choose to provide other means of authorizing this action. Version 1.2 requires only one DIR. If the DIR named does not exist, the TPM_DirRead operation returns TPM_BADINDEX.
_IN_PARAM TPM_TAG tag TPM_TAG_RQU_COMMAND
_IN_PARAM UINT32 paramSize Total number of input bytes including paramSize and tag
_IN_PARAM TPM_COMMAND_CODE ordinal Command ordinal: TPM_ORD_DirRead.
_IN_PARAM TPM_DIRINDEX dirIndex Index of the DIR to be read
_OUT_PARAM TPM_TAG tag TPM_TAG_RSP_COMMAND
_OUT_PARAM UINT32 paramSize Total number of output bytes including paramSize and tag
_OUT_PARAM TPM_RESULT returnCode The return code of the operation.
_OUT_PARAM TPM_DIRVALUE dirContents The current contents of the named DIR
_COMMENT The change auth commands can be duplicated by creating a transport session with confidentiality and issuing the changeAuth command.

_TPM_COMMAND TPM_ChangeAuthAsymStart
_COMMENT The TPM_ChangeAuthAsymStart starts the process of changing AuthData for an entity. It sets up an OIAP session that must be retained for use by its twin TPM_ChangeAuthAsymFinish command. TPM_ChangeAuthAsymStart creates a temporary asymmetric public key “tempkey” to provide confidentiality for new AuthData to be sent to the TPM. TPM_ChangeAuthAsymStart certifies that tempkey was generated by a genuine TPM, by generating a certifyInfo structure that is signed by a TPM identity. The owner of that TPM identity must cooperate to produce this command, because TPM_ChangeAuthAsymStart requires authorization to use that identity. It is envisaged that tempkey and certifyInfo are given to the owner of the entity whose authorization is to be changed. That owner uses certifyInfo and a TPM_IDENTITY_CREDENTIAL to verify that tempkey was generated by a genuine TPM. This is done by verifying the TPM_IDENTITY_CREDENTIAL using the public key of a CA, verifying the signature on the certifyInfo structure with the public key of the identity in TPM_IDENTITY_CREDENTIAL, and verifying tempkey by comparing its digest with the value inside certifyInfo. The owner uses tempkey to encrypt the desired new AuthData and inserts that encrypted data in a TPM_ChangeAuthAsymFinish command, in the knowledge that only a TPM with a specific identity can interpret the new AuthData.
_IN_PARAM TPM_TAG tag TPM_TAG_RQU_AUTH1_COMMAND
_IN_PARAM UINT32 paramSize Total number of input bytes including paramSize and tag
_IN_PARAM TPM_COMMAND_CODE ordinal Command ordinal: TPM_ORD_ChangeAuthAsymStart.
_IN_PARAM TPM_KEY_HANDLE idHandle The keyHandle identifier of a loaded identity ID key s
_IN_PARAM TPM_NONCE antiReplay The nonce to be inserted into the certifyInfo structure
_IN_PARAM TPM_KEY_PARMS tempKey Structure contains all parameters of ephemeral key.
_IN_PARAM TPM_AUTHHANDLE authHandle The authorization session handle used for idHandle authorization.
_IN_PARAM TPM_NONCE authLastNonceEven Even nonce previously generated by TPM to cover inputs
_IN_PARAM TPM_NONCE nonceOdd Nonce generated by system associated with authHandle
_IN_PARAM BOOL continueAuthSession The continue use flag for the authorization session handle
_IN_PARAM TPM_AUTHDATA idAuth Authorization. HMAC key: idKey.usageAuth.
_OUT_PARAM TPM_TAG tag TPM_TAG_RSP_AUTH1_COMMAND
_OUT_PARAM UINT32 paramSize Total number of output bytes including paramSize and tag
_OUT_PARAM TPM_RESULT returnCode The return code of the operation.
_OUT_PARAM TPM_CERTIFY_INFO certifyInfo The certifyInfo structure that is to be signed.
_OUT_PARAM UINT32 sigSize The used size of the output area for the signature
_OUT_PARAM BYTE[] sig The signature of the certifyInfo parameter. s
_OUT_PARAM TPM_KEY_HANDLE ephHandle The keyHandle identifier to be used by ChangeAuthAsymFinish for the ephemeral key
_OUT_PARAM TPM_KEY tempKey Structure containing all parameters and public part of ephemeral key. TPM_KEY.encSize is set to 0.
_OUT_PARAM TPM_NONCE nonceEven Even nonce newly generated by TPM to cover outputs
_OUT_PARAM BOOL continueAuthSession Continue use flag, TRUE if handle is still active
_OUT_PARAM TPM_AUTHDATA resAuth Authorization. HMAC key: idKey.usageAuth.

_TPM_COMMAND TPM_ChangeAuthAsymFinish
_COMMENT The TPM_ChangeAuthAsymFinish command allows the owner of an entity to change the AuthData for the entity. The command requires the cooperation of the owner of the parent of the entity, since AuthData must be provided to use that parent entity. The command requires knowledge of the existing AuthData information and passes the new AuthData information. The newAuthLink parameter proves knowledge of existing AuthData information and new AuthData information. The new AuthData information “encNewAuth” is encrypted using the “tempKey” variable obtained via TPM_ChangeAuthAsymStart. A parent therefore retains control over a change in the AuthData of a child, but is prevented from knowing the new AuthData for that child. The changeProof parameter provides a proof that the new AuthData value was properly inserted into the entity. The inclusion of a nonce from the TPM provides an entropy source in the case where the AuthData value may be in itself be a low entropy value (hash of a password etc).
_IN_PARAM TPM_TAG tag TPM_TAG_RQU_AUTH1_COMMAND
_IN_PARAM UINT32 paramSize Total number of input bytes including paramSize and tag
_IN_PARAM TPM_COMMAND_CODE ordinal Command ordinal: TPM_ORD_ChangeAuthAsymFinish
_IN_PARAM TPM_KEY_HANDLE parentHandle The keyHandle of the parent key for the input data
_IN_PARAM TPM_KEY_HANDLE ephHandle The keyHandle identifier for the ephemeral key
_IN_PARAM TPM_ENTITY_TYPE entityType The type of entity to be modified s
_IN_PARAM TPM_HMAC newAuthLink HMAC calculation that links the old and new AuthData values together
_IN_PARAM UINT32 newAuthSize Size of encNewAuth
_IN_PARAM BYTE[] encNewAuth New AuthData encrypted with ephemeral key.
_IN_PARAM UINT32 encDataSize The size of the inData parameter
_IN_PARAM BYTE[] encData The encrypted entity that is to be modified.
_IN_PARAM TPM_AUTHHANDLE authHandle Authorization for parent key.
_IN_PARAM TPM_NONCE authLastNonceEven Even nonce previously generated by TPM to cover inputs
_IN_PARAM TPM_NONCE nonceOdd Nonce generated by system associated with authHandle
_IN_PARAM BOOL continueAuthSession The continue use flag for the authorization session handle
_IN_PARAM TPM_AUTHDATA privAuth The authorization session digest for inputs and parentHandle. HMAC key: parentKey.usageAuth.
_OUT_PARAM TPM_TAG tag TPM_TAG_RSP_AUTH1_COMMAND
_OUT_PARAM UINT32 paramSize Total number of output bytes including paramSize and tag
_OUT_PARAM TPM_RESULT returnCode The return code of the operation.
_OUT_PARAM UINT32 outDataSize The used size of the output area for outData
_OUT_PARAM BYTE[] outData The modified, encrypted entity. s
_OUT_PARAM TPM_NONCE saltNonce A nonce value from the TPM RNG to add entropy to the changeProof value
_OUT_PARAM TPM_DIGEST changeProof Proof that AuthData has changed.
_OUT_PARAM TPM_NONCE nonceEven Even nonce newly generated by TPM to cover outputs
_OUT_PARAM BOOL continueAuthSession Continue use flag, TRUE if handle is still active
_OUT_PARAM TPM_AUTHDATA resAuth The authorization session digest for the returned parameters. HMAC key: parentKey.usageAuth.

_TPM_COMMAND TPM_Reset
_COMMENT TPM_Reset releases all resources associated with existing authorization sessions. This is useful if a TSS driver has lost track of the state in the TPM.
_IN_PARAM TPM_TAG tag TPM_TAG_RQU_COMMAND
_IN_PARAM UINT32 paramSize Total number of input bytes including paramSize and tag
_IN_PARAM TPM_COMMAND_CODE ordinal Command ordinal: TPM_ORD_Reset.
_OUT_PARAM TPM_TAG tag TPM_TAG_RSP_COMMAND
_OUT_PARAM UINT32 paramSize Total number of output bytes including paramSize and tag
_OUT_PARAM TPM_RESULT returnCode The return code of the operation.

_TPM_COMMAND TPM_OwnerReadPubek
_COMMENT Return the endorsement key public portion. This is authorized by the TPM Owner.
_IN_PARAM TPM_TAG tag TPM_TAG_RQU_AUTH1_COMMAND
_IN_PARAM UINT32 paramSize Total number of input bytes including paramSize and tag
_IN_PARAM TPM_COMMAND_CODE ordinal Command ordinal: TPM_ORD_OwnerReadPubek
_IN_PARAM TPM_AUTHHANDLE authHandle The authorization session handle used for owner authentication.
_IN_PARAM TPM_NONCE authLastNonceEven Even nonce previously generated by TPM to cover inputs
_IN_PARAM TPM_NONCE nonceOdd Nonce generated by system associated with authHandle
_IN_PARAM BOOL continueAuthSession The continue use flag for the authorization session handle
_IN_PARAM TPM_AUTHDATA ownerAuth The authorization session digest for inputs and owner authentication. HMAC key: ownerAuth.
_OUT_PARAM TPM_TAG tag TPM_TAG_RSP_AUTH1_COMMAND
_OUT_PARAM UINT32 paramSize Total number of output bytes including paramSize and tag
_OUT_PARAM TPM_RESULT returnCode The return code of the operation.
_OUT_PARAM TPM_PUBKEY pubEndorsementKey The public endorsement key
_OUT_PARAM TPM_NONCE nonceEven Even nonce newly generated by TPM to cover outputs
_OUT_PARAM BOOL continueAuthSession Continue use flag, TRUE if handle is still active
_OUT_PARAM TPM_AUTHDATA resAuth The authorization session digest for the returned parameters. HMAC key: ownerAuth.

_TPM_COMMAND TPM_DisablePubekRead
_COMMENT The TPM Owner may wish to prevent any entity from reading the PUBEK. This command sets the non-volatile flag so that the TPM_ReadPubek command always returns TPM_DISABLED_CMD. This command has in essence been deprecated as TPM_TakeOwnership now sets the value to false. The command remains at this time for backward compatibility.
_IN_PARAM TPM_TAG tag TPM_TAG_RQU_AUTH1_COMMAND
_IN_PARAM UINT32 paramSize Total number of input bytes including paramSize and tag
_IN_PARAM TPM_COMMAND_CODE ordinal Command ordinal: TPM_ORD_DisablePubekRead
_IN_PARAM TPM_AUTHHANDLE authHandle The authorization session handle used for owner authentication.
_IN_PARAM TPM_NONCE authLastNonceEven Even nonce previously generated by TPM to cover inputs
_IN_PARAM TPM_NONCE nonceOdd Nonce generated by system associated with authHandle
_IN_PARAM BOOL continueAuthSession The continue use flag for the authorization session handle
_IN_PARAM TPM_AUTHDATA ownerAuth The authorization session digest for inputs and owner authorization. HMAC key: ownerAuth.
_OUT_PARAM TPM_TAG tag TPM_TAG_RSP_AUTH1_COMMAND
_OUT_PARAM UINT32 paramSize Total number of output bytes including paramSize and tag
_OUT_PARAM TPM_RESULT returnCode The return code of the operation.
_OUT_PARAM TPM_NONCE nonceEven Even nonce newly generated by TPM to cover outputs
_OUT_PARAM BOOL continueAuthSession Continue use flag, TRUE if handle is still active
_OUT_PARAM TPM_AUTHDATA resAuth The authorization session digest for the returned parameters. HMAC key: ownerAuth.

_TPM_COMMAND TPM_LoadKey
_COMMENT Version 1.2 deprecates TPM_LoadKey due to the HMAC of the new key handle on return. The wrapping makes use of the handle difficult in an environment where the TSS, or other management entity, is changing the TPM handle to a virtual handle. Software using TPM_LoadKey on a 1.2 TPM can have a collision with the returned handle as the 1.2 TPM uses random values in the lower three bytes of the handle. All new software must use LoadKey2 to allow management software the ability to manage the key handle. Before the TPM can use a key to either wrap, unwrap, bind, unbind, seal, unseal, sign or perform any other action, it needs to be present in the TPM. The TPM_LoadKey function loads the key into the TPM for further use. The TPM assigns the key handle. The TPM always locates a loaded key by use of the handle. The assumption is that the handle may change due to key management operations. It is the responsibility of upper level software to maintain the mapping between handle and any label used by external software. This command has the responsibility of enforcing restrictions on the use of keys. For example, when attempting to load a STORAGE key it will be checked for the restrictions on a storage key (2048 size etc.). The load command must maintain a record of whether any previous key in the key hierarchy was bound to a PCR using parentPCRStatus. The flag parentPCRStatus enables the possibility of checking that a platform passed through some particular state or states before finishing in the current state. A grandparent key could be linked to state-1, a parent key could linked to state-2, and a child key could be linked to state-3, for example. The use of the child key then indicates that the platform passed through states 1 and 2 and is currently in state 3, in this example. TPM_Startup with stType == TPM_ST_CLEAR indicates that the platform has been reset, so the platform has not passed through the previous states. Hence keys with parentPCRStatus==TRUE must be unloaded if TPM_Startup is issued with stType == TPM_ST_CLEAR. If a TPM_KEY structure has been decrypted AND the integrity test using "pubDataDigest" has passed AND the key is non-migratory, the key must have been created by the TPM. So there is every reason to believe that the key poses no security threat to the TPM. While there is no known attack from a rogue migratory key, there is a desire to verify that a loaded migratory key is a real key, arising from a general sense of unease about execution of arbitrary data as a key. Ideally a consistency check would consist of an encrypt/decrypt cycle, but this may be expensive. For RSA keys, it is therefore suggested that the consistency test consists of dividing the supposed RSA product by the supposed RSA prime, and checking that there is no remainder.
_IN_PARAM TPM_TAG tag TPM_TAG_RQU_AUTH1_COMMAND
_IN_PARAM UINT32 paramSize Total number of input bytes including paramSize and tag
_IN_PARAM TPM_COMMAND_CODE ordinal Command ordinal: TPM_ORD_LoadKey.
_IN_PARAM TPM_KEY_HANDLE parentHandle TPM handle of parent key.
_IN_PARAM TPM_KEY inKey Incoming key structure, both encrypted private and clear public portions. MAY be TPM_KEY12
_IN_PARAM TPM_AUTHHANDLE authHandle The authorization session handle used for parentHandle authorization.
_IN_PARAM TPM_NONCE authLastNonceEven Even nonce previously generated by TPM to cover inputs
_IN_PARAM TPM_NONCE nonceOdd Nonce generated by system associated with authHandle
_IN_PARAM BOOL continueAuthSession The continue use flag for the authorization session handle
_IN_PARAM TPM_AUTHDATA parentAuth The authorization session digest for inputs and parentHandle. HMAC key: parentKey.usageAuth.
_OUT_PARAM TPM_TAG tag TPM_TAG_RSP_AUTH1_COMMAND
_OUT_PARAM UINT32 paramSize Total number of output bytes including paramSize and tag
_OUT_PARAM TPM_RESULT returnCode The return code of the operation.
_OUT_PARAM TPM_KEY_HANDLE inkeyHandle Internal TPM handle where decrypted key was loaded.
_OUT_PARAM TPM_NONCE nonceEven Even nonce newly generated by TPM to cover outputs
_OUT_PARAM BOOL continueAuthSession Continue use flag, TRUE if handle is still active
_OUT_PARAM TPM_AUTHDATA resAuth The authorization session digest for the returned parameters. HMAC key: parentKey.usageAuth.
_COMMENT These commands are no longer active commands. Their removal is due to security concerns with their use.

_TPM_COMMAND TPM_GetOrdinalAuditStatus
_COMMENT Get the status of the audit flag for the given ordinal.
_IN_PARAM TPM_TAG tag TPM_TAG_RQU_COMMAND
_IN_PARAM UINT32 paramSize Total number of input bytes including paramSize and tag
_IN_PARAM TPM_COMMAND_CODE ordinal Command ordinal: TPM_ORD_GetOrdinalAuditStatus
_IN_PARAM TPM_COMMAND_CODE ordinalToQuery The ordinal whose audit flag is to be queried
_OUT_PARAM TPM_TAG tag TPM_TAG_RSP_COMMAND
_OUT_PARAM UINT32 paramSize Total number of output bytes including paramSize and tag
_OUT_PARAM TPM_RESULT returnCode The return code of the operation.
_OUT_PARAM BOOL State Value of audit flag for ordinalToQuery

_TPM_COMMAND TPM_CertifySelfTest
_COMMENT TPM_CertifySelfTest causes the TPM to perform a full self-test and return an authenticated value if the test passes. If a caller itself requires proof, it is sufficient to use any signing key for which only the TPM and the caller have AuthData. If a caller requires proof for a third party, the signing key must be one whose signature is trusted by the third party. A TPM-identity key may be suitable.
_IN_PARAM TPM_TAG tag TPM_TAG_RQU_AUTH1_COMMAND
_IN_PARAM UINT32 paramSize Total number of input bytes including paramSize and tag
_IN_PARAM TPM_COMMAND_CODE ordinal Command ordinal: TPM_ORD_CertifySelfTest
_IN_PARAM TPM_KEY_HANDLE keyHandle The keyHandle identifier of a loaded key that can perform digital signatures.
_IN_PARAM TPM_NONCE antiReplay Anti Replay nonce to prevent replay of messages
_IN_PARAM TPM_AUTHHANDLE authHandle The authorization session handle used for keyHandle authorization
_IN_PARAM TPM_NONCE authLastNonceEven Even nonce previously generated by TPM to cover inputs
_IN_PARAM TPM_NONCE nonceOdd Nonce generated by system associated with authHandle
_IN_PARAM BOOL continueAuthSession The continue use flag for the authorization session handle
_IN_PARAM TPM_AUTHDATA privAuth The authorization session digest that authorizes the inputs and use of keyHandle. HMAC key: key.usageAuth
_OUT_PARAM TPM_TAG tag TPM_TAG_RSP_AUTH1_COMMAND
_OUT_PARAM UINT32 paramSize Total number of output bytes including paramSize and tag
_OUT_PARAM TPM_RESULT returnCode The return code of the operation.
_OUT_PARAM UINT32 sigSize The length of the returned digital signature
_OUT_PARAM BYTE[] sig The resulting digital signature.
_OUT_PARAM TPM_NONCE nonceEven Even nonce newly generated by TPM to cover outputs
_OUT_PARAM BOOL continueAuthSession Continue use flag, TRUE if handle is still active
_OUT_PARAM TPM_AUTHDATA resAuth The authorization session digest for the returned parameters. HMAC key: key.usageAuth
